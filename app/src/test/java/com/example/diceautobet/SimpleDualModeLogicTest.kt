package com.example.diceautobet

import com.example.diceautobet.models.*
import org.junit.Test
import org.junit.Assert.*

/**
 * –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ SimpleDualModeController:
 * 1. –¶–∏–∫–ª–∏—á–µ—Å–∫–∞—è —Å–º–µ–Ω–∞ —Ü–≤–µ—Ç–æ–≤ –ø–æ—Å–ª–µ 2 –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π
 * 2. –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ —É–¥–≤–æ–µ–Ω–∏—è –¥–æ 30.000
 */
class SimpleDualModeLogicTest {

    @Test
    fun `—Ç–µ—Å—Ç —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–π —Å–º–µ–Ω—ã —Ü–≤–µ—Ç–æ–≤`() {
        // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –∫—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç
        var state = SimpleDualModeState(
            currentColor = BetChoice.RED,
            previousColor = null,
            consecutiveLossesOnCurrentColor = 0
        )

        // –ü–µ—Ä–≤—ã–π –ø—Ä–æ–∏–≥—Ä—ã—à –Ω–∞ –∫—Ä–∞—Å–Ω–æ–º
        state = state.copy(consecutiveLossesOnCurrentColor = 1)
        assertFalse("–ü–æ—Å–ª–µ 1 –ø—Ä–æ–∏–≥—Ä—ã—à–∞ —Ü–≤–µ—Ç –º–µ–Ω—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ", state.shouldChangeColor())
        assertEquals("–¶–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è –∫—Ä–∞—Å–Ω—ã–º", BetChoice.RED, state.currentColor)

        // –í—Ç–æ—Ä–æ–π –ø—Ä–æ–∏–≥—Ä—ã—à –Ω–∞ –∫—Ä–∞—Å–Ω–æ–º - –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–º–µ–Ω–∞ –Ω–∞ –æ—Ä–∞–Ω–∂–µ–≤—ã–π
        state = state.copy(consecutiveLossesOnCurrentColor = 2)
        assertTrue("–ü–æ—Å–ª–µ 2 –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π –Ω—É–∂–Ω–æ –º–µ–Ω—è—Ç—å —Ü–≤–µ—Ç", state.shouldChangeColor())
        
        val nextColor = state.getNextColor()
        assertEquals("–ü–æ—Å–ª–µ 2 –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π –Ω–∞ –∫—Ä–∞—Å–Ω–æ–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ä–∞–Ω–∂–µ–≤—ã–π", BetChoice.ORANGE, nextColor)

        // –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–º–µ–Ω—É —Ü–≤–µ—Ç–∞
        state = state.copy(
            currentColor = nextColor,
            previousColor = BetChoice.RED,
            consecutiveLossesOnCurrentColor = 0 // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ü–≤–µ—Ç–∞
        )

        // –°–Ω–æ–≤–∞ 2 –ø—Ä–æ–∏–≥—Ä—ã—à–∞, —Ç–µ–ø–µ—Ä—å –Ω–∞ –æ—Ä–∞–Ω–∂–µ–≤–æ–º - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–æ–∑–≤—Ä–∞—Ç –∫ –∫—Ä–∞—Å–Ω–æ–º—É
        state = state.copy(consecutiveLossesOnCurrentColor = 2)
        assertTrue("–ü–æ—Å–ª–µ 2 –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π –Ω–∞ –æ—Ä–∞–Ω–∂–µ–≤–æ–º –Ω—É–∂–Ω–æ –º–µ–Ω—è—Ç—å —Ü–≤–µ—Ç", state.shouldChangeColor())
        
        val returnColor = state.getNextColor()
        assertEquals("–ü–æ—Å–ª–µ 2 –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π –Ω–∞ –æ—Ä–∞–Ω–∂–µ–≤–æ–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–æ–∑–≤—Ä–∞—Ç –∫ –∫—Ä–∞—Å–Ω–æ–º—É", BetChoice.RED, returnColor)

        println("‚úÖ –¢–µ—Å—Ç —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–π —Å–º–µ–Ω—ã —Ü–≤–µ—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω: RED ‚Üí ORANGE ‚Üí RED")
    }

    @Test
    fun `—Ç–µ—Å—Ç —É–¥–≤–æ–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏ –¥–æ 30000`() {
        var state = SimpleDualModeState(currentBet = 20)

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É–¥–≤–æ–µ–Ω–∏–π
        val expectedBets = listOf(20, 40, 80, 160, 320, 640, 1280, 2560, 5120, 10240, 20480, 30000)
        var currentBet = 20

        for (i in 1 until expectedBets.size) {
            val nextBet = state.calculateNextBet(GameResultType.LOSS, baseBet = 20)
            state = state.copy(currentBet = nextBet)
            currentBet = nextBet
            
            assertEquals("–°—Ç–∞–≤–∫–∞ $i –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å ${expectedBets[i]}", expectedBets[i], currentBet)
            
            // –ü–æ—Å–ª–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –º–∞–∫—Å–∏–º—É–º–∞ —Å—Ç–∞–≤–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å—Å—è
            if (currentBet == 30000) {
                val finalBet = state.calculateNextBet(GameResultType.LOSS, baseBet = 20)
                assertEquals("–ü–æ—Å–ª–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –º–∞–∫—Å–∏–º—É–º–∞ —Å—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –æ—Å—Ç–∞—Ç—å—Å—è 30000", 30000, finalBet)
                break
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–±—Ä–æ—Å –ø—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–µ
        val winBet = state.calculateNextBet(GameResultType.WIN, baseBet = 20)
        assertEquals("–ü—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–µ —Å—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å—Å—è –∫ 20", 20, winBet)

        println("‚úÖ –¢–µ—Å—Ç —É–¥–≤–æ–µ–Ω–∏—è –¥–æ 30.000 –ø—Ä–æ–π–¥–µ–Ω")
    }

    @Test
    fun `—Ç–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏`() {
        var state = SimpleDualModeState(
            currentColor = BetChoice.RED,
            currentBet = 20,
            previousColor = null
        )

        println("üéÆ –°–ò–ú–£–õ–Ø–¶–ò–Ø –ü–û–õ–ù–û–ì–û –¶–ò–ö–õ–ê:")
        println("–ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${state.currentColor}, —Å—Ç–∞–≤–∫–∞ ${state.currentBet}")

        // 2 –ø—Ä–æ–∏–≥—Ä—ã—à–∞ –Ω–∞ –∫—Ä–∞—Å–Ω–æ–º
        state = state.copy(currentBet = 40, consecutiveLossesOnCurrentColor = 1)
        println("–ü—Ä–æ–∏–≥—Ä—ã—à 1 –Ω–∞ RED: —Å—Ç–∞–≤–∫–∞ ${state.currentBet}")
        
        state = state.copy(currentBet = 80, consecutiveLossesOnCurrentColor = 2)
        println("–ü—Ä–æ–∏–≥—Ä—ã—à 2 –Ω–∞ RED: —Å—Ç–∞–≤–∫–∞ ${state.currentBet}, —Å–º–µ–Ω–∞ —Ü–≤–µ—Ç–∞!")

        // –°–º–µ–Ω–∞ –Ω–∞ –æ—Ä–∞–Ω–∂–µ–≤—ã–π
        state = state.copy(
            currentColor = BetChoice.ORANGE,
            previousColor = BetChoice.RED,
            currentBet = 160,
            consecutiveLossesOnCurrentColor = 1 // –ü–µ—Ä–≤—ã–π –ø—Ä–æ–∏–≥—Ä—ã—à –Ω–∞ –Ω–æ–≤–æ–º —Ü–≤–µ—Ç–µ
        )
        println("–ü—Ä–æ–∏–≥—Ä—ã—à 1 –Ω–∞ ORANGE: —Å—Ç–∞–≤–∫–∞ ${state.currentBet}")

        // –í—Ç–æ—Ä–æ–π –ø—Ä–æ–∏–≥—Ä—ã—à –Ω–∞ –æ—Ä–∞–Ω–∂–µ–≤–æ–º
        state = state.copy(currentBet = 320, consecutiveLossesOnCurrentColor = 2)
        println("–ü—Ä–æ–∏–≥—Ä—ã—à 2 –Ω–∞ ORANGE: —Å—Ç–∞–≤–∫–∞ ${state.currentBet}, –≤–æ–∑–≤—Ä–∞—Ç –∫ RED!")

        // –í–æ–∑–≤—Ä–∞—Ç –∫ –∫—Ä–∞—Å–Ω–æ–º—É
        state = state.copy(
            currentColor = BetChoice.RED,
            previousColor = BetChoice.ORANGE,
            currentBet = 640,
            consecutiveLossesOnCurrentColor = 1
        )
        println("–ü—Ä–æ–∏–≥—Ä—ã—à 1 –Ω–∞ RED (–≤–æ–∑–≤—Ä–∞—Ç): —Å—Ç–∞–≤–∫–∞ ${state.currentBet}")

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        assertEquals("–§–∏–Ω–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Å–Ω—ã–º", BetChoice.RED, state.currentColor)
        assertEquals("–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ü–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ä–∞–Ω–∂–µ–≤—ã–º", BetChoice.ORANGE, state.previousColor)
        assertEquals("–§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 640", 640, state.currentBet)

        println("‚úÖ –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–æ–π–¥–µ–Ω: RED(2 loss) ‚Üí ORANGE(2 loss) ‚Üí RED(continues)")
    }
}
