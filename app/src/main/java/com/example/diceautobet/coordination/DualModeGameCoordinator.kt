package com.example.diceautobet.coordination

import android.content.Context
import android.util.Log
import com.example.diceautobet.automation.DualModeBetPlacer
import com.example.diceautobet.detection.DualModeResultDetector
import com.example.diceautobet.logging.GameLogger
import com.example.diceautobet.managers.DualWindowAreaManager
import com.example.diceautobet.models.*
import com.example.diceautobet.sync.DualModeSmartSynchronizer
import com.example.diceautobet.timing.DualModeTimingOptimizer
import com.example.diceautobet.utils.PreferencesManager
import com.example.diceautobet.utils.ScreenshotService
import kotlinx.coroutines.*

/**
 * –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –∏–≥—Ä—ã –≤ –¥–≤–æ–π–Ω–æ–º —Ä–µ–∂–∏–º–µ —Å —ç–∫–æ–Ω–æ–º–Ω–æ–π AI –ª–æ–≥–∏–∫–æ–π
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º–∏ –∞—Å–ø–µ–∫—Ç–∞–º–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∏–≥—Ä—ã —Å –¥–≤—É–º—è –æ–∫–Ω–∞–º–∏
 * üí∞ –≠–ö–û–ù–û–ú–ò–Ø: AI –∑–∞–ø—Ä–æ—Å—ã —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫—É–±–∏–∫–æ–≤
 */
class DualModeGameCoordinator(
    private val context: Context,
    private val areaManager: DualWindowAreaManager,
    private val screenshotService: ScreenshotService,
    private val gameLogger: GameLogger
) {
    companion object {
        private const val TAG = "DualModeGameCoordinator"
        private const val STRATEGY_DELAY_MS = 100L
    }

    // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞
    private lateinit var betPlacer: DualModeBetPlacer
    private lateinit var resultDetector: DualModeResultDetector
    private lateinit var smartSynchronizer: DualModeSmartSynchronizer
    private lateinit var timingOptimizer: DualModeTimingOptimizer
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞
    private var gameState = DualGameState()
    private var settings = DualModeSettings()
    
    // üí∞ –≠–ö–û–ù–û–ú–ò–Ø: AI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    private lateinit var preferencesManager: PreferencesManager
    
    // –ö–æ—Ä—É—Ç–∏–Ω—ã
    private val coordinatorScope = CoroutineScope(Dispatchers.Main + SupervisorJob())
    private var gameJob: Job? = null
    private var isRunning = false
    
    // –°–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π
    private var onStateChanged: ((DualGameState) -> Unit)? = null
    private var onBetCompleted: ((WindowType, BetChoice, Int) -> Unit)? = null
    private var onResultProcessed: ((WindowType, RoundResult) -> Unit)? = null
    private var onErrorOccurred: ((String, String) -> Unit)? = null

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
     */
    fun initialize(initialState: DualGameState, initialSettings: DualModeSettings) {
        Log.d(TAG, "üí∞ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫–æ–Ω–æ–º–Ω–æ–≥–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞")
        
        gameState = initialState
        settings = initialSettings
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º PreferencesManager –¥–ª—è AI
        preferencesManager = PreferencesManager(context)
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        initializeComponents()
        
        Log.d(TAG, "‚úÖ –≠–∫–æ–Ω–æ–º–Ω—ã–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä
     */
    fun start() {
        if (isRunning) {
            Log.w(TAG, "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        }
        
        Log.d(TAG, "üöÄ –ó–∞–ø—É—Å–∫ —ç–∫–æ–Ω–æ–º–Ω–æ–≥–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞")
        
        // üí∞ –í–ê–ñ–ù–û: —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–µ—Ä–≤–æ–π —Å—Ç–∞–≤–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        if (::resultDetector.isInitialized) {
            resultDetector.resetFirstBetFlag()
        }
        
        isRunning = true
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
        gameJob = coordinatorScope.launch {
            runGameLoop()
        }
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        notifyStateChanged()
        
        Log.d(TAG, "‚úÖ –≠–∫–æ–Ω–æ–º–Ω—ã–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω")
    }

    /**
     * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä
     */
    fun stop() {
        Log.d(TAG, "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞")
        
        isRunning = false
        
        // –û—Ç–º–µ–Ω—è–µ–º –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
        gameJob?.cancel()
        gameJob = null
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        if (::resultDetector.isInitialized) {
            resultDetector.stopDetection()
        }
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        notifyStateChanged()
        
        Log.d(TAG, "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
     */
    fun updateSettings(newSettings: DualModeSettings) {
        Log.d(TAG, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞")
        settings = newSettings
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –µ—Å–ª–∏ –æ–Ω–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
        if (::timingOptimizer.isInitialized) {
            timingOptimizer.updateSettings(newSettings)
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
     */
    fun getStats(): Map<String, Any> {
        return mapOf(
            "isRunning" to isRunning,
            "totalBets" to gameState.totalBetsPlaced,
            "profit" to gameState.totalProfit,
            "activeWindow" to gameState.currentActiveWindow.name
        )
    }

    /**
     * –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
     */
    fun optimize() {
        Log.d(TAG, "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        
        if (::timingOptimizer.isInitialized) {
            timingOptimizer.optimize()
        }
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
     */
    private suspend fun runGameLoop() {
        Log.d(TAG, "–ó–∞–ø—É—Å–∫ –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞")
        
        try {
            while (isRunning && coordinatorScope.isActive) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                if (!gameState.isReadyForDualMode()) {
                    Log.w(TAG, "–ò–≥—Ä–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –¥–≤–æ–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞")
                    delay(1000)
                    continue
                }
                
                // –í—ã–ø–æ–ª–Ω—è–µ–º —Ü–∏–∫–ª –∏–≥—Ä—ã
                performGameCycle()
                
                // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
                delay(settings.delayBetweenActions)
            }
        } catch (e: CancellationException) {
            Log.d(TAG, "–ò–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª –æ—Ç–º–µ–Ω–µ–Ω")
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –≤ –∏–≥—Ä–æ–≤–æ–º —Ü–∏–∫–ª–µ", e)
            onErrorOccurred?.invoke("–û—à–∏–±–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞", e.message ?: "")
        }
        
        Log.d(TAG, "–ò–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω")
    }

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω —Ü–∏–∫–ª –∏–≥—Ä—ã
     */
    private suspend fun performGameCycle() {
        try {
            // 1. –†–∞–∑–º–µ—â–∞–µ–º —Å—Ç–∞–≤–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if (shouldPlaceBet()) {
                placeBetInActiveWindow()
            }
            
            // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            checkForResults()
            
            // 3. –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if (gameState.waitingForResult) {
                processStrategy()
            }
            
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∏–≥—Ä—ã", e)
            onErrorOccurred?.invoke("–û—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞ –∏–≥—Ä—ã", e.message ?: "")
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ —Ä–∞–∑–º–µ—â–∞—Ç—å —Å—Ç–∞–≤–∫—É
     */
    private fun shouldPlaceBet(): Boolean {
        return !gameState.waitingForResult && 
               gameState.isRunning &&
               gameState.currentActiveWindow != null
    }

    /**
     * –†–∞–∑–º–µ—â–∞–µ—Ç —Å—Ç–∞–≤–∫—É –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –æ–∫–Ω–µ
     */
    private suspend fun placeBetInActiveWindow() {
        val activeWindow = gameState.currentActiveWindow ?: return
        
        try {
            Log.d(TAG, "–†–∞–∑–º–µ—â–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ –≤ –æ–∫–Ω–µ $activeWindow")
            
            val betAmount = calculateBetAmount()
            val betChoice = determineBetChoice()
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–º–µ—â–∞—Ç–µ–ª—è —Å—Ç–∞–≤–æ–∫
            if (::betPlacer.isInitialized) {
                val success = betPlacer.placeBet(activeWindow, betChoice, betAmount, settings.strategy)
                if (success) {
                    handleBetPlaced(activeWindow, betChoice, betAmount)
                } else {
                    handleBetFailed(activeWindow, betChoice, betAmount)
                }
            }
            
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏", e)
            onErrorOccurred?.invoke("–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏", e.message ?: "")
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏
     */
    private fun handleBetPlaced(windowType: WindowType, betChoice: BetChoice, amount: Int) {
        Log.d(TAG, "–°—Ç–∞–≤–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∞: $windowType, $betChoice, $amount")
        
        gameState = gameState.copy(
            waitingForResult = true,
            lastBetWindow = windowType,
            totalBetsPlaced = gameState.totalBetsPlaced + 1
        )
        
        gameLogger.logBet(betChoice, amount, mapOf(
            "window" to windowType.name,
            "strategy" to settings.strategy.name
        ))
        
        onBetCompleted?.invoke(windowType, betChoice, amount)
        notifyStateChanged()
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ—É–¥–∞—á–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏
     */
    private fun handleBetFailed(windowType: WindowType, betChoice: BetChoice, amount: Int) {
        Log.w(TAG, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å—Ç–∞–≤–∫—É: $windowType, $betChoice, $amount")
        
        gameLogger.logError(Exception("–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏"), "–û–∫–Ω–æ: $windowType, –í—ã–±–æ—Ä: $betChoice, –°—É–º–º–∞: $amount")
        
        onErrorOccurred?.invoke("–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏", "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å—Ç–∞–≤–∫—É –≤ –æ–∫–Ω–µ $windowType")
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã
     */
    private suspend fun checkForResults() {
        if (!gameState.waitingForResult) return
        
        try {
            if (::resultDetector.isInitialized) {
                // –î–µ—Ç–µ–∫—Ç–æ—Ä —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–Ω–æ–º–Ω–æ —á–µ—Ä–µ–∑ startDetection
                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            }
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", e)
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
     */
    private suspend fun processStrategy() {
        try {
            when (settings.strategy) {
                DualStrategy.WIN_SWITCH -> applyWinSwitchStrategy()
                DualStrategy.LOSS_DOUBLE -> applyLossDoubleStrategy()
                DualStrategy.COLOR_ALTERNATING -> applyColorAlternatingStrategy()
            }
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏", e)
        }
    }

    /**
     * –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–µ
     */
    private suspend fun applyWinSwitchStrategy() {
        // –õ–æ–≥–∏–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ WIN_SWITCH
        Log.d(TAG, "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ WIN_SWITCH")
        
        delay(STRATEGY_DELAY_MS)
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –æ–∫–Ω–æ –ø—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–µ
        gameState = gameState.switchActiveWindow()
        notifyStateChanged()
    }

    /**
     * –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —É–¥–≤–æ–µ–Ω–∏—è –ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ
     */
    private suspend fun applyLossDoubleStrategy() {
        // –õ–æ–≥–∏–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ LOSS_DOUBLE
        Log.d(TAG, "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ LOSS_DOUBLE")
        
        delay(STRATEGY_DELAY_MS)
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –æ–∫–Ω–æ –ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ –∏ —É–¥–≤–∞–∏–≤–∞–µ–º
        gameState = gameState.switchActiveWindow()
        notifyStateChanged()
    }

    /**
     * –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏—è —Ü–≤–µ—Ç–æ–≤
     */
    private suspend fun applyColorAlternatingStrategy() {
        // –õ–æ–≥–∏–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ COLOR_ALTERNATING
        Log.d(TAG, "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ COLOR_ALTERNATING")
        
        delay(STRATEGY_DELAY_MS)
        
        // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –ø–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π
        if (gameState.consecutiveLosses >= settings.maxConsecutiveLosses) {
            val newColor = if (gameState.currentColor == BetChoice.RED) 
                BetChoice.ORANGE else BetChoice.RED
            
            gameState = gameState.copy(
                currentColor = newColor,
                consecutiveLosses = 0
            )
        }
        
        notifyStateChanged()
    }

    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏
     */
    private fun calculateBetAmount(): Int {
        // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—É–º–º—ã —Å—Ç–∞–≤–∫–∏
        return when (settings.strategy) {
            DualStrategy.WIN_SWITCH -> settings.baseBet
            DualStrategy.LOSS_DOUBLE -> {
                if (gameState.consecutiveLosses > 0) {
                    minOf(settings.baseBet * (1 shl gameState.consecutiveLosses), settings.maxBet)
                } else {
                    settings.baseBet
                }
            }
            DualStrategy.COLOR_ALTERNATING -> settings.baseBet
        }
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤—ã–±–æ—Ä —Å—Ç–∞–≤–∫–∏
     */
    private fun determineBetChoice(): BetChoice {
        return gameState.currentColor
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
     */
    private fun initializeComponents() {
        Log.d(TAG, "üí∞ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫–æ–Ω–æ–º–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
        
        // –°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä —Ç–∞–π–º–∏–Ω–≥–∞
        timingOptimizer = DualModeTimingOptimizer(context)
        
        // –ó–∞—Ç–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –Ω–µ–≥–æ
        betPlacer = DualModeBetPlacer(context, areaManager, timingOptimizer)
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å —ç–∫–æ–Ω–æ–º–Ω–æ–π AI –ª–æ–≥–∏–∫–æ–π
        resultDetector = DualModeResultDetector(context, screenshotService, timingOptimizer)
        
        // ü§ñ –í–ê–ñ–ù–û: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏
        resultDetector.initializeAI(preferencesManager)
        
        resultDetector.setOnResultDetectedListener { windowType, result ->
            handleResultDetected(windowType, result)
        }
        resultDetector.setOnDetectionErrorListener { message, details ->
            onErrorOccurred?.invoke(message, details?.message ?: "Unknown error")
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä
        smartSynchronizer = DualModeSmartSynchronizer(context, timingOptimizer)
        
        Log.d(TAG, "‚úÖ –≠–∫–æ–Ω–æ–º–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
     */
    private fun handleResultDetected(windowType: WindowType, result: RoundResult) {
        Log.d(TAG, "–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –æ–∫–Ω–µ $windowType: $result")

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        gameState = gameState.copy(
            waitingForResult = false
        )

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        updateStatistics(result)

        // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–µ–π
        onResultProcessed?.invoke(windowType, result)
        notifyStateChanged()
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
     */
    private fun updateStatistics(result: RoundResult) {
        val isWin = result.winner != null && !result.isDraw
        
        if (isWin) {
            gameState = gameState.copy(
                consecutiveLosses = 0
            )
        } else {
            gameState = gameState.copy(
                consecutiveLosses = gameState.consecutiveLosses + 1
            )
        }
    }

    /**
     * –£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    private fun notifyStateChanged() {
        onStateChanged?.invoke(gameState)
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä
     */
    fun isRunning(): Boolean = isRunning

    // === –°–ï–¢–¢–ï–†–´ –î–õ–Ø –°–õ–£–®–ê–¢–ï–õ–ï–ô ===

    fun setOnStateChangedListener(listener: (DualGameState) -> Unit) {
        onStateChanged = listener
    }

    fun setOnBetCompletedListener(listener: (WindowType, BetChoice, Int) -> Unit) {
        onBetCompleted = listener
    }

    fun setOnResultProcessedListener(listener: (WindowType, RoundResult) -> Unit) {
        onResultProcessed = listener
    }

    fun setOnErrorOccurredListener(listener: (String, String) -> Unit) {
        onErrorOccurred = listener
    }

    /**
     * –û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã
     */
    fun cleanup() {
        Log.d(TAG, "–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞")
        
        stop()
        
        if (::resultDetector.isInitialized) {
            resultDetector.cleanup()
        }
        
        if (::smartSynchronizer.isInitialized) {
            smartSynchronizer.cleanup()
        }
        
        coordinatorScope.cancel()
        
        Log.d(TAG, "–†–µ—Å—É—Ä—Å—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞ –æ—á–∏—â–µ–Ω—ã")
    }
}
