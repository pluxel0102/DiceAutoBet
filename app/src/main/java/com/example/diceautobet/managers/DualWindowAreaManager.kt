package com.example.diceautobet.managers

import android.content.Context
import android.graphics.Rect
import android.util.Log
import com.example.diceautobet.models.*
import com.example.diceautobet.utils.PreferencesManager
import com.example.diceautobet.utils.SplitScreenUtils
import com.example.diceautobet.utils.CoordinateUtils

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç—è–º–∏ —ç–∫—Ä–∞–Ω–∞ –≤ –¥–≤–æ–π–Ω–æ–º —Ä–µ–∂–∏–º–µ
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±—ã—Å—Ç—Ä–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –æ–±–ª–∞—Å—Ç—è–º–∏ –ª–µ–≤–æ–≥–æ –∏ –ø—Ä–∞–≤–æ–≥–æ –æ–∫–æ–Ω
 */
class DualWindowAreaManager(private val context: Context) {
    
    companion object {
        private const val TAG = "DualWindowAreaManager"
        private const val CACHE_VALIDITY_MS = 30000L // 30 —Å–µ–∫—É–Ω–¥
    }
    
    private val preferencesManager = PreferencesManager(context)
    private var currentActiveWindow = WindowType.LEFT
    
    // –ö—ç—à –æ–±–ª–∞—Å—Ç–µ–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    private var leftWindowAreas: Map<AreaType, ScreenArea> = emptyMap()
    private var rightWindowAreas: Map<AreaType, ScreenArea> = emptyMap()
    private var topWindowAreas: Map<AreaType, ScreenArea> = emptyMap()
    private var bottomWindowAreas: Map<AreaType, ScreenArea> = emptyMap()
    
    // üöÄ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –ö–≠–® - —á—Ç–æ–±—ã –Ω–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –∏–∑ Preferences –∫–∞–∂–¥—ã–π —Ä–∞–∑
    private var areasLoaded = false
    private var lastLoadTime = 0L
    
    // –ì—Ä–∞–Ω–∏—Ü—ã –æ–∫–æ–Ω
    private var leftWindowBounds: Rect = Rect()
    private var rightWindowBounds: Rect = Rect()
    
    // –£–±–∏—Ä–∞–µ–º –∞–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é - —Ç–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    private var initialized = false
    
    /**
     * –õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏
     */
    private fun ensureInitialized() {
        if (!initialized) {
            Log.d(TAG, "–ü–µ—Ä–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DualWindowAreaManager")
            refreshWindowBounds()
            loadAreas()
            initialized = true
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä–∞–Ω–∏—Ü–∞—Ö –æ–∫–æ–Ω
     */
    fun refreshWindowBounds() {
        leftWindowBounds = SplitScreenUtils.getWindowBounds(context, WindowType.LEFT)
        rightWindowBounds = SplitScreenUtils.getWindowBounds(context, WindowType.RIGHT)
        
        Log.d(TAG, "–û–±–Ω–æ–≤–ª–µ–Ω—ã –≥—Ä–∞–Ω–∏—Ü—ã –æ–∫–æ–Ω:")
        Log.d(TAG, "  –õ–µ–≤–æ–µ: $leftWindowBounds")
        Log.d(TAG, "  –ü—Ä–∞–≤–æ–µ: $rightWindowBounds")
    }
    
    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è –≤—Å–µ—Ö –æ–∫–æ–Ω —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
     */
    fun loadAreas() {
        val currentTime = System.currentTimeMillis()
        
        // üöÄ –ü–†–û–í–ï–†–ö–ê –ö–≠–®–ê - –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å–≤–µ–∂–∏–µ, –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–Ω–æ–≤–æ
        if (areasLoaded && (currentTime - lastLoadTime) < CACHE_VALIDITY_MS) {
            Log.d(TAG, "‚ö° –ö–≠–® –û–ë–õ–ê–°–¢–ï–ô –ê–ö–¢–£–ê–õ–ï–ù (–∑–∞–≥—Ä—É–∂–µ–Ω ${currentTime - lastLoadTime}–º—Å –Ω–∞–∑–∞–¥)")
            return
        }
        
        Log.d(TAG, "üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±–ª–∞—Å—Ç–µ–π –¥–ª—è –≤—Å–µ—Ö –æ–∫–æ–Ω (–∫—ç—à —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –ø—É—Å—Ç)")
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –æ–∫–æ–Ω
        leftWindowAreas = preferencesManager.loadAreasForWindow(WindowType.LEFT)
        rightWindowAreas = preferencesManager.loadAreasForWindow(WindowType.RIGHT)
        topWindowAreas = preferencesManager.loadAreasForWindow(WindowType.TOP)
        bottomWindowAreas = preferencesManager.loadAreasForWindow(WindowType.BOTTOM)
        
        // üöÄ –û–¢–ú–ï–ß–ê–ï–ú –ö–≠–® –ö–ê–ö –ê–ö–¢–£–ê–õ–¨–ù–´–ô
        areasLoaded = true
        lastLoadTime = currentTime
        
        Log.d(TAG, "‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –æ–±–ª–∞—Å—Ç–µ–π:")
        Log.d(TAG, "  –õ–µ–≤–æ–µ –æ–∫–Ω–æ: ${leftWindowAreas.size}")
        Log.d(TAG, "  –ü—Ä–∞–≤–æ–µ –æ–∫–Ω–æ: ${rightWindowAreas.size}")
        Log.d(TAG, "  TOP –æ–∫–Ω–æ: ${topWindowAreas.size}")
        Log.d(TAG, "  BOTTOM –æ–∫–Ω–æ: ${bottomWindowAreas.size}")
    }
    
    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ
     */
    fun switchActiveWindow(): WindowType {
        currentActiveWindow = when (currentActiveWindow) {
            WindowType.LEFT -> WindowType.RIGHT
            WindowType.RIGHT -> WindowType.LEFT
            WindowType.TOP -> WindowType.BOTTOM
            WindowType.BOTTOM -> WindowType.TOP
        }
        
        Log.d(TAG, "–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ: $currentActiveWindow")
        return currentActiveWindow
    }
    
    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ
     */
    fun setActiveWindow(windowType: WindowType) {
        currentActiveWindow = windowType
        Log.d(TAG, "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ: $currentActiveWindow")
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ
     */
    fun getCurrentActiveWindow(): WindowType = currentActiveWindow
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –æ–±–ª–∞—Å—Ç—å –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –æ–∫–Ω–µ
     */
    fun getActiveArea(areaType: AreaType): ScreenArea? {
        return getAreaForWindow(currentActiveWindow, areaType)
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –æ–±–ª–∞—Å—Ç—å –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –æ–∫–Ω–µ
     */
    fun getAreaForWindow(windowType: WindowType, areaType: AreaType): ScreenArea? {
        ensureInitialized()
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–ª–∞—Å—Ç–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–æ–≥–æ —Ç–∏–ø–∞ –æ–∫–Ω–∞
        val areas = when (windowType) {
            WindowType.LEFT -> {
                if (leftWindowAreas.isEmpty()) {
                    loadAreasForWindow(WindowType.LEFT)
                }
                leftWindowAreas
            }
            WindowType.RIGHT -> {
                if (rightWindowAreas.isEmpty()) {
                    loadAreasForWindow(WindowType.RIGHT)
                }
                rightWindowAreas
            }
            WindowType.TOP -> {
                if (topWindowAreas.isEmpty()) {
                    loadAreasForWindow(WindowType.TOP)
                }
                topWindowAreas
            }
            WindowType.BOTTOM -> {
                if (bottomWindowAreas.isEmpty()) {
                    loadAreasForWindow(WindowType.BOTTOM)
                }
                bottomWindowAreas
            }
        }
        
        val area = areas[areaType]
        if (area == null) {
            Log.w(TAG, "–û–±–ª–∞—Å—Ç—å $areaType –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –æ–∫–Ω–∞ $windowType")
            return null
        }
        
        Log.d(TAG, "–ù–∞–π–¥–µ–Ω–∞ –æ–±–ª–∞—Å—Ç—å $areaType –¥–ª—è –æ–∫–Ω–∞ $windowType: ${area.rect}")
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–ª—è –∫–ª–∏–∫–æ–≤ –≤ BOTTOM –æ–∫–Ω–µ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —ç–∫—Ä–∞–Ω–Ω—ã–µ
        if (windowType == WindowType.TOP || windowType == WindowType.BOTTOM) {
            val screenArea = transformAreaForClick(windowType, area)
            Log.d(TAG, "–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –∫–ª–∏–∫–∞ –≤ $windowType: ${area.rect} ‚Üí ${screenArea.rect}")
            return screenArea
        }
        
        return area
    }
    
    /**
     * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è –∫–ª–∏–∫–æ–≤ –≤ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω–æ–º —ç–∫—Ä–∞–Ω–µ
     */
    private fun transformAreaForClick(windowType: WindowType, area: ScreenArea): ScreenArea {
        when (windowType) {
            WindowType.TOP -> {
                // TOP –æ–∫–Ω–æ: –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π (0-929)
                return area
            }
            WindowType.BOTTOM -> {
                // BOTTOM –æ–∫–Ω–æ: –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —É–∂–µ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ, –Ω–µ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏—Ö
                // getAbsoluteCoordinates —Ç–µ–ø–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                return area
            }
            else -> return area
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞ (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û: –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏)
     */
    fun getAreasForWindow(windowType: WindowType): Map<AreaType, ScreenArea> {
        ensureInitialized() // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        return when (windowType) {
            WindowType.LEFT -> leftWindowAreas
            WindowType.RIGHT -> rightWindowAreas
            WindowType.TOP -> topWindowAreas
            WindowType.BOTTOM -> bottomWindowAreas
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–±–ª–∞—Å—Ç–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞
     */
    private fun loadAreasForWindow(windowType: WindowType) {
        val areas = preferencesManager.loadAreasForWindow(windowType)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –º–∏–≥—Ä–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (–µ—Å–ª–∏ –æ–±–ª–∞—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ø–æ —Å—Ç–∞—Ä–æ–º—É –ø—Ä–∏–Ω—Ü–∏–ø—É)
        val migratedAreas = migrateAreasIfNeeded(windowType, areas)
        
        when (windowType) {
            WindowType.LEFT -> leftWindowAreas = migratedAreas
            WindowType.RIGHT -> rightWindowAreas = migratedAreas
            WindowType.TOP -> topWindowAreas = migratedAreas
            WindowType.BOTTOM -> bottomWindowAreas = migratedAreas
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–ª–∞—Å—Ç–∏, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ —Å—Ç–∞—Ä–æ–º—É –ø—Ä–∏–Ω—Ü–∏–ø—É (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞)
     * –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–≤—ã–º –ø—Ä–∏–Ω—Ü–∏–ø–æ–º (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≥—Ä–∞–Ω–∏—Ü –æ–∫–Ω–∞)
     */
    private fun migrateAreasIfNeeded(windowType: WindowType, areas: Map<AreaType, ScreenArea>): Map<AreaType, ScreenArea> {
        if (areas.isEmpty()) return areas
        
        val windowBounds = when (windowType) {
            WindowType.LEFT -> leftWindowBounds
            WindowType.RIGHT -> rightWindowBounds
            WindowType.TOP -> SplitScreenUtils.getWindowBounds(context, WindowType.TOP)
            WindowType.BOTTOM -> SplitScreenUtils.getWindowBounds(context, WindowType.BOTTOM)
        }
        
        val migratedAreas = mutableMapOf<AreaType, ScreenArea>()
        var needsMigration = false
        
        areas.forEach { (areaType, screenArea) ->
            if (screenArea.adaptive != null) {
                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ adaptive –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞)
                val oldAbsoluteRect = CoordinateUtils.convertFromAdaptiveCoordinates(screenArea.adaptive, context)
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –æ–±–ª–∞—Å—Ç—å –≤ –≥—Ä–∞–Ω–∏—Ü–∞—Ö —ç—Ç–æ–≥–æ –æ–∫–Ω–∞
                val isInWindow = windowBounds.contains(oldAbsoluteRect.centerX(), oldAbsoluteRect.centerY())
                
                if (isInWindow) {
                    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ adaptive –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≥—Ä–∞–Ω–∏—Ü –æ–∫–Ω–∞
                    val newAdaptive = CoordinateUtils.convertToAdaptiveCoordinates(oldAbsoluteRect, windowBounds)
                    val migratedArea = screenArea.copy(
                        rect = oldAbsoluteRect,
                        adaptive = newAdaptive
                    )
                    migratedAreas[areaType] = migratedArea
                    
                    if (newAdaptive != screenArea.adaptive) {
                        needsMigration = true
                        Log.d(TAG, "–ú–∏–≥—Ä–∞—Ü–∏—è $areaType –¥–ª—è $windowType: —Å—Ç–∞—Ä—ã–π adaptive=${screenArea.adaptive}, –Ω–æ–≤—ã–π=$newAdaptive")
                    }
                } else {
                    // –û–±–ª–∞—Å—Ç—å –Ω–µ –≤ —ç—Ç–æ–º –æ–∫–Ω–µ, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                    migratedAreas[areaType] = screenArea
                }
            } else {
                // –ù–µ—Ç adaptive –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                migratedAreas[areaType] = screenArea
            }
        }
        
        // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –º–∏–≥—Ä–∞—Ü–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        if (needsMigration) {
            Log.d(TAG, "–°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è $windowType")
            preferencesManager.saveAreasForWindow(windowType, migratedAreas)
            
            // üöÄ –ò–ù–í–ê–õ–ò–î–ò–†–£–ï–ú –ö–≠–® –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏
            areasLoaded = false
            lastLoadTime = 0L
        }
        
        return migratedAreas
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±–ª–∞—Å—Ç—å –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞
     */
    fun saveAreaForWindow(windowType: WindowType, areaType: AreaType, area: ScreenArea) {
        Log.d(TAG, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ $areaType –¥–ª—è –æ–∫–Ω–∞ $windowType: ${area.rect}")
        
        val currentAreas = getAreasForWindow(windowType).toMutableMap()
        currentAreas[areaType] = area
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
        when (windowType) {
            WindowType.LEFT -> leftWindowAreas = currentAreas
            WindowType.RIGHT -> rightWindowAreas = currentAreas
            WindowType.TOP -> topWindowAreas = currentAreas
            WindowType.BOTTOM -> bottomWindowAreas = currentAreas
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–∏–ø–æ–º –æ–∫–Ω–∞
        preferencesManager.saveAreasForWindow(windowType, currentAreas)
        
        // üöÄ –ò–ù–í–ê–õ–ò–î–ò–†–£–ï–ú –ö–≠–® –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        areasLoaded = false
        lastLoadTime = 0L
        Log.d(TAG, "üîÑ –ö—ç—à –æ–±–ª–∞—Å—Ç–µ–π –∏–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±–ª–∞—Å—Ç–∏ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –æ–∫–Ω–µ
     */
    fun getActiveAbsoluteCoordinates(areaType: AreaType): Rect? {
        return getAbsoluteCoordinates(currentActiveWindow, areaType)
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±–ª–∞—Å—Ç–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –æ–∫–Ω–µ
     */
    fun getAbsoluteCoordinates(windowType: WindowType, areaType: AreaType): Rect? {
        val area = getAreaForWindow(windowType, areaType) ?: return null
        
        Log.d(TAG, "üîç getAbsoluteCoordinates –¥–ª—è $windowType.$areaType:")
        Log.d(TAG, "   üìÑ area.rect = ${area.rect}")
        Log.d(TAG, "   üîÑ area.adaptive = ${area.adaptive}")
        
        val windowBounds = when (windowType) {
            WindowType.LEFT -> leftWindowBounds
            WindowType.RIGHT -> rightWindowBounds
            WindowType.TOP -> SplitScreenUtils.getWindowBounds(context, WindowType.TOP)
            WindowType.BOTTOM -> SplitScreenUtils.getWindowBounds(context, WindowType.BOTTOM)
        }
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å adaptive –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö —Å —É—á–µ—Ç–æ–º –≥—Ä–∞–Ω–∏—Ü –æ–∫–Ω–∞
        val rect = if (area.adaptive != null) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ —Å –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ –æ–∫–Ω–∞
            Log.d(TAG, "üîÑ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ adaptive –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è $areaType –≤ –æ–∫–Ω–µ $windowType")
            Log.d(TAG, "   üéØ windowBounds = $windowBounds")
            Log.d(TAG, "   üîÑ adaptive = ${area.adaptive}")
            val converted = CoordinateUtils.convertFromAdaptiveCoordinates(area.adaptive, windowBounds)
            Log.d(TAG, "   üìç converted = $converted")
            converted
        } else {
            // –û–±—ã—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —É–∂–µ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ, –Ω–µ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏—Ö
            Log.d(TAG, "‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è $areaType –≤ –æ–∫–Ω–µ $windowType")
            Log.d(TAG, "   üìç rect = ${area.rect}")
            area.rect
        }
        
        Log.d(TAG, "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã $areaType –¥–ª—è –æ–∫–Ω–∞ $windowType: –æ–∫–Ω–æ=$windowBounds, –æ–±–ª–∞—Å—Ç—å=$rect")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –µ—Å–ª–∏ –æ–Ω–∏ –≤—ã—Ö–æ–¥—è—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —ç–∫—Ä–∞–Ω–∞
        // –ù–û: –¥–ª—è BOTTOM –æ–∫–Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –≤—ã—Å–æ—Ç—ã —ç–∫—Ä–∞–Ω–∞ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è split screen
        if (!CoordinateUtils.validateCoordinates(rect, context) && windowType != WindowType.BOTTOM) {
            Log.w(TAG, "‚ö†Ô∏è –û–±–ª–∞—Å—Ç—å $areaType –¥–ª—è –æ–∫–Ω–∞ $windowType –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —ç–∫—Ä–∞–Ω–∞: $rect")
            Log.d(TAG, "–ü—Ä–∏–º–µ–Ω—è–µ–º –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è $windowType.$areaType")
            val correctedRect = CoordinateUtils.correctCoordinates(rect, context)
            Log.d(TAG, "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: $correctedRect")
            return correctedRect
        } else if (windowType == WindowType.BOTTOM && !CoordinateUtils.validateCoordinates(rect, context)) {
            Log.d(TAG, "üîß –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã $areaType –¥–ª—è BOTTOM –æ–∫–Ω–∞ –≤—ã—Ö–æ–¥—è—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —ç–∫—Ä–∞–Ω–∞, –Ω–æ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è split screen: $rect")
        }
        
        return rect
    }    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ª–∏ –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è –æ–∫–Ω–∞
     */
    fun isWindowConfigured(windowType: WindowType): Boolean {
        ensureInitialized()
        val areas = getAreasForWindow(windowType)
        val requiredAreas = listOf(
            AreaType.DICE_AREA,
            AreaType.RED_BUTTON,
            AreaType.ORANGE_BUTTON,
            AreaType.CONFIRM_BET,
            AreaType.BET_10
        )
        
        val configured = requiredAreas.all { areas.containsKey(it) }
        Log.d(TAG, "–û–∫–Ω–æ $windowType –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: $configured (${areas.size} –æ–±–ª–∞—Å—Ç–µ–π)")
        
        return configured
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≥–æ—Ç–æ–≤—ã –ª–∏ –æ–±–∞ –æ–∫–Ω–∞ –∫ —Ä–∞–±–æ—Ç–µ
     */
    fun areBothWindowsConfigured(): Boolean {
        val leftConfigured = isWindowConfigured(WindowType.LEFT)
        val rightConfigured = isWindowConfigured(WindowType.RIGHT)
        val result = leftConfigured && rightConfigured
        
        Log.d(TAG, "–û–±–∞ –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã: $result (–ª–µ–≤–æ–µ: $leftConfigured, –ø—Ä–∞–≤–æ–µ: $rightConfigured)")
        return result
    }
    
    /**
     * –ö–æ–ø–∏—Ä—É–µ—Ç –æ–±–ª–∞—Å—Ç–∏ –∏–∑ –æ–¥–Ω–æ–≥–æ –æ–∫–Ω–∞ –≤ –¥—Ä—É–≥–æ–µ
     */
    fun copyAreasToWindow(fromWindow: WindowType, toWindow: WindowType) {
        Log.d(TAG, "–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–µ–π –∏–∑ $fromWindow –≤ $toWindow")
        
        val sourceAreas = getAreasForWindow(fromWindow)
        if (sourceAreas.isEmpty()) {
            Log.w(TAG, "–ù–µ—Ç –æ–±–ª–∞—Å—Ç–µ–π –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –æ–∫–Ω–µ $fromWindow")
            return
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —Ü–µ–ª–µ–≤–æ–≥–æ –æ–∫–Ω–∞
        val targetBounds = when (toWindow) {
            WindowType.LEFT -> leftWindowBounds
            WindowType.RIGHT -> rightWindowBounds
            WindowType.TOP -> leftWindowBounds    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –ª–µ–≤–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –≤–µ—Ä—Ö–Ω–µ–≥–æ
            WindowType.BOTTOM -> rightWindowBounds // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∞–≤–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –Ω–∏–∂–Ω–µ–≥–æ
        }
        
        val sourceBounds = when (fromWindow) {
            WindowType.LEFT -> leftWindowBounds
            WindowType.RIGHT -> rightWindowBounds
            WindowType.TOP -> leftWindowBounds    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –ª–µ–≤–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –≤–µ—Ä—Ö–Ω–µ–≥–æ
            WindowType.BOTTOM -> rightWindowBounds // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∞–≤–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –Ω–∏–∂–Ω–µ–≥–æ
        }
        
        // –ö–æ–ø–∏—Ä—É–µ–º –∏ –∞–¥–∞–ø—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        val adaptedAreas = mutableMapOf<AreaType, ScreenArea>()
        
        sourceAreas.forEach { (areaType, sourceArea) ->
            // –ï—Å–ª–∏ –µ—Å—Ç—å adaptive –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö (–æ–Ω–∏ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
            val adaptedArea = if (sourceArea.adaptive != null) {
                sourceArea.copy(
                    rect = CoordinateUtils.convertFromAdaptiveCoordinates(sourceArea.adaptive, context),
                    adaptive = sourceArea.adaptive
                )
            } else {
                // –ò–Ω–∞—á–µ —Å–æ–∑–¥–∞–µ–º adaptive –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                val adaptive = CoordinateUtils.convertToAdaptiveCoordinates(sourceArea.rect, context)
                sourceArea.copy(
                    rect = CoordinateUtils.convertFromAdaptiveCoordinates(adaptive, context),
                    adaptive = adaptive
                )
            }
            
            adaptedAreas[areaType] = adaptedArea
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏
        when (toWindow) {
            WindowType.LEFT -> leftWindowAreas = adaptedAreas
            WindowType.RIGHT -> rightWindowAreas = adaptedAreas
            WindowType.TOP -> leftWindowAreas = adaptedAreas    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–µ–≤—ã–µ –æ–±–ª–∞—Å—Ç–∏
            WindowType.BOTTOM -> rightWindowAreas = adaptedAreas // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø—Ä–∞–≤—ã–µ –æ–±–ª–∞—Å—Ç–∏
        }
        
        // –î–ª—è TOP/BOTTOM –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ LEFT/RIGHT –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        val actualWindowType = when (toWindow) {
            WindowType.TOP -> WindowType.LEFT
            WindowType.BOTTOM -> WindowType.RIGHT
            else -> toWindow
        }
        preferencesManager.saveAreasForWindow(actualWindowType, adaptedAreas)
        Log.d(TAG, "–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ ${adaptedAreas.size} –æ–±–ª–∞—Å—Ç–µ–π")
        
        // üöÄ –ò–ù–í–ê–õ–ò–î–ò–†–£–ï–ú –ö–≠–® –ø–æ—Å–ª–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        areasLoaded = false
        lastLoadTime = 0L
    }
    
    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±–ª–∞—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    fun autoConfigureAreas() {
        Log.d(TAG, "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–ª–∞—Å—Ç–µ–π")
        
        if (!SplitScreenUtils.isSplitScreenSupported(context)) {
            Log.w(TAG, "–†–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
            return
        }
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –æ–∫–Ω–∞, –∫–æ–ø–∏—Ä—É–µ–º –≤ –¥—Ä—É–≥–æ–µ
        when {
            isWindowConfigured(WindowType.LEFT) && !isWindowConfigured(WindowType.RIGHT) -> {
                Log.d(TAG, "–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –ª–µ–≤–æ–≥–æ –æ–∫–Ω–∞ –≤ –ø—Ä–∞–≤–æ–µ")
                copyAreasToWindow(WindowType.LEFT, WindowType.RIGHT)
            }
            isWindowConfigured(WindowType.RIGHT) && !isWindowConfigured(WindowType.LEFT) -> {
                Log.d(TAG, "–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –ø—Ä–∞–≤–æ–≥–æ –æ–∫–Ω–∞ –≤ –ª–µ–≤–æ–µ")
                copyAreasToWindow(WindowType.RIGHT, WindowType.LEFT)
            }
            !isWindowConfigured(WindowType.LEFT) && !isWindowConfigured(WindowType.RIGHT) -> {
                Log.w(TAG, "–ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π –¥–ª—è –∞–≤—Ç–æ–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            }
            else -> {
                Log.d(TAG, "–û–±–∞ –æ–∫–Ω–∞ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            }
        }
    }
    
    /**
     * –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ë–ï–ó –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±–ª–∞—Å—Ç–µ–π
     */
    fun isConfigurationReady(): Boolean {
        val dualModeSettings = preferencesManager.getDualModeSettings()
        val splitScreenType = dualModeSettings.splitScreenType
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –æ–∫–Ω–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        val (firstWindowType, secondWindowType) = when (splitScreenType) {
            SplitScreenType.HORIZONTAL -> Pair(WindowType.LEFT, WindowType.RIGHT)
            SplitScreenType.VERTICAL -> Pair(WindowType.TOP, WindowType.BOTTOM)
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±–ª–∞—Å—Ç–µ–π –ë–ï–ó –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        val firstAreasCount = preferencesManager.loadAreasForWindow(firstWindowType).size
        val secondAreasCount = preferencesManager.loadAreasForWindow(secondWindowType).size
        
        val isReady = firstAreasCount > 0 && secondAreasCount > 0
        
        Log.d(TAG, "–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ ($splitScreenType): $firstWindowType=$firstAreasCount –æ–±–ª–∞—Å—Ç–µ–π, $secondWindowType=$secondAreasCount –æ–±–ª–∞—Å—Ç–µ–π, –≥–æ—Ç–æ–≤–æ=$isReady")
        
        return isReady
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫–æ–Ω
     */
    fun getConfigurationStatus(): WindowConfigurationStatus {
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞
        val dualModeSettings = preferencesManager.getDualModeSettings()
        val splitScreenType = dualModeSettings.splitScreenType
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –æ–∫–Ω–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        val (firstWindowType, secondWindowType) = when (splitScreenType) {
            SplitScreenType.HORIZONTAL -> Pair(WindowType.LEFT, WindowType.RIGHT)
            SplitScreenType.VERTICAL -> Pair(WindowType.TOP, WindowType.BOTTOM)
        }
        
        val firstWindowConfigured = isWindowConfigured(firstWindowType)
        val secondWindowConfigured = isWindowConfigured(secondWindowType)
        val firstAreasCount = getAreasForWindow(firstWindowType).size
        val secondAreasCount = getAreasForWindow(secondWindowType).size
        
        Log.d(TAG, "–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ($splitScreenType): $firstWindowType=$firstWindowConfigured ($firstAreasCount –æ–±–ª–∞—Å—Ç–µ–π), $secondWindowType=$secondWindowConfigured ($secondAreasCount –æ–±–ª–∞—Å—Ç–µ–π)")
        
        return WindowConfigurationStatus(
            leftWindowConfigured = firstWindowConfigured,
            rightWindowConfigured = secondWindowConfigured,
            leftAreasCount = firstAreasCount,
            rightAreasCount = secondAreasCount,
            splitScreenSupported = SplitScreenUtils.isSplitScreenSupported(context),
            currentActiveWindow = currentActiveWindow,
            splitScreenType = splitScreenType,
            firstWindowType = firstWindowType,
            secondWindowType = secondWindowType
        )
    }
    
    /**
     * –°—Ç–∞—Ç—É—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫–æ–Ω
     */
    data class WindowConfigurationStatus(
        val leftWindowConfigured: Boolean,
        val rightWindowConfigured: Boolean,
        val leftAreasCount: Int,
        val rightAreasCount: Int,
        val splitScreenSupported: Boolean,
        val currentActiveWindow: WindowType,
        val splitScreenType: SplitScreenType,
        val firstWindowType: WindowType,
        val secondWindowType: WindowType
    ) {
        val bothWindowsReady: Boolean
            get() = leftWindowConfigured && rightWindowConfigured
        
        val readyForDualMode: Boolean
            get() = bothWindowsReady && splitScreenSupported
    }
    
    /**
     * –û—á–∏—â–∞–µ—Ç –∫—ç—à –æ–±–ª–∞—Å—Ç–µ–π, –∑–∞—Å—Ç–∞–≤–ª—è—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Ö –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    fun invalidateAreas() {
        leftWindowAreas = emptyMap()
        rightWindowAreas = emptyMap()
        topWindowAreas = emptyMap()
        bottomWindowAreas = emptyMap()
        Log.d(TAG, "üîÑ –ö—ç—à –æ–±–ª–∞—Å—Ç–µ–π –æ—á–∏—â–µ–Ω, –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞")
    }
    
    /**
     * –†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–ª–∞—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å —Ç–æ—á–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
     * –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ–±–æ–π—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü
     */
    fun setManualResultArea(windowType: WindowType, left: Int, top: Int, right: Int, bottom: Int) {
        Log.d(TAG, "üîß –†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–ª–∞—Å—Ç–∏ RESULT –¥–ª—è –æ–∫–Ω–∞ $windowType: [$left, $top, $right, $bottom]")
        
        val manualArea = ScreenArea(
            name = "manual_result",
            rect = Rect(left, top, right, bottom)
        )
        
        saveAreaForWindow(windowType, AreaType.BET_RESULT, manualArea)
        Log.d(TAG, "‚úÖ –û–±–ª–∞—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—Ä—É—á–Ω—É—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
    }
    
    /**
     * –°–±—Ä–æ—Å –æ–±–ª–∞—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é
     */
    fun resetResultAreaToAuto(windowType: WindowType) {
        Log.d(TAG, "üîÑ –°–±—Ä–æ—Å –æ–±–ª–∞—Å—Ç–∏ RESULT –¥–ª—è –æ–∫–Ω–∞ $windowType –∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é")
        
        // –£–¥–∞–ª—è–µ–º —Ä—É—á–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π
        val currentAreas = getAreasForWindow(windowType).toMutableMap()
        currentAreas.remove(AreaType.BET_RESULT)
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
        when (windowType) {
            WindowType.LEFT -> leftWindowAreas = currentAreas
            WindowType.RIGHT -> rightWindowAreas = currentAreas
            WindowType.TOP -> topWindowAreas = currentAreas
            WindowType.BOTTOM -> bottomWindowAreas = currentAreas
        }
        
        preferencesManager.saveAreasForWindow(windowType, currentAreas)
        Log.d(TAG, "‚úÖ –û–±–ª–∞—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–±—Ä–æ—à–µ–Ω–∞, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ")
        
        // üöÄ –ò–ù–í–ê–õ–ò–î–ò–†–£–ï–ú –ö–≠–® –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞
        areasLoaded = false
        lastLoadTime = 0L
    }
}
