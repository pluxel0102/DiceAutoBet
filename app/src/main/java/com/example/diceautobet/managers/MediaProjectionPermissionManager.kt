package com.example.diceautobet.managers

import android.app.Activity
import android.content.Context
import android.content.Intent
import android.media.projection.MediaProjection
import android.media.projection.MediaProjectionManager
import android.os.Build
import android.util.Log
import com.example.diceautobet.utils.PreferencesManager

/**
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π MediaProjection.
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –∏ –µ–≥–æ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ.
 */
class MediaProjectionPermissionManager private constructor(
    private val context: Context
) {
    
    companion object {
        private const val TAG = "MediaProjectionPermissionManager"
        
        @Volatile
        private var INSTANCE: MediaProjectionPermissionManager? = null
        
        fun getInstance(context: Context): MediaProjectionPermissionManager {
            return INSTANCE ?: synchronized(this) {
                INSTANCE ?: MediaProjectionPermissionManager(context.applicationContext).also { INSTANCE = it }
            }
        }
    }
    
    private val projectionManager: MediaProjectionManager by lazy {
        context.getSystemService(Context.MEDIA_PROJECTION_SERVICE) as MediaProjectionManager
    }
    
    private val preferencesManager: PreferencesManager by lazy {
        PreferencesManager(context)
    }
    
    // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
    private var cachedMediaProjection: MediaProjection? = null
    private var cachedResultCode: Int? = null
    private var cachedData: Intent? = null
    
    init {
        // –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        cleanupInvalidPermissions()
    }
    
    /**
     * –û—á–∏—â–∞–µ—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
     */
    private fun cleanupInvalidPermissions() {
        Log.d(TAG, "üßπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—á–∏—Å—Ç–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ...")
        
        val resultCode = context.getSharedPreferences("DiceAutoBetPrefs", Context.MODE_PRIVATE)
            .getInt("media_projection_result_code", -1)
        
        if (resultCode != Activity.RESULT_OK) {
            Log.w(TAG, "üóëÔ∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π resultCode=$resultCode, –æ—á–∏—â–∞–µ–º...")
            
            // –û—á–∏—â–∞–µ–º –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            cachedMediaProjection = null
            cachedResultCode = null  
            cachedData = null
            preferencesManager.clearMediaProjectionPermission()
            com.example.diceautobet.utils.MediaProjectionTokenStore.clear()
            
            Log.d(TAG, "‚úÖ –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ")
        } else {
            Log.d(TAG, "‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π resultCode –≤–∞–ª–∏–¥–µ–Ω ($resultCode)")
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
     */
    fun hasPermission(): Boolean {
        val hasStoredPermission = preferencesManager.hasMediaProjectionPermission()
        val hasCachedData = cachedResultCode != null && cachedData != null
        val hasCachedMediaProjection = cachedMediaProjection != null
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        val tokenStoreHasData = com.example.diceautobet.utils.MediaProjectionTokenStore.get() != null
        val prefsResultCode = context.getSharedPreferences("DiceAutoBetPrefs", Context.MODE_PRIVATE)
            .getInt("media_projection_result_code", -1)
        val prefsAvailable = context.getSharedPreferences("DiceAutoBetPrefs", Context.MODE_PRIVATE)
            .getBoolean("media_projection_available", false)
        
        Log.d(TAG, "üìã –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è:")
        Log.d(TAG, "   üìÅ –í PreferencesManager: $hasStoredPermission")
        Log.d(TAG, "   üíæ –î–∞–Ω–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤ –∫—ç—à–µ: $hasCachedData")
        Log.d(TAG, "   üéØ MediaProjection –≤ –∫—ç—à–µ: $hasCachedMediaProjection")
        Log.d(TAG, "   üî¢ cachedResultCode: $cachedResultCode")
        Log.d(TAG, "   üìÑ cachedData: ${cachedData != null}")
        Log.d(TAG, "   üóÉÔ∏è TokenStore –∏–º–µ–µ—Ç –¥–∞–Ω–Ω—ã–µ: $tokenStoreHasData")
        Log.d(TAG, "   üìä Prefs result_code: $prefsResultCode")
        Log.d(TAG, "   üìä Prefs available: $prefsAvailable")
        Log.d(TAG, "   ü§ñ Android –≤–µ—Ä—Å–∏—è: ${Build.VERSION.RELEASE} (API ${Build.VERSION.SDK_INT})")
        
        // –ù–∞ Android 15+ –º–æ–≥—É—Ç –±—ã—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        if (Build.VERSION.SDK_INT >= 35) { // Android 15 = API 35
            Log.d(TAG, "   ‚ö†Ô∏è Android 15+ –æ–±–Ω–∞—Ä—É–∂–µ–Ω - –≤–æ–∑–º–æ–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è MediaProjection")
        }
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: 
        // –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:
        // 1. –ï—Å—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–≤ –ø–∞–º—è—Ç–∏) –° –í–ê–õ–ò–î–ù–´–ú resultCode –ò–õ–ò
        // 2. –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π MediaProjection –ò–õ–ò 
        // 3. –ï—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ PreferencesManager –ò –≤ TokenStore –° –í–ê–õ–ò–î–ù–´–ú resultCode
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –æ–Ω–∏ –≤–∞–ª–∏–¥–Ω—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ resultCode == RESULT_OK
        val hasValidCachedData = (hasCachedData && cachedResultCode == Activity.RESULT_OK) || hasCachedMediaProjection
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –æ–Ω–∏ –≤–∞–ª–∏–¥–Ω—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ resultCode == RESULT_OK
        val hasValidStoredData = hasStoredPermission && tokenStoreHasData && (prefsResultCode == Activity.RESULT_OK)
        
        val result = hasValidCachedData || hasValidStoredData
        
        Log.d(TAG, "üîß –î–µ—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞:")
        Log.d(TAG, "   üéØ –í–∞–ª–∏–¥–Ω—ã–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: $hasValidCachedData (cachedResultCode=$cachedResultCode, –Ω—É–∂–µ–Ω ${Activity.RESULT_OK})")
        Log.d(TAG, "   üìÅ –í–∞–ª–∏–¥–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: $hasValidStoredData (prefsResultCode=$prefsResultCode, –Ω—É–∂–µ–Ω ${Activity.RESULT_OK})") 
        Log.d(TAG, "‚úÖ –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç hasPermission(): $result")
        
        return result
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç Intent –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
     */
    fun createScreenCaptureIntent(): Intent {
        Log.d(TAG, "–°–æ–∑–¥–∞–Ω–∏–µ Intent –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∑–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞")
        return projectionManager.createScreenCaptureIntent()
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
     */
    fun savePermission(resultCode: Int, data: Intent) {
        Log.d(TAG, "üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è MediaProjection (resultCode=$resultCode)")
        Log.d(TAG, "ü§ñ Android –≤–µ—Ä—Å–∏—è: ${Build.VERSION.RELEASE} (API ${Build.VERSION.SDK_INT})")
        Log.d(TAG, "üîç –ê–Ω–∞–ª–∏–∑ resultCode: RESULT_OK=${Activity.RESULT_OK}, RESULT_CANCELED=${Activity.RESULT_CANCELED}")
        
        // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        if (resultCode != Activity.RESULT_OK) {
            Log.e(TAG, "‚ùå –û–¢–ö–õ–û–ù–ï–ù–ò–ï –°–û–•–†–ê–ù–ï–ù–ò–Ø: resultCode=$resultCode (–Ω–µ —Ä–∞–≤–µ–Ω RESULT_OK=${Activity.RESULT_OK})")
            Log.e(TAG, "üßπ –û—á–∏—â–∞–µ–º –≤—Å–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...")
            
            // –û—á–∏—â–∞–µ–º –∫—ç—à –ø—Ä–∏ –Ω–µ—É—Å–ø–µ—à–Ω–æ–º resultCode
            cachedMediaProjection = null
            cachedResultCode = null
            cachedData = null
            
            // –í–ê–ñ–ù–û: –û—á–∏—â–∞–µ–º TokenStore –ø—Ä–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–º resultCode
            com.example.diceautobet.utils.MediaProjectionTokenStore.clear()
            Log.d(TAG, "üóÉÔ∏è TokenStore –æ—á–∏—â–µ–Ω")
            
            // –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            preferencesManager.clearMediaProjectionPermission()
            
            Log.w(TAG, "‚ö†Ô∏è –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ù–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏–∑-–∑–∞ –Ω–µ—É—Å–ø–µ—à–Ω–æ–≥–æ resultCode")
            return
        }
        
        try {
            Log.d(TAG, "‚úÖ ResultCode –≤–∞–ª–∏–¥–µ–Ω (${Activity.RESULT_OK}), –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...")
            
            // –í–ù–ò–ú–ê–ù–ò–ï: –ù–ï —Å–æ–∑–¥–∞–µ–º MediaProjection –∑–¥–µ—Å—å!
            // MediaProjection –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –¢–û–õ–¨–ö–û –≤–Ω—É—Ç—Ä–∏ foreground service
            Log.d(TAG, "üìã –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ë–ï–ó —Å–æ–∑–¥–∞–Ω–∏—è MediaProjection")
            Log.d(TAG, "‚ö†Ô∏è MediaProjection –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø–æ–∑–∂–µ –≤–Ω—É—Ç—Ä–∏ foreground service")
            
            // –ö—ç—à–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è (MediaProjection —Å–æ–∑–¥–∞—Å—Ç—Å—è –≤ foreground service)
            cachedResultCode = resultCode
            cachedData = data
            cachedMediaProjection = null // –ù–ï —Å–æ–∑–¥–∞–µ–º –∑–¥–µ—Å—å!
            
            Log.d(TAG, "üìã –î–∞–Ω–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã: resultCode=$resultCode, data=${data != null}")
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            preferencesManager.saveMediaProjectionPermission(resultCode, data)
            Log.d(TAG, "üìÅ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ PreferencesManager")
            
            // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –¥–ª—è –≤—Å–µ—Ö –≤–µ—Ä—Å–∏–π Android
            Log.d(TAG, "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–ª—è Android ${Build.VERSION.SDK_INT}...")
            val verificationData = preferencesManager.getMediaProjectionPermission()
            val verificationHasPermission = preferencesManager.hasMediaProjectionPermission()
            Log.d(TAG, "‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: data=${verificationData != null}, hasPermission=$verificationHasPermission")
            
            // –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –≤–µ—Ä—Å–∏–π Android
            Log.d(TAG, "‚ö†Ô∏è MediaProjection –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ foreground service")
            
            Log.d(TAG, "‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ MediaProjection —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ (MediaProjection –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ foreground service)")
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ hasPermission —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true
            val hasPermissionNow = hasPermission()
            Log.d(TAG, "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: hasPermission=$hasPermissionNow")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è MediaProjection", e)
            // –û—á–∏—â–∞–µ–º –∫—ç—à –ø—Ä–∏ –æ—à–∏–±–∫–µ
            cachedMediaProjection = null
            cachedResultCode = null
            cachedData = null
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç MediaProjection –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    fun getMediaProjection(): MediaProjection? {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π MediaProjection
        if (cachedMediaProjection != null) {
            Log.d(TAG, "üéØ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π MediaProjection")
            return cachedMediaProjection
        }
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è, —Å–æ–∑–¥–∞–µ–º MediaProjection
        if (cachedResultCode != null && cachedData != null) {
            Log.d(TAG, "üîÑ –°–æ–∑–¥–∞–µ–º MediaProjection –∏–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è")
            return try {
                val mediaProjection = projectionManager.getMediaProjection(cachedResultCode!!, cachedData!!)
                if (mediaProjection != null) {
                    cachedMediaProjection = mediaProjection
                    Log.d(TAG, "‚úÖ MediaProjection —Å–æ–∑–¥–∞–Ω –∏ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è")
                } else {
                    Log.w(TAG, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å MediaProjection –∏–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö - –≤–æ–∑–º–æ–∂–Ω–æ, —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∏—Å—Ç–µ–∫–ª–æ")
                    clearPermission()
                }
                mediaProjection
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ MediaProjection –∏–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", e)
                clearPermission()
                null
            }
        }
        
        // –ó–∞—Ç–µ–º –ø—Ä–æ–±—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        return try {
            val storedData = preferencesManager.getMediaProjectionPermission()
            if (storedData != null) {
                Log.d(TAG, "üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º MediaProjection –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫")
                val (resultCode, intent) = storedData
                val mediaProjection = projectionManager.getMediaProjection(resultCode, intent)
                
                if (mediaProjection != null) {
                    // –ö—ç—à–∏—Ä—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    cachedMediaProjection = mediaProjection
                    cachedResultCode = resultCode
                    cachedData = intent
                    
                    Log.d(TAG, "‚úÖ MediaProjection —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                } else {
                    Log.w(TAG, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å MediaProjection - –≤–æ–∑–º–æ–∂–Ω–æ, —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∏—Å—Ç–µ–∫–ª–æ")
                    clearPermission()
                }
                
                mediaProjection
            } else {
                Log.d(TAG, "‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö MediaProjection")
                null
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ MediaProjection", e)
            clearPermission()
            null
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ resultCode –∏ Intent –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ MediaProjection
     */
    fun getPermissionData(): Pair<Int, Intent>? {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if (cachedResultCode != null && cachedData != null) {
            Log.d(TAG, "üéØ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è")
            return Pair(cachedResultCode!!, cachedData!!)
        }
        
        // –ó–∞—Ç–µ–º –ø—Ä–æ–±—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        return try {
            val storedData = preferencesManager.getMediaProjectionPermission()
            if (storedData != null) {
                Log.d(TAG, "üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è")
                val (resultCode, intent) = storedData
                // –ö—ç—à–∏—Ä—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                cachedResultCode = resultCode
                cachedData = intent
                storedData
            } else {
                Log.d(TAG, "‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è")
                null
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è", e)
            null
        }
    }
    
    /**
     * –û—á–∏—â–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ (–ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –∏–ª–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏)
     */
    fun clearPermission() {
        Log.d(TAG, "üßπ –û—á–∏—Å—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è MediaProjection")
        
        try {
            cachedMediaProjection?.stop()
        } catch (e: Exception) {
            Log.w(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ MediaProjection", e)
        }
        
        cachedMediaProjection = null
        cachedResultCode = null
        cachedData = null
        
        preferencesManager.clearMediaProjectionPermission()
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–∑–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ Android 15+)
     */
    fun shouldRerequestPermission(): Boolean {
        return if (Build.VERSION.SDK_INT >= 35) { // Android 15+
            // –ù–∞ Android 15+ MediaProjection –º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            // —á–µ—Ä–µ–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            Log.d(TAG, "üîÑ Android 15+ –æ–±–Ω–∞—Ä—É–∂–µ–Ω - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è")
            true
        } else {
            false
        }
    }
    
    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –∫—ç—à–µ–º –∏ PreferencesManager
     */
    fun forceSynchronization(): Boolean {
        Log.d(TAG, "üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π")
        
        val hasCachedData = cachedResultCode != null && cachedData != null
        val hasStoredPermission = preferencesManager.hasMediaProjectionPermission()
        
        Log.d(TAG, "   üíæ –î–∞–Ω–Ω—ã–µ –≤ –∫—ç—à–µ: $hasCachedData (resultCode: $cachedResultCode)")
        Log.d(TAG, "   üìÅ –î–∞–Ω–Ω—ã–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö: $hasStoredPermission")
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –Ω–æ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö - –ø–µ—Ä–µ—Å–æ—Ö—Ä–∞–Ω—è–µ–º
        if (hasCachedData && !hasStoredPermission && cachedResultCode != null && cachedData != null) {
            Log.d(TAG, "üîß –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è - –ø–µ—Ä–µ—Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ")
            try {
                preferencesManager.saveMediaProjectionPermission(cachedResultCode!!, cachedData!!)
                val newHasStoredPermission = preferencesManager.hasMediaProjectionPermission()
                Log.d(TAG, "‚úÖ –ü–µ—Ä–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: $newHasStoredPermission")
                return newHasStoredPermission
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏", e)
                return false
            }
        }
        
        Log.d(TAG, "‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return hasStoredPermission || hasCachedData
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
     */
    fun validatePermission(): Boolean {
        return try {
            val mediaProjection = getMediaProjection()
            if (mediaProjection == null) {
                Log.w(TAG, "‚ö†Ô∏è MediaProjection –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ")
                clearPermission()
                return false
            }
            
            // –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –¥–∏—Å–ø–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
            try {
                val testDisplay = mediaProjection.createVirtualDisplay(
                    "ValidationTest",
                    1, 1, 1,
                    0, // –§–ª–∞–≥–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    null,
                    null,
                    null
                )
                testDisplay?.release() // –°—Ä–∞–∑—É –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º
                Log.d(TAG, "‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ MediaProjection –≤–∞–ª–∏–¥–Ω–æ")
                return true
            } catch (e: SecurityException) {
                if (e.message?.contains("Invalid media projection") == true) {
                    Log.w(TAG, "‚ö†Ô∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ (Invalid media projection), –æ—á–∏—â–∞–µ–º")
                    clearPermission()
                    return false
                }
                throw e
            }
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è", e)
            clearPermission()
            false
        }
    }

    /**
     * –ö–†–ò–¢–ò–ß–ù–û –¥–ª—è Android 15+: –¢–µ—Å—Ç–∏—Ä—É–µ—Ç MediaProjection –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
     */
    fun testMediaProjectionImmediately(resultCode: Int, data: Intent): Boolean {
        return try {
            Log.d(TAG, "üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ MediaProjection –¥–ª—è Android ${Build.VERSION.SDK_INT}...")
            
            val testProjection = projectionManager.getMediaProjection(resultCode, data)
            val isValid = testProjection != null
            
            if (isValid) {
                Log.d(TAG, "‚úÖ MediaProjection —Ç–µ—Å—Ç –£–°–ü–ï–®–ï–ù")
                // –î–ª—è Android 15+ –ù–ï –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π MediaProjection - –æ–Ω –Ω—É–∂–µ–Ω!
                if (Build.VERSION.SDK_INT < 35) {
                    testProjection?.stop() // –ù–∞ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏—è—Ö –º–æ–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
                }
            } else {
                Log.e(TAG, "‚ùå MediaProjection —Ç–µ—Å—Ç –ü–†–û–í–ê–õ–ï–ù - –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å")
            }
            
            Log.d(TAG, "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ MediaProjection: ${if (isValid) "‚úÖ –£–°–ü–ï–®–ù–û" else "‚ùå –ü–†–û–í–ê–õ"}")
            return isValid
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå MediaProjection —Ç–µ—Å—Ç –ü–†–û–í–ê–õ–ï–ù —Å –æ—à–∏–±–∫–æ–π", e)
            false
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–π MediaProjection (—Å–æ–∑–¥–∞–Ω–Ω—ã–π –≤–Ω—É—Ç—Ä–∏ foreground service)
     */
    fun setCachedMediaProjection(mediaProjection: MediaProjection) {
        Log.d(TAG, "üéØ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–æ—Ç–æ–≤—ã–π MediaProjection –≤ –∫—ç—à")
        cachedMediaProjection = mediaProjection
        Log.d(TAG, "‚úÖ MediaProjection —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –∫—ç—à")
    }
}
