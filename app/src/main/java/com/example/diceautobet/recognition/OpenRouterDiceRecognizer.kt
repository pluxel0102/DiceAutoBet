package com.example.diceautobet.recognition

import android.graphics.Bitmap
import android.util.Base64
import android.util.Log
import com.example.diceautobet.utils.FileLogger
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import org.json.JSONArray
import org.json.JSONObject
import java.io.ByteArrayOutputStream
import java.security.MessageDigest
import java.util.concurrent.TimeUnit
import com.example.diceautobet.utils.ProxyManager
import okhttp3.*
import okhttp3.MediaType.Companion.toMediaType
import okhttp3.RequestBody.Companion.toRequestBody

/**
 * –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∫—É–±–∏–∫–æ–≤ —á–µ—Ä–µ–∑ OpenRouter API
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –º–æ–¥–µ–ª–∏:
 * - Claude 4.5 (anthropic/claude-3.5-sonnet)
 * - ChatGPT 5 (openai/gpt-4o)
 * - Gemini 2.5 Flash-Lite (google/gemini-2.0-flash-exp:free)
 * 
 * ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–≥–∏–∫—É MD5 —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
 * ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç ProxyManager –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
 * ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
 */
class OpenRouterDiceRecognizer(private val apiKey: String) {

    companion object {
        private const val TAG = "OpenRouterRecognizer"
        private const val OPENROUTER_API_URL = "https://openrouter.ai/api/v1/chat/completions"
        private const val MAX_TOKENS = 50
        private const val JPEG_QUALITY = 85
        
        // üöÄ –ö–≠–® –î–õ–Ø –°–ö–û–†–û–°–¢–ò - —Ö—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        private val resultCache = mutableMapOf<String, DiceResult>()
        private const val MAX_CACHE_SIZE = 50
    }
    
    /**
     * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –º–æ–¥–µ–ª–∏ OpenRouter
     */
    enum class Model(val modelId: String, val displayName: String) {
        CLAUDE_45("anthropic/claude-sonnet-4.5", "Claude 4.5"),
        CHATGPT_5("openai/gpt-5-chat", "ChatGPT 5"), 
        GEMINI_25_FLASH_LITE("google/gemini-2.5-flash-preview-09-2025", "Gemini 2.5 Flash-Lite")
    }

    data class DiceResult(
        val redDots: Int,
        val orangeDots: Int,
        val confidence: Float = 0.9f,
        val rawResponse: String = ""
    )

    /**
     * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫—É–±–∏–∫–æ–≤ —á–µ—Ä–µ–∑ OpenRouter API
     * @param bitmap - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
     * @param model - –≤—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
     * @param openCvResult - —Ä–µ–∑—É–ª—å—Ç–∞—Ç OpenCV –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
     */
    suspend fun analyzeDice(bitmap: Bitmap, model: Model, openCvResult: DiceResult? = null): DiceResult? {
        val startTime = System.currentTimeMillis()
        FileLogger.i(TAG, "ü§ñ analyzeDice() START: –º–æ–¥–µ–ª—å=${model.displayName}, —Ä–∞–∑–º–µ—Ä=${bitmap.width}x${bitmap.height}")
        
        return withContext(Dispatchers.IO) {
            try {
                // üöÄ –ü–†–û–í–ï–†–ö–ê –ö–≠–®–ê –ü–û MD5 –•–≠–®–£
                val imageHash = getImageHash(bitmap)
                resultCache[imageHash]?.let { cachedResult ->
                    val cacheTime = System.currentTimeMillis() - startTime
                    Log.d(TAG, "‚ö° –ö–≠–® –ü–û–ü–ê–î–ê–ù–ò–ï! –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω–æ: ${cachedResult.redDots}:${cachedResult.orangeDots} (–≤—Ä–µ–º—è: ${cacheTime}–º—Å)")
                    FileLogger.d(TAG, "‚ö° –ö–≠–®: ${cachedResult.redDots}:${cachedResult.orangeDots} (${cacheTime}–º—Å)")
                    return@withContext cachedResult
                }
                
                Log.d(TAG, "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ OpenRouter API (–º–æ–¥–µ–ª—å: ${model.displayName})...")
                Log.d(TAG, "üìä –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${bitmap.width}x${bitmap.height}")
                FileLogger.i(TAG, "üåê –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenRouter API: ${model.displayName}")
                
                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º bitmap –≤ base64
                val base64Image = bitmapToBase64(bitmap)
                if (base64Image == null) {
                    Log.e(TAG, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64")
                    FileLogger.e(TAG, "‚ùå –û–®–ò–ë–ö–ê: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ base64 –Ω–µ —É–¥–∞–ª–∞—Å—å")
                    return@withContext null
                }
                
                val imageSizeKb = base64Image.length * 3 / 4 / 1024
                Log.d(TAG, "üìä –†–∞–∑–º–µ—Ä base64: ${imageSizeKb}KB (${base64Image.length} —Å–∏–º–≤–æ–ª–æ–≤)")
                FileLogger.d(TAG, "üìä Base64: ${imageSizeKb}KB")
                
                // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenRouter
                val requestBody = createRequestBody(base64Image, model)
                Log.d(TAG, "üìù JSON –∑–∞–ø—Ä–æ—Å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –¥–ª—è –º–æ–¥–µ–ª–∏ ${model.displayName}")
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
                Log.d(TAG, "üåê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º HTTP –∑–∞–ø—Ä–æ—Å –∫ OpenRouter API...")
                FileLogger.d(TAG, "üì§ HTTP –∑–∞–ø—Ä–æ—Å –∫ API...")
                val response = sendApiRequest(requestBody)
                if (response == null) {
                    Log.e(TAG, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç OpenRouter API")
                    FileLogger.e(TAG, "‚ùå –û–®–ò–ë–ö–ê: –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenRouter API")
                    return@withContext null
                }
                
                Log.d(TAG, "üì® –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç OpenRouter (—Ä–∞–∑–º–µ—Ä: ${response.length} —Å–∏–º–≤–æ–ª–æ–≤)")
                FileLogger.d(TAG, "üì® –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: ${response.length} —Å–∏–º–≤–æ–ª–æ–≤")
                
                // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
                val result = parseResponse(response)
                if (result != null) {
                    val totalTime = System.currentTimeMillis() - startTime
                    
                    // üöÄ –°–û–•–†–ê–ù–Ø–ï–ú –í –ö–≠–® –ü–û MD5 –•–≠–®–£
                    addToCache(imageHash, result)
                    
                    Log.d(TAG, "‚úÖ –£–°–ü–ï–•: ${result.redDots}:${result.orangeDots} (–º–æ–¥–µ–ª—å: ${model.displayName}, –≤—Ä–µ–º—è: ${totalTime}–º—Å)")
                    FileLogger.i(TAG, "‚úÖ –£–°–ü–ï–• OpenRouter: –ª–µ–≤—ã–π=${result.redDots}, –ø—Ä–∞–≤—ã–π=${result.orangeDots}, confidence=${result.confidence}, –≤—Ä–µ–º—è=${totalTime}–º—Å")
                    
                    Log.d(TAG, "üîç –î–ï–¢–ê–õ–ò –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–Ø:")
                    Log.d(TAG, "   ü§ñ –ú–æ–¥–µ–ª—å: ${model.displayName}")
                    Log.d(TAG, "   üìè –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${bitmap.width}x${bitmap.height}")
                    Log.d(TAG, "   üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: –õ–ï–í–´–ô –∫—É–±–∏–∫ = ${result.redDots} —Ç–æ—á–µ–∫, –ü–†–ê–í–´–ô –∫—É–±–∏–∫ = ${result.orangeDots} —Ç–æ—á–µ–∫")
                    Log.d(TAG, "   üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${result.confidence}")
                    
                    // üîç –°–†–ê–í–ù–ï–ù–ò–ï –° OPENCV (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
                    openCvResult?.let { opencv ->
                        val isMatch = opencv.redDots == result.redDots && opencv.orangeDots == result.orangeDots
                        Log.d(TAG, "üÜö –°–†–ê–í–ù–ï–ù–ò–ï –° OPENCV:")
                        Log.d(TAG, "   ü§ñ OpenCV: ${opencv.redDots}:${opencv.orangeDots}")
                        Log.d(TAG, "   üß† OpenRouter (${model.displayName}): ${result.redDots}:${result.orangeDots}")
                        Log.d(TAG, "   ${if (isMatch) "‚úÖ –°–û–í–ü–ê–î–ï–ù–ò–ï!" else "‚ùå –†–ê–°–•–û–ñ–î–ï–ù–ò–ï!"}")
                        
                        if (!isMatch) {
                            Log.w(TAG, "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: OpenRouter –∏ OpenCV –¥–∞–ª–∏ —Ä–∞–∑–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!")
                        }
                    }
                } else {
                    Log.e(TAG, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç OpenRouter")
                }
                
                result
            } catch (e: Exception) {
                val totalTime = System.currentTimeMillis() - startTime
                Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —á–µ—Ä–µ–∑ OpenRouter: ${e.message} (–≤—Ä–µ–º—è: ${totalTime}–º—Å)", e)
                null
            }
        }
    }

    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç Bitmap –≤ base64 —Å—Ç—Ä–æ–∫—É
     */
    private fun bitmapToBase64(bitmap: Bitmap): String? {
        return try {
            val outputStream = ByteArrayOutputStream()
            bitmap.compress(Bitmap.CompressFormat.JPEG, JPEG_QUALITY, outputStream)
            val byteArray = outputStream.toByteArray()
            Base64.encodeToString(byteArray, Base64.NO_WRAP)
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ bitmap –≤ base64: ${e.message}")
            null
        }
    }

    /**
     * –§–æ—Ä–º–∏—Ä—É–µ—Ç JSON –∑–∞–ø—Ä–æ—Å –¥–ª—è OpenRouter API
     */
    private fun createRequestBody(base64Image: String, model: Model): String {
        val requestJson = JSONObject().apply {
            put("model", model.modelId)
            put("max_tokens", MAX_TOKENS)
            put("messages", JSONArray().apply {
                put(JSONObject().apply {
                    put("role", "user")
                    put("content", JSONArray().apply {
                        put(JSONObject().apply {
                            put("type", "text")
                            put("text", """
                                Analyze this dice image. I see two dice - one on the left and one on the right.
                                Count the dots on each die and respond ONLY in this exact format: left:right
                                For example: 3:5 or 1:6
                                Count carefully - each die shows 1 to 6 dots.
                                Just the numbers in format X:Y, nothing else.
                            """.trimIndent())
                        })
                        put(JSONObject().apply {
                            put("type", "image_url")
                            put("image_url", JSONObject().apply {
                                put("url", "data:image/jpeg;base64,$base64Image")
                            })
                        })
                    })
                })
            })
        }
        return requestJson.toString()
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ OpenRouter API (—Å fallback –Ω–∞ –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ)
     */
    private fun sendApiRequest(requestBody: String): String? {
        FileLogger.d(TAG, "üì° sendApiRequest() START")
        return try {
            val isProxyEnabled = ProxyManager.isProxyEnabled()
            val connectionType = if (isProxyEnabled) "—á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏" else "–Ω–∞–ø—Ä—è–º—É—é"
            Log.d(TAG, "üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ OpenRouter API $connectionType: $OPENROUTER_API_URL")
            FileLogger.i(TAG, "üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenRouter API $connectionType")
            
            val client = ProxyManager.getHttpClient()
            val mediaType = "application/json; charset=utf-8".toMediaType()
            val requestBodyObj = requestBody.toRequestBody(mediaType)
            
            val request = Request.Builder()
                .url(OPENROUTER_API_URL)
                .post(requestBodyObj)
                .addHeader("Content-Type", "application/json")
                .addHeader("Authorization", "Bearer $apiKey")
                .addHeader("HTTP-Referer", "https://diceautobet.app")
                .addHeader("X-Title", "Dice Auto Bet")
                .build()
            
            Log.d(TAG, "üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ $connectionType (—Ä–∞–∑–º–µ—Ä: ${requestBody.length} –±–∞–π—Ç)...")
            FileLogger.d(TAG, "üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: —Ä–∞–∑–º–µ—Ä=${requestBody.length} –±–∞–π—Ç")
            
            client.newCall(request).execute().use { response ->
                val responseCode = response.code
                Log.d(TAG, "üì® OpenRouter API response code: $responseCode")
                FileLogger.d(TAG, "üì® HTTP –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞: $responseCode")
                
                if (response.isSuccessful) {
                    val responseBody = response.body?.string() ?: ""
                    Log.d(TAG, "‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω $connectionType (—Ä–∞–∑–º–µ—Ä: ${responseBody.length} —Å–∏–º–≤–æ–ª–æ–≤)")
                    FileLogger.i(TAG, "‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç: ${responseBody.length} —Å–∏–º–≤–æ–ª–æ–≤")
                    responseBody
                } else if (responseCode == 429) {
                    val errorBody = response.body?.string() ?: ""
                    Log.e(TAG, "üí∏ –ö–í–û–¢–ê OPENROUTER –ü–†–ï–í–´–®–ï–ù–ê! HTTP 429")
                    Log.e(TAG, "üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ https://openrouter.ai/")
                    Log.e(TAG, "‚ùå Error details: $errorBody")
                    FileLogger.e(TAG, "üí∏ –ö–í–û–¢–ê –ü–†–ï–í–´–®–ï–ù–ê! HTTP 429: $errorBody")
                    null
                } else {
                    val errorBody = response.body?.string() ?: ""
                    Log.e(TAG, "‚ùå OpenRouter API error: $responseCode")
                    Log.e(TAG, "‚ùå HTTP Status: ${response.message}")
                    Log.e(TAG, "‚ùå Error details: $errorBody")
                    Log.e(TAG, "‚ùå Request URL: ${request.url}")
                    Log.e(TAG, "‚ùå Request headers: Authorization=Bearer ${apiKey.take(10)}..., Content-Type=${request.header("Content-Type")}")
                    FileLogger.e(TAG, "‚ùå API –û–®–ò–ë–ö–ê: –∫–æ–¥=$responseCode, —Å–æ–æ–±—â–µ–Ω–∏–µ=${response.message}, –¥–µ—Ç–∞–ª–∏=$errorBody")
                    null
                }
            }
        } catch (e: Exception) {
            val isProxyEnabled = ProxyManager.isProxyEnabled()
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞ (${if (isProxyEnabled) "–ø—Ä–æ–∫—Å–∏" else "–ø—Ä—è–º–æ–µ"}): ${e.message}", e)
            Log.e(TAG, "‚ùå Exception class: ${e.javaClass.simpleName}")
            FileLogger.e(TAG, "‚ùå HTTP –û–®–ò–ë–ö–ê (${if (isProxyEnabled) "–ø—Ä–æ–∫—Å–∏" else "–ø—Ä—è–º–æ–µ"}): ${e.javaClass.simpleName} - ${e.message}")
            
            // üîÑ FALLBACK: –µ—Å–ª–∏ –ø—Ä–æ–∫—Å–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º –Ω–∞–ø—Ä—è–º—É—é
            if (isProxyEnabled && e is java.net.SocketException && e.message?.contains("SOCKS") == true) {
                Log.w(TAG, "‚ö†Ô∏è –ü—Ä–æ–∫—Å–∏ –±–ª–æ–∫–∏—Ä—É–µ—Ç OpenRouter! –ü—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
                FileLogger.w(TAG, "‚ö†Ô∏è –ü—Ä–æ–∫—Å–∏ –±–ª–æ–∫–∏—Ä—É–µ—Ç! –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
                return sendApiRequestDirect(requestBody)
            }
            
            if (e.cause != null) {
                Log.e(TAG, "‚ùå Caused by: ${e.cause?.message}")
                FileLogger.e(TAG, "‚ùå –ü—Ä–∏—á–∏–Ω–∞: ${e.cause?.message}")
            }
            null
        }
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞–ø—Ä—è–º—É—é (–±–µ–∑ –ø—Ä–æ–∫—Å–∏) - fallback –º–µ—Ç–æ–¥
     */
    private fun sendApiRequestDirect(requestBody: String): String? {
        FileLogger.d(TAG, "üåç sendApiRequestDirect() START - –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        return try {
            Log.d(TAG, "üåç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenRouter –Ω–∞–ø—Ä—è–º—É—é (–±–µ–∑ –ø—Ä–æ–∫—Å–∏)...")
            
            // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –ë–ï–ó –ø—Ä–æ–∫—Å–∏
            val directClient = OkHttpClient.Builder()
                .connectTimeout(30, TimeUnit.SECONDS)
                .readTimeout(60, TimeUnit.SECONDS)
                .writeTimeout(60, TimeUnit.SECONDS)
                .build()
            
            val mediaType = "application/json; charset=utf-8".toMediaType()
            val requestBodyObj = requestBody.toRequestBody(mediaType)
            
            val request = Request.Builder()
                .url(OPENROUTER_API_URL)
                .post(requestBodyObj)
                .addHeader("Content-Type", "application/json")
                .addHeader("Authorization", "Bearer $apiKey")
                .addHeader("HTTP-Referer", "https://diceautobet.app")
                .addHeader("X-Title", "Dice Auto Bet")
                .build()
            
            directClient.newCall(request).execute().use { response ->
                val responseCode = response.code
                Log.d(TAG, "üì® OpenRouter API response (direct): $responseCode")
                FileLogger.d(TAG, "üì® –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: HTTP –∫–æ–¥ $responseCode")
                
                if (response.isSuccessful) {
                    val responseBody = response.body?.string() ?: ""
                    Log.d(TAG, "‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ!")
                    FileLogger.i(TAG, "‚úÖ –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ: ${responseBody.length} —Å–∏–º–≤–æ–ª–æ–≤")
                    responseBody
                } else {
                    val errorBody = response.body?.string() ?: ""
                    Log.e(TAG, "‚ùå OpenRouter API error (direct): $responseCode - $errorBody")
                    FileLogger.e(TAG, "‚ùå –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—à–∏–±–∫–∞: $responseCode - $errorBody")
                    null
                }
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${e.message}")
            FileLogger.e(TAG, "‚ùå –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ: ${e.javaClass.simpleName} - ${e.message}")
            null
        }
    }

    /**
     * –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç –æ—Ç OpenRouter API
     */
    private fun parseResponse(response: String): DiceResult? {
        FileLogger.d(TAG, "üîç parseResponse() START: –¥–ª–∏–Ω–∞=${response.length}")
        return try {
            if (response.isEmpty()) {
                Log.e(TAG, "‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç OpenRouter")
                FileLogger.e(TAG, "‚ùå –ü–ê–†–°–ò–ù–ì: –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
                return null
            }
            
            val jsonResponse = JSONObject(response)
            val choices = jsonResponse.getJSONArray("choices")
            if (choices.length() == 0) {
                Log.e(TAG, "‚ùå –ù–µ—Ç choices –≤ –æ—Ç–≤–µ—Ç–µ OpenRouter")
                FileLogger.e(TAG, "‚ùå –ü–ê–†–°–ò–ù–ì: –ù–µ—Ç choices –≤ JSON")
                return null
            }
            
            val message = choices.getJSONObject(0).getJSONObject("message")
            val content = message.getString("content").trim().lowercase()
            
            Log.d(TAG, "üìù –û—Ç–≤–µ—Ç OpenRouter: '$content'")
            FileLogger.d(TAG, "üìù –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞ API: '$content'")
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ—Å—Ç—å
            val badResponses = listOf("unable", "cannot", "unclear", "sorry", "difficult")
            if (badResponses.any { content.contains(it) } || content.length < 3) {
                Log.w(TAG, "‚ùå OpenRouter –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ: '$content'")
                FileLogger.w(TAG, "‚ö†Ô∏è –ü–ê–†–°–ò–ù–ì: –ù–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: '$content'")
                return null
            }
            
            // üöÄ –†–ê–°–®–ò–†–ï–ù–ù–´–ô –ü–ê–†–°–ò–ù–ì - –ù–ï–°–ö–û–õ–¨–ö–û –§–û–†–ú–ê–¢–û–í
            val patterns = listOf(
                Regex("(\\d+):(\\d+)"),                           // 3:5
                Regex("left\\s*(\\d+).*right\\s*(\\d+)"),         // left 3 right 5
                Regex("(\\d+)\\s+(\\d+)"),                        // 3 5
                Regex("(\\d+)\\s*-\\s*(\\d+)"),                   // 3-5
                Regex("(\\d+)\\s*,\\s*(\\d+)"),                   // 3,5
                Regex("(\\d+)\\s*\\|\\s*(\\d+)"),                 // 3|5
                Regex("(\\d+)\\s*/\\s*(\\d+)")                    // 3/5
            )
            
            for (pattern in patterns) {
                val matchResult = pattern.find(content)
                if (matchResult != null) {
                    val leftDots = matchResult.groupValues[1].toInt()
                    val rightDots = matchResult.groupValues[2].toInt()
                    
                    if (leftDots in 1..6 && rightDots in 1..6) {
                        val isDraw = leftDots == rightDots
                        Log.d(TAG, "‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª–∏: $leftDots:$rightDots${if (isDraw) " (–ù–ò–ß–¨–Ø)" else ""}")
                        FileLogger.i(TAG, "‚úÖ –ü–ê–†–°–ò–ù–ì –£–°–ü–ï–®–ï–ù: –ª–µ–≤—ã–π=$leftDots, –ø—Ä–∞–≤—ã–π=$rightDots${if (isDraw) " (–ù–ò–ß–¨–Ø)" else ""}")
                        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π DiceResult —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                        return DiceResult(
                            redDots = leftDots,
                            orangeDots = rightDots,
                            confidence = 0.9f,
                            rawResponse = content
                        )
                    } else {
                        Log.w(TAG, "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫: $leftDots:$rightDots")
                        FileLogger.w(TAG, "‚ö†Ô∏è –ü–ê–†–°–ò–ù–ì: –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: $leftDots:$rightDots")
                    }
                }
            }
            
            Log.w(TAG, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç: '$content'")
            FileLogger.w(TAG, "‚ùå –ü–ê–†–°–ò–ù–ì –ü–†–û–í–ê–õ–ï–ù: '$content'")
            null
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ OpenRouter: ${e.message}", e)
            FileLogger.e(TAG, "‚ùå –û–®–ò–ë–ö–ê –ü–ê–†–°–ò–ù–ì–ê: ${e.message}")
            null
        }
    }
    
    /**
     * üöÄ –ì–ï–ù–ï–†–ò–†–£–ï–¢ MD5 –•–≠–® –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø –î–õ–Ø –ö–≠–®–ê
     */
    private fun getImageHash(bitmap: Bitmap): String {
        return try {
            val stream = ByteArrayOutputStream()
            bitmap.compress(Bitmap.CompressFormat.PNG, 100, stream)
            val bytes = stream.toByteArray()
            val digest = MessageDigest.getInstance("MD5")
            val hash = digest.digest(bytes)
            hash.joinToString("") { "%02x".format(it) }
        } catch (e: Exception) {
            Log.w(TAG, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ MD5 —Ö—ç—à–∞: ${e.message}")
            bitmap.hashCode().toString()
        }
    }
    
    /**
     * üöÄ –î–û–ë–ê–í–õ–Ø–ï–¢ –†–ï–ó–£–õ–¨–¢–ê–¢ –í –ö–≠–®
     */
    private fun addToCache(imageHash: String, result: DiceResult) {
        try {
            if (resultCache.size >= MAX_CACHE_SIZE) {
                val oldestKey = resultCache.keys.first()
                resultCache.remove(oldestKey)
            }
            resultCache[imageHash] = result
            Log.d(TAG, "üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫—ç—à: $imageHash -> ${result.redDots}:${result.orangeDots}")
        } catch (e: Exception) {
            Log.w(TAG, "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫—ç—à: ${e.message}")
        }
    }
}
