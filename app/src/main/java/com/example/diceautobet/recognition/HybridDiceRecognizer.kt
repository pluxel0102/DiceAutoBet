package com.example.diceautobet.recognition

import android.graphics.Bitmap
import android.graphics.Color
import android.util.Log
import com.example.diceautobet.recognition.OpenAIDiceRecognizer
import com.example.diceautobet.recognition.OpenRouterDiceRecognizer
import com.example.diceautobet.opencv.DotCounter
import com.example.diceautobet.utils.PreferencesManager
import com.example.diceautobet.utils.FileLogger
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import java.security.MessageDigest

/**
 * –ì–∏–±—Ä–∏–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫—É–±–∏–∫–æ–≤, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π OpenCV, OpenAI (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π) –∏ OpenRouter
 * OpenRouter –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ Claude 4.5, ChatGPT 5, Gemini 2.5 Flash-Lite
 * 
 * ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–µ—Ç–µ–∫—Ü–∏—é —Å—Ç–∞—Ç–∏—á–Ω—ã—Ö –Ω–∞–¥–ø–∏—Å–µ–π ("–û–ñ–ò–î–ê–ù–ò–ï –ü–ê–†–¢–ò–ò")
 */
class HybridDiceRecognizer(
    private val preferencesManager: PreferencesManager
) {
    companion object {
        private const val TAG = "HybridDiceRecognizer"
        
        // üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏ —Å—Ç–∞—Ç–∏—á–Ω—ã—Ö —ç–∫—Ä–∞–Ω–æ–≤
        private const val BRIGHT_THRESHOLD = 200 // –ü–æ—Ä–æ–≥ —è—Ä–∫–æ—Å—Ç–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        private const val BRIGHT_PERCENTAGE_THRESHOLD = 60 // % —è—Ä–∫–∏—Ö –ø–∏–∫—Å–µ–ª–µ–π
        private const val STATIC_IMAGE_TIMEOUT = 3000L // 3 —Å–µ–∫—É–Ω–¥—ã
    }

    private var openAIRecognizer: OpenAIDiceRecognizer? = null
    private var openRouterRecognizer: OpenRouterDiceRecognizer? = null
    
    // üîç –î–µ—Ç–µ–∫—Ü–∏—è —Å—Ç–∞—Ç–∏—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    private var lastStableHash: String? = null
    private var lastStableTime: Long = 0

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç AI —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
     */
    private fun initAI() {
        val provider = preferencesManager.getAIProvider()
        
        try {
            when (provider) {
                PreferencesManager.AIProvider.OPENAI -> {
                    val apiKey = preferencesManager.getOpenAIApiKey()
                    if (apiKey.isNotEmpty() && openAIRecognizer == null) {
                        Log.d(TAG, "üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OpenAI —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å (–£–°–¢–ê–†–ï–í–®–ò–ô)")
                        openAIRecognizer = OpenAIDiceRecognizer(apiKey)
                    }
                }
                PreferencesManager.AIProvider.OPENROUTER -> {
                    val apiKey = preferencesManager.getOpenRouterApiKey()
                    if (apiKey.isNotEmpty() && openRouterRecognizer == null) {
                        val model = preferencesManager.getOpenRouterModel()
                        Log.d(TAG, "üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OpenRouter —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å (–º–æ–¥–µ–ª—å: ${model.displayName})")
                        openRouterRecognizer = OpenRouterDiceRecognizer(apiKey)
                    }
                }
                PreferencesManager.AIProvider.GEMINI -> {
                    // –£–°–¢–ê–†–ï–í–®–ò–ô: Gemini —Ç–µ–ø–µ—Ä—å —á–µ—Ä–µ–∑ OpenRouter
                    Log.w(TAG, "‚ö†Ô∏è Gemini API —É—Å—Ç–∞—Ä–µ–ª! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ OpenRouter –≤–º–µ—Å—Ç–æ –Ω–µ–≥–æ.")
                    Log.w(TAG, "üí° OpenRouter –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Gemini 2.5 Flash-Lite –±–µ—Å–ø–ª–∞—Ç–Ω–æ!")
                }
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AI: ${e.message}", e)
        }
    }

    /**
     * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫—É–±–∏–∫–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫
     */
    suspend fun analyzeDice(bitmap: Bitmap): DotCounter.Result? {
        FileLogger.i(TAG, "üé≤ analyzeDice() START: —Ä–∞–∑–º–µ—Ä=${bitmap.width}x${bitmap.height}")
        return withContext(Dispatchers.Default) {
            // üõ°Ô∏è –ü–†–û–í–ï–†–ö–ê: –°—Ç–∞—Ç–∏—á–Ω–∞—è –Ω–∞–¥–ø–∏—Å—å –∏–ª–∏ –∑–∞–≤–∏—Å–∞–Ω–∏–µ?
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: –µ—Å–ª–∏ –º–∞–ª–µ–Ω—å–∫–æ–µ (<1000x1000) - —ç—Ç–æ –≤—ã—Ä–µ–∑–∞–Ω–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
            val isCroppedArea = bitmap.width < 1000 && bitmap.height < 1000
            val checkTextOverlay = isCroppedArea // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã—Ä–µ–∑–∞–Ω–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π
            
            Log.d(TAG, "üîç –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${bitmap.width}x${bitmap.height}, –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞: $checkTextOverlay")
            FileLogger.d(TAG, "üîç –¢–∏–ø: ${if (isCroppedArea) "–≤—ã—Ä–µ–∑–∫–∞" else "–ø–æ–ª–Ω—ã–π"}, –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞: $checkTextOverlay")
            
            if (StaticFrameDetector.shouldSkipFrame(bitmap, checkTextOverlay)) {
                Log.d(TAG, "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞–¥—Ä (—Å—Ç–∞—Ç–∏—á–Ω–∞—è –Ω–∞–¥–ø–∏—Å—å –∏–ª–∏ –∑–∞–≤–∏—Å–∞–Ω–∏–µ)")
                FileLogger.w(TAG, "‚è≠Ô∏è –ö–ê–î–† –ü–†–û–ü–£–©–ï–ù: —Å—Ç–∞—Ç–∏—á–Ω–∞—è –Ω–∞–¥–ø–∏—Å—å/–∑–∞–≤–∏—Å–∞–Ω–∏–µ")
                return@withContext null
            }
            
            val mode = preferencesManager.getRecognitionMode()
            val aiProvider = preferencesManager.getAIProvider()
            val isConfigured = preferencesManager.isAIConfigured()
            
            Log.d(TAG, "üéØ –†–µ–∂–∏–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: $mode")
            Log.d(TAG, "ü§ñ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä: $aiProvider")
            Log.d(TAG, "üîë AI –Ω–∞—Å—Ç—Ä–æ–µ–Ω: $isConfigured")
            FileLogger.i(TAG, "‚öôÔ∏è –†–µ–∂–∏–º=$mode, –ø—Ä–æ–≤–∞–π–¥–µ—Ä=$aiProvider, –Ω–∞—Å—Ç—Ä–æ–µ–Ω=$isConfigured")

            when (mode) {
                PreferencesManager.RecognitionMode.OPENCV -> {
                    Log.d(TAG, "üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ OpenCV")
                    FileLogger.d(TAG, "üìä –†–µ–∂–∏–º: —Ç–æ–ª—å–∫–æ OpenCV")
                    analyzeWithOpenCV(bitmap)
                }
                PreferencesManager.RecognitionMode.OPENAI -> {
                    Log.d(TAG, "ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ OpenAI (–£–°–¢–ê–†–ï–í–®–ò–ô)")
                    analyzeWithAI(bitmap)
                }
                PreferencesManager.RecognitionMode.GEMINI -> {
                    Log.w(TAG, "‚ö†Ô∏è Gemini —Ä–µ–∂–∏–º –£–°–¢–ê–†–ï–õ! –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ OpenRouter.")
                    Log.w(TAG, "ÔøΩ –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenCV –∫–∞–∫ fallback")
                    analyzeWithOpenCV(bitmap)
                }
                PreferencesManager.RecognitionMode.OPENROUTER -> {
                    Log.d(TAG, "üåê –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenRouter")
                    analyzeWithAI(bitmap)
                }
                PreferencesManager.RecognitionMode.HYBRID -> {
                    Log.d(TAG, "üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–∏–±—Ä–∏–¥–Ω—ã–π —Ä–µ–∂–∏–º (OpenCV + AI)")
                    analyzeHybrid(bitmap)
                }
                else -> {
                    Log.w(TAG, "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º OpenCV")
                    analyzeWithOpenCV(bitmap)
                }
            }
        }
    }

    /**
     * –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ OpenCV
     */
    private suspend fun analyzeWithOpenCV(bitmap: Bitmap): DotCounter.Result {
        Log.d(TAG, "üîß –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ OpenCV")
        return DotCounter.count(bitmap)
    }

    /**
     * –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ AI (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥)
     */
    private suspend fun analyzeWithAI(bitmap: Bitmap): DotCounter.Result? {
        val mode = preferencesManager.getRecognitionMode()
        val provider = preferencesManager.getAIProvider()
        
        Log.d(TAG, "ü§ñ –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ AI: mode=$mode, provider=$provider")
        
        if (!preferencesManager.isAIConfigured()) {
            Log.w(TAG, "‚ö†Ô∏è AI –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ OpenCV")
            return analyzeWithOpenCV(bitmap)
        }
        
        return when (provider) {
            PreferencesManager.AIProvider.OPENAI -> analyzeWithOpenAI(bitmap)
            PreferencesManager.AIProvider.OPENROUTER -> analyzeWithOpenRouter(bitmap)
            PreferencesManager.AIProvider.GEMINI -> {
                Log.w(TAG, "‚ö†Ô∏è Gemini API –£–°–¢–ê–†–ï–õ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ OpenRouter.")
                Log.w(TAG, "üí° –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenCV –∫–∞–∫ fallback")
                analyzeWithOpenCV(bitmap)
            }
        }
    }

    /**
     * –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ OpenAI API
     */
    private suspend fun analyzeWithOpenAI(bitmap: Bitmap): DotCounter.Result? {
        initAI()
        
        if (openAIRecognizer == null) {
            Log.w(TAG, "‚ö†Ô∏è OpenAI –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º OpenCV")
            return analyzeWithOpenCV(bitmap)
        }

        Log.d(TAG, "üåê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI API...")
        val result = try {
            openAIRecognizer!!.analyzeDice(bitmap)
        } catch (e: Exception) {
            Log.e(TAG, "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê OpenAI: ${e.message}", e)
            Log.e(TAG, "üö® –°—Ç–µ–∫—Ç—Ä–µ–π—Å: ${e.stackTrace.contentToString()}")
            null
        }
        
        return if (result != null) {
            Log.d(TAG, "‚úÖ OpenAI –æ—Ç–≤–µ—Ç–∏–ª: red=${result.redDots}, orange=${result.orangeDots}")
            DotCounter.Result(
                leftDots = result.redDots,
                rightDots = result.orangeDots,
                confidence = result.confidence
            )
        } else {
            Log.w(TAG, "‚ö†Ô∏è OpenAI –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º OpenCV –∫–∞–∫ fallback")
            analyzeWithOpenCV(bitmap)
        }
    }

    /**
     * –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ OpenRouter API
     */
    private suspend fun analyzeWithOpenRouter(bitmap: Bitmap): DotCounter.Result? {
        initAI()
        
        if (openRouterRecognizer == null) {
            Log.w(TAG, "‚ö†Ô∏è OpenRouter –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º OpenCV")
            return analyzeWithOpenCV(bitmap)
        }

        val selectedModel = preferencesManager.getOpenRouterModel()
        val model = when (selectedModel) {
            PreferencesManager.OpenRouterModel.CLAUDE_45 -> OpenRouterDiceRecognizer.Model.CLAUDE_45
            PreferencesManager.OpenRouterModel.CHATGPT_5 -> OpenRouterDiceRecognizer.Model.CHATGPT_5
            PreferencesManager.OpenRouterModel.GEMINI_25_FLASH_LITE -> OpenRouterDiceRecognizer.Model.GEMINI_25_FLASH_LITE
        }

        Log.d(TAG, "üåê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenRouter API (–º–æ–¥–µ–ª—å: ${model.displayName})...")
        val result = try {
            openRouterRecognizer!!.analyzeDice(bitmap, model)
        } catch (e: Exception) {
            Log.e(TAG, "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê OpenRouter: ${e.message}", e)
            Log.e(TAG, "üö® –°—Ç–µ–∫—Ç—Ä–µ–π—Å: ${e.stackTrace.contentToString()}")
            null
        }
        
        return if (result != null) {
            Log.d(TAG, "‚úÖ OpenRouter (${model.displayName}) –æ—Ç–≤–µ—Ç–∏–ª: red=${result.redDots}, orange=${result.orangeDots}")
            DotCounter.Result(
                leftDots = result.redDots,
                rightDots = result.orangeDots,
                confidence = result.confidence
            )
        } else {
            Log.w(TAG, "‚ö†Ô∏è OpenRouter –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º OpenCV –∫–∞–∫ fallback")
            analyzeWithOpenCV(bitmap)
        }
    }

    /**
     * –ì–∏–±—Ä–∏–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑: —Å–Ω–∞—á–∞–ª–∞ OpenCV, –ø–æ—Ç–æ–º AI –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
     */
    private suspend fun analyzeHybrid(bitmap: Bitmap): DotCounter.Result {
        Log.d(TAG, "üîÑ –ì–∏–±—Ä–∏–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑: OpenCV + AI")
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º OpenCV
        val openCvResult = analyzeWithOpenCV(bitmap)
        Log.d(TAG, "üìä OpenCV —Ä–µ–∑—É–ª—å—Ç–∞—Ç: left=${openCvResult.leftDots}, right=${openCvResult.rightDots}, confidence=${openCvResult.confidence}")
        
        // –ï—Å–ª–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å OpenCV –Ω–∏–∑–∫–∞—è, –ø—Ä–æ–±—É–µ–º AI
        if (openCvResult.confidence < 0.7) {
            Log.d(TAG, "‚ö†Ô∏è –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å OpenCV (${openCvResult.confidence}), –ø—Ä–æ–±—É–µ–º AI")
            
            val aiResult = analyzeWithAI(bitmap)
            if (aiResult != null) {
                Log.d(TAG, "ü§ñ AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç: left=${aiResult.leftDots}, right=${aiResult.rightDots}")
                
                // –ï—Å–ª–∏ AI –±–æ–ª–µ–µ —É–≤–µ—Ä–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if (aiResult.confidence > openCvResult.confidence) {
                    Log.d(TAG, "‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–≤—ã—à–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å)")
                    return aiResult
                }
            }
        }
        
        Log.d(TAG, "‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenCV —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
        return openCvResult
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    fun cleanup() {
        openAIRecognizer = null
        openRouterRecognizer = null
        Log.d(TAG, "üßπ –†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã")
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å AI —Å–µ—Ä–≤–∏—Å–æ–≤
     */
    suspend fun checkAIAvailability(): Boolean {
        val provider = preferencesManager.getAIProvider()
        val isConfigured = preferencesManager.isAIConfigured()
        
        Log.d(TAG, "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ AI: provider=$provider, configured=$isConfigured")
        
        if (!isConfigured) {
            Log.w(TAG, "‚ùå AI –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return false
        }
        
        initAI()
        
        return when (provider) {
            PreferencesManager.AIProvider.OPENAI -> {
                Log.d(TAG, "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º OpenAI (–£–°–¢–ê–†–ï–í–®–ò–ô)...")
                openAIRecognizer != null
            }
            PreferencesManager.AIProvider.OPENROUTER -> {
                Log.d(TAG, "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º OpenRouter...")
                openRouterRecognizer != null
            }
            PreferencesManager.AIProvider.GEMINI -> {
                Log.w(TAG, "‚ö†Ô∏è Gemini API –£–°–¢–ê–†–ï–õ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ OpenRouter.")
                false
            }
        }
    }
}
