package com.example.diceautobet.recognition

import android.graphics.Bitmap
import android.graphics.Canvas
import android.graphics.ColorMatrix
import android.graphics.ColorMatrixColorFilter
import android.graphics.Paint
import android.util.Base64
import android.util.Log
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import org.json.JSONArray
import org.json.JSONObject
import java.io.ByteArrayOutputStream
import java.io.File
import java.io.FileOutputStream
import java.security.MessageDigest
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale
import com.example.diceautobet.utils.ProxyManager
import com.example.diceautobet.utils.PreferencesManager
import okhttp3.*
import okhttp3.MediaType.Companion.toMediaType
import okhttp3.RequestBody.Companion.toRequestBody
import okio.use

/**
 * –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∫—É–±–∏–∫–æ–≤ —á–µ—Ä–µ–∑ Google Gemini 2.5 Flash-Lite API
 * 
 * üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –î–õ–Ø –¢–û–ß–ù–û–°–¢–ò –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–Ø:
 * ‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —á—ë—Ä–Ω–æ-–±–µ–ª–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç–æ–º
 * ‚úÖ –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–µ–∑–∫–æ—Å—Ç–∏ –¥–ª—è —á—ë—Ç–∫–∏—Ö —Ç–æ—á–µ–∫ –Ω–∞ –∫—É–±–∏–∫–∞—Ö
 * ‚úÖ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä 512x512 –¥–ª—è –ª—É—á—à–µ–π —Ä–∞–±–æ—Ç—ã AI
 * ‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
 * ‚úÖ –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è—Ä–∫–æ—Å—Ç–∏
 * ‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
 * 
 * üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ~$0.00003 –∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
 */
class GeminiDiceRecognizer(private val preferencesManager: PreferencesManager) {
    
    companion object {
        private const val TAG = "GeminiDiceRecognizer"
        // –ë–∞–∑–æ–≤—ã–π URL –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏
        private const val API_BASE = "https://generativelanguage.googleapis.com/v1beta/models"
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –º–æ–¥–µ–ª—å - —Å–∞–º—É—é –±—ã—Å—Ç—Ä—É—é
        private const val MODEL = "gemini-2.5-flash-lite"
        private const val JPEG_QUALITY = 85  // –ë–∞–ª–∞–Ω—Å –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Å–∫–æ—Ä–æ—Å—Ç–∏
        
        // üéØ –ù–ê–°–¢–†–û–ô–ö–ò –û–ë–†–ê–ë–û–¢–ö–ò –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø
        private const val ENABLE_IMAGE_PROCESSING = false  // –û–¢–ö–õ–Æ–ß–ï–ù–û: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ä—Ç–∏—Ç –∫—É–±–∏–∫–∏
        private const val TARGET_IMAGE_SIZE = 512  // –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è AI
        private const val HIGH_CONTRAST_MODE = false  // –û—Ç–∫–ª—é—á–∞–µ–º —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç
        private const val GENTLE_PROCESSING_MODE = true  // –í–∫–ª—é—á–∞–µ–º –º—è–≥–∫—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        
        // üöÄ –ö–≠–® –î–õ–Ø –°–ö–û–†–û–°–¢–ò - —Ö—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        private val resultCache = mutableMapOf<String, DiceResult>()
        private const val MAX_CACHE_SIZE = 50
        
        // üîç –û–¢–õ–ê–î–ö–ê - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        private const val SAVE_DEBUG_IMAGES = true
        private const val DEBUG_IMAGES_FOLDER = "Gemini_Debug"
        
        // üß™ –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢–ê–õ–¨–ù–´–ï –†–ï–ñ–ò–ú–´
        private const val USE_ORIGINAL_SIZE = false  // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        private const val SKIP_SHARPENING = false   // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ–∑–∫–æ—Å—Ç—å
        private const val USE_SIMPLE_PROMPT = true // –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–º–ø—Ç
        private const val NO_PROCESSING_MODE = false // –í–ö–õ–Æ–ß–ê–ï–ú –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è!
        
        // üéØ –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ï –ü–†–û–ú–ü–¢–´ –î–õ–Ø –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢–û–í
        private val BACKUP_PROMPTS = listOf(
            "Count black dots on left dice and right dice. Format: X:Y",
            "How many dots on each die? Left:Right format like 3:5",
            "Two dice image. Count dots. Answer: left_dots:right_dots"
        )
    }
    
    data class DiceResult(
        val redDots: Int,
        val orangeDots: Int,
        val confidence: Float = 0.9f
    )
    
    data class ErrorResult(
        val isRetryable: Boolean,
        val errorMessage: String
    )
    
    /**
     * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫—É–±–∏–∫–æ–≤ —á–µ—Ä–µ–∑ Gemini API
     */
    suspend fun analyzeDice(bitmap: Bitmap, openCvResult: DiceResult? = null): DiceResult? {
        val startTime = System.currentTimeMillis()
        return withContext(Dispatchers.IO) {
            try {
                // üöÄ –ü–†–û–í–ï–†–ö–ê –ö–≠–®–ê
                val imageHash = getImageHash(bitmap)
                resultCache[imageHash]?.let { cachedResult ->
                    val cacheTime = System.currentTimeMillis() - startTime
                    Log.d(TAG, "‚ö° –ö–≠–® –ü–û–ü–ê–î–ê–ù–ò–ï! –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω–æ: ${cachedResult.redDots}:${cachedResult.orangeDots} (–≤—Ä–µ–º—è: ${cacheTime}–º—Å)")
                    return@withContext cachedResult
                }
                
                Log.d(TAG, "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Gemini API (—Ä–∞–∑–º–µ—Ä: ${bitmap.width}x${bitmap.height})...")
                
                // –û–¢–õ–ê–î–ö–ê: –í—ã–≤–æ–¥–∏–º —Å—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤ —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, –æ—Ç–∫—É–¥–∞ –∏–¥–µ—Ç –∑–∞–ø—Ä–æ—Å
                val stackTrace = Thread.currentThread().stackTrace
                Log.d(TAG, "üîç GEMINI –≤—ã–∑–≤–∞–Ω –∏–∑:")
                stackTrace.take(8).forEachIndexed { index, element ->
                    if (element.className.contains("diceautobet")) {
                        Log.d(TAG, "   $index: ${element.className}.${element.methodName}:${element.lineNumber}")
                    }
                }
                
                // üéØ –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï –î–õ–Ø –õ–£–ß–®–ï–ì–û –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–Ø
                val processedBitmap = if (NO_PROCESSING_MODE) {
                    Log.d(TAG, "üéØ –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –ë–ï–ó –û–ë–†–ê–ë–û–¢–ö–ò")
                    bitmap
                } else if (ENABLE_IMAGE_PROCESSING) {
                    preprocessImageForGemini(bitmap)
                } else {
                    bitmap
                }
                Log.d(TAG, "üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${when {
                    NO_PROCESSING_MODE -> "–ë–ï–ó –û–ë–†–ê–ë–û–¢–ö–ò"
                    ENABLE_IMAGE_PROCESSING -> "–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ"
                    else -> "–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ"
                }}: ${processedBitmap.width}x${processedBitmap.height}")
                
                // üîç –°–û–•–†–ê–ù–Ø–ï–ú –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø –î–õ–Ø –û–¢–õ–ê–î–ö–ò
                if (SAVE_DEBUG_IMAGES) {
                    saveDebugImages(bitmap, processedBitmap)
                    
                    // üß™ –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢–ê–õ–¨–ù–´–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø –û–¢–ö–õ–Æ–ß–ï–ù–´ –î–õ–Ø –£–°–ö–û–†–ï–ù–ò–Ø
                    // saveExperimentalImages(bitmap)
                }
                
                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º bitmap –≤ base64
                val base64Image = bitmapToBase64(processedBitmap)
                if (base64Image == null) {
                    return@withContext null
                }
                
                val imageSizeKb = base64Image.length * 3 / 4 / 1024  // –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤ KB
                Log.d(TAG, "üìä –†–∞–∑–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${imageSizeKb}KB (base64: ${base64Image.length} —Å–∏–º–≤–æ–ª–æ–≤)")
                
                // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ Gemini
                val requestBody = createRequestBody(base64Image)
                
                // –ë—ã—Å—Ç—Ä–æ –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –∫–ª—é—á–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
                val keys = preferencesManager.getGeminiApiKeys()
                if (keys.isEmpty()) {
                    Log.e(TAG, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö Gemini API –∫–ª—é—á–µ–π")
                    return@withContext null
                }
                
                var currentKeyIndex = preferencesManager.getCurrentGeminiKeyIndex()
                val totalKeys = keys.size
                
                repeat(totalKeys) { attempt ->
                    val apiKey = keys[currentKeyIndex]
                    Log.d(TAG, "üîë –ü—Ä–æ–±—É–µ–º –∫–ª—é—á ${currentKeyIndex + 1}/$totalKeys (–ø–æ–ø—ã—Ç–∫–∞ ${attempt + 1})")
                    
                    // –û–î–ù–û–ö–†–ê–¢–ù–´–ô –í–´–ó–û–í –ë–ï–ó –ü–û–í–¢–û–†–û–í - –æ—Ç–≤–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ —Å—Ä–∞–∑—É
                    var response: String? = null
                    var lastError: Exception? = null
                    
                    try {
                        response = sendApiRequest(requestBody, apiKey)
                        if (response != null) {
                            Log.d(TAG, "‚úÖ –ö–ª—é—á ${currentKeyIndex + 1} –¥–∞–ª –æ—Ç–≤–µ—Ç (${response.length} —Å–∏–º–≤–æ–ª–æ–≤)")
                        } else {
                            Log.w(TAG, "‚ö†Ô∏è –ö–ª—é—á ${currentKeyIndex + 1} –≤–µ—Ä–Ω—É–ª null –æ—Ç–≤–µ—Ç")
                        }
                    } catch (e: Exception) {
                        lastError = e
                        Log.w(TAG, "‚ùå –ö–ª—é—á ${currentKeyIndex + 1} –≤—ã–∑–≤–∞–ª –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: ${e.message}")
                    }
                    
                    if (response != null) {
                        // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
                        Log.d(TAG, "üîç –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –æ—Ç –∫–ª—é—á–∞ ${currentKeyIndex + 1}...")
                        val result = parseResponse(response)
                        if (result != null) {
                            val totalTime = System.currentTimeMillis() - startTime
                            // üöÄ –°–û–•–†–ê–ù–Ø–ï–ú –í –ö–≠–®
                            addToCache(imageHash, result)
                            Log.d(TAG, "‚úÖ –£–°–ü–ï–• —Å –∫–ª—é—á–æ–º ${currentKeyIndex + 1}: ${result.redDots}:${result.orangeDots} (${totalTime}–º—Å)")
                            
                            // üîç –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –î–õ–Ø –û–¢–õ–ê–î–ö–ò
                            Log.d(TAG, "üîç –î–ï–¢–ê–õ–ò –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–Ø:")
                            Log.d(TAG, "   üìè –†–∞–∑–º–µ—Ä –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${bitmap.width}x${bitmap.height}")
                            Log.d(TAG, "   üé® –†–∞–∑–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ: ${processedBitmap.width}x${processedBitmap.height}")
                            Log.d(TAG, "   üéØ Gemini —É–≤–∏–¥–µ–ª: –õ–ï–í–´–ô –∫—É–±–∏–∫ = ${result.redDots} —Ç–æ—á–µ–∫, –ü–†–ê–í–´–ô –∫—É–±–∏–∫ = ${result.orangeDots} —Ç–æ—á–µ–∫")
                            Log.d(TAG, "   üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${result.confidence}")
                            
                            // üîç –°–†–ê–í–ù–ï–ù–ò–ï –° OPENCV (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
                            openCvResult?.let { opencv ->
                                val isMatch = opencv.redDots == result.redDots && opencv.orangeDots == result.orangeDots
                                Log.d(TAG, "üÜö –°–†–ê–í–ù–ï–ù–ò–ï –° OPENCV:")
                                Log.d(TAG, "   ü§ñ OpenCV: ${opencv.redDots}:${opencv.orangeDots}")
                                Log.d(TAG, "   üß† Gemini: ${result.redDots}:${result.orangeDots}")
                                Log.d(TAG, "   ${if (isMatch) "‚úÖ –°–û–í–ü–ê–î–ï–ù–ò–ï!" else "‚ùå –†–ê–°–•–û–ñ–î–ï–ù–ò–ï!"}")
                                
                                if (!isMatch) {
                                    Log.w(TAG, "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: Gemini –∏ OpenCV –¥–∞–ª–∏ —Ä–∞–∑–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!")
                                    Log.w(TAG, "üí° –í–æ–∑–º–æ–∂–Ω–æ —Å—Ç–æ–∏—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∞–ø–∫–µ ${DEBUG_IMAGES_FOLDER}")
                                }
                            }
                            
                            return@withContext result
                        } else {
                            Log.w(TAG, "‚ö†Ô∏è –ö–ª—é—á ${currentKeyIndex + 1} –¥–∞–ª –æ—Ç–≤–µ—Ç, –Ω–æ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ—É–¥–∞—á–µ–Ω. –û—Ç–≤–µ—Ç: ${response.take(100)}...")
                        }
                    } else {
                        // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—à–∏–±–∫—É
                        if (lastError != null) {
                            Log.w(TAG, "‚ùå –ö–ª—é—á ${currentKeyIndex + 1} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: ${lastError.message}")
                        } else {
                            Log.w(TAG, "‚ùå –ö–ª—é—á ${currentKeyIndex + 1} –≤–µ—Ä–Ω—É–ª null –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏—è")
                        }
                    }
                    
                    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∫–ª—é—á
                    currentKeyIndex = (currentKeyIndex + 1) % totalKeys
                    preferencesManager.saveCurrentGeminiKeyIndex(currentKeyIndex)
                }
                
                Log.e(TAG, "‚ùå –í—Å–µ –∫–ª—é—á–∏ ($totalKeys) –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏")
                return@withContext null
            } catch (e: Exception) {
                val totalTime = System.currentTimeMillis() - startTime
                Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —á–µ—Ä–µ–∑ Gemini: ${e.message} (–≤—Ä–µ–º—è: ${totalTime}–º—Å)", e)
                null
            }
        }
    }
    
    /**
     * üéØ –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø –î–õ–Ø GEMINI
     * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Ö–Ω–∏–∫ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:
     * 1. –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —á—ë—Ä–Ω–æ-–±–µ–ª–æ–µ
     * 2. –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏
     * 3. –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–µ–∑–∫–æ—Å—Ç–∏
     * 4. –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è AI
     */
    private fun preprocessImageForGemini(originalBitmap: Bitmap): Bitmap {
        try {
            Log.d(TAG, "üé® –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${originalBitmap.width}x${originalBitmap.height}")
            
            // 1. üéØ –†–ê–ó–ú–ï–† - —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–µ–º —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
            val scaledBitmap = if (USE_ORIGINAL_SIZE) {
                Log.d(TAG, "üéØ –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢: –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä ${originalBitmap.width}x${originalBitmap.height}")
                originalBitmap.copy(Bitmap.Config.ARGB_8888, true)
            } else {
                if (originalBitmap.width != TARGET_IMAGE_SIZE || originalBitmap.height != TARGET_IMAGE_SIZE) {
                    Bitmap.createScaledBitmap(originalBitmap, TARGET_IMAGE_SIZE, TARGET_IMAGE_SIZE, true)
                } else {
                    originalBitmap.copy(Bitmap.Config.ARGB_8888, true)
                }
            }
            
            // 2. üñ§ –ü–†–ï–û–ë–†–ê–ó–û–í–ê–ù–ò–ï –í –ß–Å–†–ù–û-–ë–ï–õ–û–ï
            val bwBitmap = if (GENTLE_PROCESSING_MODE) {
                convertToGentleBW(scaledBitmap)
            } else {
                convertToHighContrastBW(scaledBitmap)
            }
            
            // 3. üîç –†–ï–ó–ö–û–°–¢–¨ - —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–µ–º –±–µ–∑ –Ω–µ—ë
            val finalBitmap = if (SKIP_SHARPENING) {
                Log.d(TAG, "üéØ –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∏–ª—å—Ç—Ä —Ä–µ–∑–∫–æ—Å—Ç–∏")
                bwBitmap
            } else {
                applySharpenFilter(bwBitmap)
            }
            
            Log.d(TAG, "‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${finalBitmap.width}x${finalBitmap.height}")
            return finalBitmap
            
        } catch (e: Exception) {
            Log.w(TAG, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª: ${e.message}")
            return originalBitmap
        }
    }
    
    /**
     * üñ§ –£–õ–£–ß–®–ï–ù–ù–´–ô BLACKISH –≠–§–§–ï–ö–¢ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
     * –°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ —á–µ—Ä–Ω–æ-–±–µ–ª—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
     */
    private fun convertToHighContrastBW(bitmap: Bitmap): Bitmap {
        val result = Bitmap.createBitmap(bitmap.width, bitmap.height, Bitmap.Config.ARGB_8888)
        val canvas = Canvas(result)
        val paint = Paint()
        
        // –£–ª—É—á—à–µ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –¥–ª—è blackish —ç—Ñ—Ñ–µ–∫—Ç–∞
        val colorMatrix = ColorMatrix().apply {
            // 1. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ—Ç—Ç–µ–Ω–∫–∏ —Å–µ—Ä–æ–≥–æ
            setSaturation(0f)
            
            // 2. –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–π blackish —ç—Ñ—Ñ–µ–∫—Ç
            val contrast = 3.0f      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç –¥–ª—è —á–µ—Ç–∫–æ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
            val brightness = 40f     // –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —è—Ä–∫–æ—Å—Ç—å –¥–ª—è –±–µ–ª—ã—Ö —Ç–æ—á–µ–∫
            val blackPoint = -30f    // –£–≥–ª—É–±–ª—è–µ–º —á–µ—Ä–Ω—ã–µ —Ç–æ–Ω–∞ (blackish —ç—Ñ—Ñ–µ–∫—Ç)
            
            val scale = contrast
            val translate = brightness + blackPoint + (128f * (1f - contrast))
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å blackish —ç—Ñ—Ñ–µ–∫—Ç–æ–º
            postConcat(ColorMatrix(floatArrayOf(
                scale, 0f, 0f, 0f, translate,
                0f, scale, 0f, 0f, translate,
                0f, 0f, scale, 0f, translate,
                0f, 0f, 0f, 1f, 0f
            )))
            
            // 3. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            // –£—Å–∏–ª–∏–≤–∞–µ–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –º–µ–∂–¥—É —á–µ—Ä–Ω—ã–º –∏ –±–µ–ª—ã–º
            val stabilizeMatrix = ColorMatrix(floatArrayOf(
                1.2f, 0f, 0f, 0f, -20f,    // –ö—Ä–∞—Å–Ω—ã–π –∫–∞–Ω–∞–ª: –±–æ–ª—å—à–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
                0f, 1.2f, 0f, 0f, -20f,    // –ó–µ–ª–µ–Ω—ã–π –∫–∞–Ω–∞–ª: –±–æ–ª—å—à–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞  
                0f, 0f, 1.2f, 0f, -20f,    // –°–∏–Ω–∏–π –∫–∞–Ω–∞–ª: –±–æ–ª—å—à–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
                0f, 0f, 0f, 1f, 0f         // –ê–ª—å—Ñ–∞ –∫–∞–Ω–∞–ª: –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            ))
            postConcat(stabilizeMatrix)
        }
        
        paint.colorFilter = ColorMatrixColorFilter(colorMatrix)
        canvas.drawBitmap(bitmap, 0f, 0f, paint)
        
        Log.d(TAG, "üñ§ –ü—Ä–∏–º–µ–Ω—ë–Ω —É–ª—É—á—à–µ–Ω–Ω—ã–π blackish —ç—Ñ—Ñ–µ–∫—Ç")
        return result
    }
    
    /**
     * üñ§ –ú–Ø–ì–ö–û–ï –ü–†–ï–û–ë–†–ê–ó–û–í–ê–ù–ò–ï –í –ß–Å–†–ù–û-–ë–ï–õ–û–ï (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
     * –ë–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –±–µ–∑ –ø–æ—Ç–µ—Ä–∏ –¥–µ—Ç–∞–ª–µ–π
     */
    private fun convertToGentleBW(bitmap: Bitmap): Bitmap {
        val result = Bitmap.createBitmap(bitmap.width, bitmap.height, Bitmap.Config.ARGB_8888)
        val canvas = Canvas(result)
        val paint = Paint()
        
        // –ú—è–≥–∫–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ —á/–±
        val colorMatrix = ColorMatrix().apply {
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ—Ç—Ç–µ–Ω–∫–∏ —Å–µ—Ä–æ–≥–æ
            setSaturation(0f)
            
            // –£–º–µ—Ä–µ–Ω–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏
            val contrast = 1.3f  // –ú—è–≥–∫–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç (–±—ã–ª–æ 2.5f)
            val brightness = 20f  // –ù–µ–±–æ–ª—å—à–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —è—Ä–∫–æ—Å—Ç–∏ (–±—ã–ª–æ 50f)
            
            val scale = contrast
            val translate = brightness + (128f * (1f - contrast))
            
            postConcat(ColorMatrix(floatArrayOf(
                scale, 0f, 0f, 0f, translate,
                0f, scale, 0f, 0f, translate,
                0f, 0f, scale, 0f, translate,
                0f, 0f, 0f, 1f, 0f
            )))
        }
        
        paint.colorFilter = ColorMatrixColorFilter(colorMatrix)
        canvas.drawBitmap(bitmap, 0f, 0f, paint)
        
        Log.d(TAG, "üñ§ –ü—Ä–∏–º–µ–Ω—ë–Ω –º—è–≥–∫–∏–π —á/–± —Ñ–∏–ª—å—Ç—Ä")
        return result
    }
    
    /**
     * üîç –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –§–ò–õ–¨–¢–†–ê –†–ï–ó–ö–û–°–¢–ò
     * –î–µ–ª–∞–µ—Ç —Ç–æ—á–∫–∏ –Ω–∞ –∫—É–±–∏–∫–∞—Ö –±–æ–ª–µ–µ —á—ë—Ç–∫–∏–º–∏
     */
    private fun applySharpenFilter(bitmap: Bitmap): Bitmap {
        val result = Bitmap.createBitmap(bitmap.width, bitmap.height, Bitmap.Config.ARGB_8888)
        val canvas = Canvas(result)
        val paint = Paint()
        
        // –ú–∞—Ç—Ä–∏—Ü–∞ —Ä–µ–∑–∫–æ—Å—Ç–∏ (–¥–µ–ª–∞–µ—Ç –∫—Ä–∞—è –±–æ–ª–µ–µ —á—ë—Ç–∫–∏–º–∏)
        val sharpenMatrix = ColorMatrix(floatArrayOf(
            0f, -1f, 0f, 0f, 0f,
            -1f, 5f, -1f, 0f, 0f,
            0f, -1f, 0f, 0f, 0f,
            0f, 0f, 0f, 1f, 0f
        ))
        
        paint.colorFilter = ColorMatrixColorFilter(sharpenMatrix)
        canvas.drawBitmap(bitmap, 0f, 0f, paint)
        
        Log.d(TAG, "üîç –ü—Ä–∏–º–µ–Ω—ë–Ω —Ñ–∏–ª—å—Ç—Ä —Ä–µ–∑–∫–æ—Å—Ç–∏")
        return result
    }
    
    /**
     * üß™ –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢–ê–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
     * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
     */
    fun preprocessImageAdaptive(originalBitmap: Bitmap): Bitmap {
        try {
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —è—Ä–∫–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            val brightness = calculateAverageBrightness(originalBitmap)
            Log.d(TAG, "üîç –°—Ä–µ–¥–Ω—è—è —è—Ä–∫–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: $brightness")
            
            return when {
                brightness < 50 -> {
                    // –¢—ë–º–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —è—Ä–∫–æ—Å—Ç—å
                    Log.d(TAG, "üåô –¢—ë–º–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —è—Ä–∫–æ—Å—Ç—å")
                    preprocessImageForGemini(originalBitmap)
                }
                brightness > 200 -> {
                    // –°–ª–∏—à–∫–æ–º —è—Ä–∫–æ–µ - —É–º–µ–Ω—å—à–∞–µ–º —è—Ä–∫–æ—Å—Ç—å
                    Log.d(TAG, "‚òÄÔ∏è –Ø—Ä–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É")
                    preprocessImageForGemini(originalBitmap)
                }
                else -> {
                    // –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —è—Ä–∫–æ—Å—Ç—å - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
                    Log.d(TAG, "‚öñÔ∏è –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —è—Ä–∫–æ—Å—Ç—å, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞")
                    preprocessImageForGemini(originalBitmap)
                }
            }
        } catch (e: Exception) {
            Log.w(TAG, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${e.message}")
            return preprocessImageForGemini(originalBitmap)
        }
    }
    
    /**
     * üìä –í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ä–µ–¥–Ω—é—é —è—Ä–∫–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    private fun calculateAverageBrightness(bitmap: Bitmap): Float {
        var totalBrightness = 0L
        val pixels = IntArray(bitmap.width * bitmap.height)
        bitmap.getPixels(pixels, 0, bitmap.width, 0, 0, bitmap.width, bitmap.height)
        
        for (pixel in pixels) {
            val r = (pixel shr 16) and 0xFF
            val g = (pixel shr 8) and 0xFF
            val b = pixel and 0xFF
            // –§–æ—Ä–º—É–ª–∞ –¥–ª—è —è—Ä–∫–æ—Å—Ç–∏ (–≤–∑–≤–µ—à–µ–Ω–Ω–∞—è)
            totalBrightness += (0.299 * r + 0.587 * g + 0.114 * b).toLong()
        }
        
        return totalBrightness.toFloat() / pixels.size
    }
    
    /**
     * üîç –°–û–•–†–ê–ù–ï–ù–ò–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô –î–õ–Ø –û–¢–õ–ê–î–ö–ò
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
     */
    private fun saveDebugImages(originalBitmap: Bitmap, processedBitmap: Bitmap) {
        try {
            val timestamp = SimpleDateFormat("yyyyMMdd_HHmmss_SSS", Locale.getDefault()).format(Date())
            
            // –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            val debugFolder = File("/storage/emulated/0/Android/data/com.example.diceautobet/files", DEBUG_IMAGES_FOLDER)
            if (!debugFolder.exists()) {
                debugFolder.mkdirs()
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            val originalFile = File(debugFolder, "GEMINI_original_${timestamp}.png")
            saveBitmapToFile(originalBitmap, originalFile)
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            val processedFile = File(debugFolder, "GEMINI_processed_${timestamp}.png")
            saveBitmapToFile(processedBitmap, processedFile)
            
            Log.d(TAG, "üîç GEMINI: –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:")
            Log.d(TAG, "   üìÑ GEMINI –û—Ä–∏–≥–∏–Ω–∞–ª: ${originalFile.absolutePath}")
            Log.d(TAG, "   üé® GEMINI –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ: ${processedFile.absolutePath}")
            Log.d(TAG, "   üìè GEMINI –†–∞–∑–º–µ—Ä—ã: ${originalBitmap.width}x${originalBitmap.height} -> ${processedBitmap.width}x${processedBitmap.height}")
            
            // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä —Ä–∞–≤–µ–Ω —Ä–∞–∑–º–µ—Ä—É —ç–∫—Ä–∞–Ω–∞ - —ç—Ç–æ –æ—à–∏–±–∫–∞!
            if (originalBitmap.width > 1000 && originalBitmap.height > 2000) {
                Log.e(TAG, "üö® –í–ù–ò–ú–ê–ù–ò–ï! GEMINI –ø–æ–ª—É—á–∏–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞: ${originalBitmap.width}x${originalBitmap.height}")
                Log.e(TAG, "üö® –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—à–∏–±–∫–æ–π! –î–æ–ª–∂–Ω–∞ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –æ–±–ª–∞—Å—Ç—å –∫—É–±–∏–∫–æ–≤!")
            } else {
                Log.d(TAG, "‚úÖ GEMINI –ø–æ–ª—É—á–∏–ª –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏: ${originalBitmap.width}x${originalBitmap.height}")
            }
            
        } catch (e: Exception) {
            Log.w(TAG, "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${e.message}")
        }
    }
    
    /**
     * üíæ –°–û–•–†–ê–ù–ï–ù–ò–ï BITMAP –í –§–ê–ô–õ
     */
    private fun saveBitmapToFile(bitmap: Bitmap, file: File) {
        try {
            FileOutputStream(file).use { fos ->
                bitmap.compress(Bitmap.CompressFormat.PNG, 100, fos)
            }
        } catch (e: Exception) {
            Log.w(TAG, "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${file.name}: ${e.message}")
        }
    }
    
    /**
     * üß™ –°–û–ó–î–ê–ù–ò–ï –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢–ê–õ–¨–ù–´–• –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô
     * –°–æ–∑–¥–∞—ë–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
     */
    private fun saveExperimentalImages(originalBitmap: Bitmap) {
        try {
            val timestamp = SimpleDateFormat("yyyyMMdd_HHmmss_SSS", Locale.getDefault()).format(Date())
            val debugFolder = File("/storage/emulated/0/Android/data/com.example.diceautobet/files", DEBUG_IMAGES_FOLDER)
            
            // 1. –¢–æ–ª—å–∫–æ —á/–± –±–µ–∑ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
            val bwOnly = convertToGentleBW(originalBitmap)
            saveBitmapToFile(bwOnly, File(debugFolder, "exp1_bw_only_${timestamp}.png"))
            
            // 2. –¢–æ–ª—å–∫–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            val scaledOnly = Bitmap.createScaledBitmap(originalBitmap, 512, 512, true)
            saveBitmapToFile(scaledOnly, File(debugFolder, "exp2_scaled_only_${timestamp}.png"))
            
            // 3. –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ + —á/–± –±–µ–∑ —Ä–µ–∑–∫–æ—Å—Ç–∏
            val scaledBw = convertToGentleBW(scaledOnly)
            saveBitmapToFile(scaledBw, File(debugFolder, "exp3_scaled_bw_${timestamp}.png"))
            
            // 4. –í—ã—Å–æ–∫–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç
            val highContrast = convertToHighContrastBW(originalBitmap)
            saveBitmapToFile(highContrast, File(debugFolder, "exp4_high_contrast_${timestamp}.png"))
            
            Log.d(TAG, "üß™ –°–æ–∑–¥–∞–Ω–æ 4 —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            
        } catch (e: Exception) {
            Log.w(TAG, "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${e.message}")
        }
    }
    
    /**
     * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å—Ç–æ–∏—Ç –ª–∏ –ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –∫–ª—é—á
     */
    fun analyzeError(error: Exception): ErrorResult {
        val message = error.message ?: ""
        val isRetryable = when {
            // –û—à–∏–±–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ - –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∫–ª—é—á
            message.contains("API_KEY") || message.contains("403") || message.contains("401") -> true
            message.contains("INVALID_API_KEY") || message.contains("API key not valid") -> true
            
            // –û—à–∏–±–∫–∏ –∫–≤–æ—Ç—ã - –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∫–ª—é—á
            message.contains("429") || message.contains("QUOTA") -> true
            
            // –û—à–∏–±–∫–∏ —Å–µ—Ç–∏ - –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑
            message.contains("timeout") || message.contains("connection") -> true
            
            // –û—à–∏–±–∫–∏ –º–æ–¥–µ–ª–∏ - –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∫–ª—é—á
            message.contains("400") || message.contains("404") -> true
            
            // –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ - –Ω–µ –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∫–ª—é—á
            else -> false
        }
        
        return ErrorResult(isRetryable, message)
    }
    
    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç Bitmap –≤ base64 —Å—Ç—Ä–æ–∫—É
     */
    private fun bitmapToBase64(bitmap: Bitmap): String? {
        return try {
            val outputStream = ByteArrayOutputStream()
            bitmap.compress(Bitmap.CompressFormat.JPEG, JPEG_QUALITY, outputStream)  // JPEG –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
            val byteArray = outputStream.toByteArray()
            Base64.encodeToString(byteArray, Base64.NO_WRAP)
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ bitmap –≤ base64: ${e.message}")
            null
        }
    }
    
    /**
     * –§–æ—Ä–º–∏—Ä—É–µ—Ç JSON –∑–∞–ø—Ä–æ—Å –¥–ª—è Gemini API
     */
    private fun createRequestBody(base64Image: String): String {
        val requestJson = JSONObject().apply {
            put("contents", JSONArray().apply {
                put(JSONObject().apply {
                    // –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ API —Ç—Ä–µ–±—É—é—Ç –Ω–∞–ª–∏—á–∏—è role
                    put("role", "user")
                    put("parts", JSONArray().apply {
                        put(JSONObject().apply {
                            val promptText = if (USE_SIMPLE_PROMPT) {
                                // üéØ –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–†–û–°–¢–û–ô –ü–†–û–ú–ü–¢ –î–õ–Ø –û–ë–õ–ê–°–¢–ò –ö–£–ë–ò–ö–û–í
                                "I see two dice in this image. Count the black dots on the left die and right die. Respond ONLY with two numbers separated by colon. Format: left:right (example: 3:5). Nothing else."
                            } else {
                                // üìù –ü–û–î–†–û–ë–ù–´–ô –ü–†–û–ú–ü–¢ –î–õ–Ø –û–ë–õ–ê–°–¢–ò –ö–£–ë–ò–ö–û–í
                                """
                                Look at this black and white high-contrast image of two dice.
                                Count the black dots on each die carefully.
                                LEFT die dots : RIGHT die dots
                                Answer format: X:Y (where X and Y are numbers 1-6)
                                Example: 3:5
                                Just the numbers, nothing else.
                                """.trimIndent()
                            }
                            put("text", promptText)
                            Log.d(TAG, "üî§ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–º–ø—Ç: ${if (USE_SIMPLE_PROMPT) "–ü–†–û–°–¢–û–ô" else "–ü–û–î–†–û–ë–ù–´–ô"}")
                        })
                        put(JSONObject().apply {
                            put("inline_data", JSONObject().apply {
                                put("mime_type", "image/png")  // PNG —Ñ–æ—Ä–º–∞—Ç
                                put("data", base64Image)
                            })
                        })
                    })
                })
            })
            // üöÄ –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ –î–õ–Ø –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–û–ô –°–ö–û–†–û–°–¢–ò
            put("generationConfig", JSONObject().apply {
                put("maxOutputTokens", 6)   // –ï—â—ë –º–µ–Ω—å—à–µ —Ç–æ–∫–µ–Ω–æ–≤ - —Ç–æ–ª—å–∫–æ "3:5"
                put("temperature", 0.0)     // –ù–∏–∫–∞–∫–æ–π –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
                put("topP", 0.1)           // –¢–æ–ª—å–∫–æ —Å–∞–º—ã–µ –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
                put("topK", 1)             // –¢–æ–ª—å–∫–æ –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
                put("stopSequences", JSONArray().apply { 
                    put("\n")  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ
                    put(" ")   // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –Ω–∞ –ø—Ä–æ–±–µ–ª–µ
                    put(".")   // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –Ω–∞ —Ç–æ—á–∫–µ
                    put(",")   // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –Ω–∞ –∑–∞–ø—è—Ç–æ–π
                })
            })
        }
        
        return requestJson.toString()
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å –∫ Gemini API —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
     */
    private fun sendApiRequest(requestBody: String, apiKey: String): String? {
        val requestStartTime = System.currentTimeMillis()
        return try {
            val url = "${API_BASE}/${MODEL}:generateContent?key=${apiKey}"
            Log.d(TAG, "üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Gemini API —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏: $url")
            
            // üöÄ –ò–°–ü–û–õ–¨–ó–£–ï–ú –ë–´–°–¢–†–´–ô –ü–†–ï–î–ê–£–¢–ï–ù–¢–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–´–ô –ö–õ–ò–ï–ù–¢
            val client = ProxyManager.getFastGameClient()
            val mediaType = "application/json; charset=utf-8".toMediaType()
            val requestBodyObj = requestBody.toRequestBody(mediaType)
            
            val request = Request.Builder()
                .url(url)
                .post(requestBodyObj)
                // –ú–∏–Ω–∏–º—É–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
                .build()
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            val sendStartTime = System.currentTimeMillis()
            client.newCall(request).execute().use { response ->
                val sendTime = System.currentTimeMillis() - sendStartTime
                val responseStartTime = System.currentTimeMillis()
                
                if (response.isSuccessful) {
                    // üõ°Ô∏è –ë–ï–ó–û–ü–ê–°–ù–û–ï –ß–¢–ï–ù–ò–ï –û–¢–í–ï–¢–ê –° –£–ö–ê–ó–ê–ù–ò–ï–ú –ö–û–î–ò–†–û–í–ö–ò
                    val responseBody = response.body?.let { body ->
                        body.source().use { source ->
                            source.readString(Charsets.UTF_8)
                        }
                    } ?: ""
                    
                    val responseTime = System.currentTimeMillis() - responseStartTime
                    val totalRequestTime = System.currentTimeMillis() - requestStartTime
                    
                    // üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –û–¢–í–ï–¢–ê
                    val preview = responseBody.take(100).replace("\n", "\\n")
                    Log.d(TAG, "üîç –û—Ç–≤–µ—Ç Gemini (${responseBody.length} —Å–∏–º–≤–æ–ª–æ–≤): $preview...")
                    
                    Log.d(TAG, "üìà HTTP –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ —É—Å–ø–µ—à–µ–Ω: –æ—Ç–ø—Ä–∞–≤–∫–∞ ${sendTime}–º—Å, —á—Ç–µ–Ω–∏–µ ${responseTime}–º—Å, –≤—Å–µ–≥–æ ${totalRequestTime}–º—Å")
                    responseBody
                } else if (response.code == 429) {
                    val errorBody = response.body?.string() ?: "No error body"
                    Log.e(TAG, "üí∏ –ö–í–û–¢–ê GEMINI –ü–†–ï–í–´–®–ï–ù–ê! HTTP 429: $errorBody")
                    null
                } else if (response.code == 400 || response.code == 404 || response.code == 403) {
                    val errorBody = response.body?.string() ?: "No error body"
                    Log.e(TAG, "‚ùå Gemini API error (${response.code}): $errorBody")
                    null
                } else {
                    val errorBody = response.body?.string() ?: "No error body"
                    Log.e(TAG, "‚ùå Gemini API error: ${response.code}: $errorBody")
                    null
                }
            }
        } catch (e: Exception) {
            val totalRequestTime = System.currentTimeMillis() - requestStartTime
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ (${totalRequestTime}–º—Å): ${e.message}", e)
            null
        }
    }
    
    /**
     * –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç –æ—Ç Gemini API
     */
    private fun parseResponse(response: String): DiceResult? {
        return try {
            // üõ°Ô∏è –ü–†–û–í–ï–†–ö–ê –ù–ê –ü–û–í–†–ï–ñ–î–ï–ù–ù–´–ï –î–ê–ù–ù–´–ï
            if (response.isEmpty()) {
                Log.e(TAG, "‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini")
                return null
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å '{' (–≤–∞–ª–∏–¥–Ω—ã–π JSON)
            val trimmedResponse = response.trim()
            if (!trimmedResponse.startsWith("{")) {
                Log.e(TAG, "‚ùå –û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON. –ü–µ—Ä–≤—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤: ${trimmedResponse.take(50)}")
                return null
            }
            
            Log.d(TAG, "üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ JSON –æ—Ç–≤–µ—Ç–∞...")
            val jsonResponse = JSONObject(trimmedResponse)
            Log.d(TAG, "‚úÖ JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω")
            
            val candidates = jsonResponse.getJSONArray("candidates")
            Log.d(TAG, "üìã –ù–∞–π–¥–µ–Ω–æ candidates: ${candidates.length()}")
            if (candidates.length() == 0) {
                Log.e(TAG, "‚ùå –ù–µ—Ç candidates –≤ –æ—Ç–≤–µ—Ç–µ Gemini")
                return null
            }
            
            val firstCandidate = candidates.getJSONObject(0)
            val content = firstCandidate.getJSONObject("content")
            val parts = content.getJSONArray("parts")
            Log.d(TAG, "üìã –ù–∞–π–¥–µ–Ω–æ parts: ${parts.length()}")
            
            if (parts.length() == 0) {
                Log.e(TAG, "‚ùå –ù–µ—Ç parts –≤ –æ—Ç–≤–µ—Ç–µ Gemini")
                return null
            }
            
            val text = parts.getJSONObject(0).getString("text").trim().lowercase()
            Log.d(TAG, "üìù –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: '$text' (–¥–ª–∏–Ω–∞: ${text.length})")
            
            // üîç –ü–û–õ–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –î–õ–Ø –û–¢–õ–ê–î–ö–ò
            Log.d(TAG, "üîç –ü–û–õ–ù–´–ô –û–¢–í–ï–¢ GEMINI:")
            Log.d(TAG, "   üìù –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: '${parts.getJSONObject(0).getString("text")}'")
            Log.d(TAG, "   üîÑ –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: '$text'")
            Log.d(TAG, "   üìè –î–ª–∏–Ω–∞: ${text.length} —Å–∏–º–≤–æ–ª–æ–≤")
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ—Å—Ç—å –∏ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–µ –æ—Ç–≤–µ—Ç—ã
            val badResponses = listOf("there", "unclear", "cannot", "unable", "sorry", "difficult", "hard to see")
            val hasBadResponse = badResponses.any { badWord -> text.contains(badWord) }
            
            if (hasBadResponse || text.length < 3) {
                Log.w(TAG, "‚ùå Gemini –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ –∏–ª–∏ –¥–∞–ª –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ—Ç–≤–µ—Ç: '$text'")
                return null
            }
            
            Log.d(TAG, "üìù –û—Ç–≤–µ—Ç Gemini: '$text'")
            
            // üöÄ –†–ê–°–®–ò–†–ï–ù–ù–´–ô –ü–ê–†–°–ò–ù–ì - –ù–ï–°–ö–û–õ–¨–ö–û –§–û–†–ú–ê–¢–û–í
            // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: X:Y, X Y, left X right Y, X-Y –∏ —Ç.–¥.
            val patterns = listOf(
                Regex("(\\d+):(\\d+)"),                           // 3:5
                Regex("(\\d+)\\s+(\\d+)"),                        // 3 5  
                Regex("left\\s*(\\d+).*right\\s*(\\d+)"),         // left 3 right 5
                Regex("(\\d+)\\s*-\\s*(\\d+)"),                   // 3-5
                Regex("(\\d+)\\s*,\\s*(\\d+)"),                   // 3,5
                Regex("(\\d+)\\s*\\|\\s*(\\d+)"),                 // 3|5
                Regex("first\\s*(\\d+).*second\\s*(\\d+)"),       // first 3 second 5
                Regex("(\\d+)\\s*and\\s*(\\d+)"),                 // 3 and 5
                Regex("(\\d+)\\s*/\\s*(\\d+)")                    // 3/5
            )
            
            var leftDots: Int? = null
            var rightDots: Int? = null
            var foundPattern = ""
            
            for ((index, pattern) in patterns.withIndex()) {
                val matchResult = pattern.find(text)
                if (matchResult != null) {
                    leftDots = matchResult.groupValues[1].toInt()
                    rightDots = matchResult.groupValues[2].toInt()
                    foundPattern = "–ü–∞—Ç—Ç–µ—Ä–Ω ${index + 1}: ${pattern.pattern}"
                    Log.d(TAG, "üîç –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ ($foundPattern): $leftDots:$rightDots")
                    break
                }
            }
            
            if (leftDots != null && rightDots != null) {
                if (leftDots in 1..6 && rightDots in 1..6) {
                    Log.d(TAG, "‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª–∏ ($foundPattern): $leftDots:$rightDots")
                    return DiceResult(leftDots, rightDots, 0.9f)
                } else {
                    Log.w(TAG, "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫: $leftDots:$rightDots (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 1-6)")
                }
            } else {
                Log.w(TAG, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω –≤ –æ—Ç–≤–µ—Ç–µ: '$text'")
                Log.w(TAG, "üîç –ü–æ–ø—Ä–æ–±–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã:")
                patterns.forEachIndexed { index, pattern ->
                    Log.w(TAG, "   ${index + 1}. ${pattern.pattern}")
                }
            }
            
            Log.w(TAG, "‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è –¥–ª—è —Ç–µ–∫—Å—Ç–∞: '$text'")
            null
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ Gemini: ${e.message}", e)
            null
        }
    }
    
    /**
     * üöÄ –ì–ï–ù–ï–†–ò–†–£–ï–¢ –•–≠–® –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø –î–õ–Ø –ö–≠–®–ê
     */
    private fun getImageHash(bitmap: Bitmap): String {
        return try {
            val stream = ByteArrayOutputStream()
            bitmap.compress(Bitmap.CompressFormat.PNG, 100, stream)  // PNG –¥–ª—è —Ö—ç—à–∞
            val bytes = stream.toByteArray()
            val digest = MessageDigest.getInstance("MD5")
            val hash = digest.digest(bytes)
            hash.joinToString("") { "%02x".format(it) }
        } catch (e: Exception) {
            Log.w(TAG, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö—ç—à–∞: ${e.message}")
            bitmap.hashCode().toString() // –§–æ–ª–±—ç–∫ –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π hashCode
        }
    }
    
    /**
     * üöÄ –î–û–ë–ê–í–õ–Ø–ï–¢ –†–ï–ó–£–õ–¨–¢–ê–¢ –í –ö–≠–®
     */
    private fun addToCache(imageHash: String, result: DiceResult) {
        try {
            if (resultCache.size >= MAX_CACHE_SIZE) {
                // –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π —ç–ª–µ–º–µ–Ω—Ç (–ø—Ä–æ—Å—Ç–∞—è LRU –∏–º–∏—Ç–∞—Ü–∏—è)
                val oldestKey = resultCache.keys.first()
                resultCache.remove(oldestKey)
            }
            resultCache[imageHash] = result
            Log.d(TAG, "üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫—ç—à: $imageHash -> ${result.redDots}:${result.orangeDots}")
        } catch (e: Exception) {
            Log.w(TAG, "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫—ç—à: ${e.message}")
        }
    }
}
