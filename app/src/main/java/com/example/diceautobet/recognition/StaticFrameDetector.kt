package com.example.diceautobet.recognition

import android.graphics.Bitmap
import android.graphics.Color
import android.util.Log
import java.security.MessageDigest

/**
 * üõ°Ô∏è –î–µ—Ç–µ–∫—Ç–æ—Ä —Å—Ç–∞—Ç–∏—á–Ω—ã—Ö –∫–∞–¥—Ä–æ–≤ –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ–≤–µ—Ä–ª–µ–µ–≤
 * 
 * –ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏:
 * - –°—Ç–∞—Ç–∏—á–Ω—ã—Ö –Ω–∞–¥–ø–∏—Å–µ–π ("–û–ñ–ò–î–ê–ù–ò–ï –ü–ê–†–¢–ò–ò")
 * - –ó–∞–≤–∏—Å–∞–Ω–∏–π –Ω–∞ –æ–¥–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
 * - –¢–µ–∫—Å—Ç–æ–≤—ã—Ö –æ–≤–µ—Ä–ª–µ–µ–≤
 * 
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –º–µ—Ç–æ–¥–æ–≤:
 * 1. –ê–Ω–∞–ª–∏–∑ —è—Ä–∫–æ—Å—Ç–∏ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ (–¥–µ—Ç–µ–∫—Ü–∏—è –±–µ–ª–æ–≥–æ —Ç–µ–∫—Å—Ç–∞)
 * 2. MD5 —Ö—ç—à + —Ç–∞–π–º–∞—É—Ç (–¥–µ—Ç–µ–∫—Ü–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏—è –Ω–∞ –æ–¥–Ω–æ–º –∫–∞–¥—Ä–µ)
 */
object StaticFrameDetector {
    private const val TAG = "StaticFrameDetector"
    
    // üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏
    private const val BRIGHT_THRESHOLD = 200 // –ü–æ—Ä–æ–≥ —è—Ä–∫–æ—Å—Ç–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ (0-255)
    private const val BRIGHT_PERCENTAGE_THRESHOLD = 20 // % —è—Ä–∫–∏—Ö –ø–∏–∫—Å–µ–ª–µ–π (—Ä–µ–∞–ª—å–Ω–æ 15.5% –¥–ª—è "–û–ñ–ò–î–ê–ù–ò–ï –ü–ê–†–¢–ò–ò")
    private const val STATIC_IMAGE_TIMEOUT = 3000L // 3 —Å–µ–∫—É–Ω–¥—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    
    // üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –∑–∞–≤–∏—Å–∞–Ω–∏–π
    private var lastStableHash: String? = null
    private var lastStableTime: Long = 0
    
    /**
     * üîç –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–∞–¥—Ä
     * 
     * @param bitmap –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
     * @param checkTextOverlay –ü—Ä–æ–≤–µ—Ä—è—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ–≤–µ—Ä–ª–µ–∏ (true –¥–ª—è –æ–±–ª–∞—Å—Ç–∏ –∫—É–±–∏–∫–æ–≤, false –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞)
     */
    fun shouldSkipFrame(bitmap: Bitmap, checkTextOverlay: Boolean = true): Boolean {
        Log.v(TAG, "üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–¥—Ä–∞ ${bitmap.width}x${bitmap.height}, checkText=$checkTextOverlay")
        
        // 1Ô∏è‚É£ –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ–≤–µ—Ä–ª–µ–π?
        // –¢–æ–ª—å–∫–æ –¥–ª—è –≤—ã—Ä–µ–∑–∞–Ω–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π (–¥–≤–æ–π–Ω–æ–π —Ä–µ–∂–∏–º)
        if (checkTextOverlay) {
            val isTextOverlay = isLikelyTextOverlay(bitmap)
            Log.v(TAG, "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞: $isTextOverlay")
            if (isTextOverlay) {
                Log.d(TAG, "‚è≠Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ–≤–µ—Ä–ª–µ–π (—è—Ä–∫–∞—è –æ–±–ª–∞—Å—Ç—å)")
                return true
            }
        }
        
        // 2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞: –∑–∞—Å—Ç—Ä—è–ª–∏ –Ω–∞ –æ–¥–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏?
        // –†–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –≤—Å–µ—Ö —Ä–µ–∂–∏–º–æ–≤
        val imageHash = getImageHash(bitmap)
        if (isStuckOnStaticImage(imageHash)) {
            Log.d(TAG, "‚è≠Ô∏è –ó–∞—Å—Ç—Ä—è–ª–∏ –Ω–∞ —Å—Ç–∞—Ç–∏—á–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ >3 —Å–µ–∫")
            return true
        }
        
        Log.v(TAG, "‚úÖ –ö–∞–¥—Ä –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É")
        return false
    }
    
    /**
     * üîç –î–µ—Ç–µ–∫—Ç–∏—Ä—É–µ—Ç —è—Ä–∫–∏–µ –æ–±–ª–∞—Å—Ç–∏ (–≤–µ—Ä–æ—è—Ç–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ–≤–µ—Ä–ª–µ–π)
     * 
     * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
     * —è—Ä–∫–∏—Ö –ø–∏–∫—Å–µ–ª–µ–π. –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —Ç–µ–º–Ω–æ–º —Ñ–æ–Ω–µ –¥–∞—Å—Ç –≤—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —è—Ä–∫–æ—Å—Ç–∏.
     */
    private fun isLikelyTextOverlay(bitmap: Bitmap): Boolean {
        return try {
            val centerX = bitmap.width / 2
            val centerY = bitmap.height / 2
            
            // –†–∞–∑–º–µ—Ä –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–∫–≤–∞–¥—Ä–∞—Ç –≤–æ–∫—Ä—É–≥ —Ü–µ–Ω—Ç—Ä–∞)
            val sampleSize = 100.coerceAtMost(bitmap.width / 4).coerceAtMost(bitmap.height / 4)
            
            var brightPixels = 0
            var totalPixels = 0
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å
            val startX = (centerX - sampleSize).coerceAtLeast(0)
            val endX = (centerX + sampleSize).coerceAtMost(bitmap.width)
            val startY = (centerY - sampleSize).coerceAtLeast(0)
            val endY = (centerY + sampleSize).coerceAtMost(bitmap.height)
            
            for (x in startX until endX) {
                for (y in startY until endY) {
                    val pixel = bitmap.getPixel(x, y)
                    
                    // –í—ã—á–∏—Å–ª—è–µ–º —è—Ä–∫–æ—Å—Ç—å –ø–∏–∫—Å–µ–ª—è (—Å—Ä–µ–¥–Ω–µ–µ RGB)
                    val brightness = (Color.red(pixel) + Color.green(pixel) + Color.blue(pixel)) / 3
                    
                    if (brightness > BRIGHT_THRESHOLD) {
                        brightPixels++
                    }
                    totalPixels++
                }
            }
            
            if (totalPixels == 0) {
                Log.w(TAG, "‚ö†Ô∏è –ù—É–ª–µ–≤–æ–π —Ä–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏")
                return false
            }
            
            val brightPercentage = (brightPixels * 100f) / totalPixels
            
            // –í–°–ï–ì–î–ê –ª–æ–≥–∏—Ä—É–µ–º —è—Ä–∫–æ—Å—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            Log.v(TAG, "üîç –Ø—Ä–∫–∞—è –æ–±–ª–∞—Å—Ç—å: ${String.format("%.1f", brightPercentage)}% (–ø–æ—Ä–æ–≥: $BRIGHT_PERCENTAGE_THRESHOLD%)")
            
            if (brightPercentage > BRIGHT_PERCENTAGE_THRESHOLD) {
                return true
            }
            
            false
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ –æ–≤–µ—Ä–ª–µ—è: ${e.message}")
            false
        }
    }
    
    /**
     * ‚è±Ô∏è –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞—Å—Ç—Ä—è–ª–∏ –ª–∏ –º—ã –Ω–∞ –æ–¥–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
     * 
     * –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ö—ç—à —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º. –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è
     * –±–æ–ª—å—à–µ STATIC_IMAGE_TIMEOUT –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ - —Å—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—á–Ω—ã–º.
     */
    private fun isStuckOnStaticImage(currentHash: String): Boolean {
        val now = System.currentTimeMillis()
        
        if (currentHash == lastStableHash) {
            // –•—ç—à –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è
            val stuckDuration = now - lastStableTime
            
            if (stuckDuration > STATIC_IMAGE_TIMEOUT) {
                Log.v(TAG, "‚è∏Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è ${stuckDuration}–º—Å (–ø–æ—Ä–æ–≥: ${STATIC_IMAGE_TIMEOUT}–º—Å)")
                return true
            }
        } else {
            // –ù–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            lastStableHash = currentHash
            lastStableTime = now
        }
        
        return false
    }
    
    /**
     * üîê –í—ã—á–∏—Å–ª—è–µ—Ç –±—ã—Å—Ç—Ä—ã–π MD5 —Ö—ç—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     * 
     * –î–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –∫–∞–∂–¥—ã–π 10-–π –ø–∏–∫—Å–µ–ª—å (sample).
     * –≠—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
     */
    private fun getImageHash(bitmap: Bitmap): String {
        return try {
            // –ë–µ—Ä–µ–º –∫–∞–∂–¥—ã–π 10-–π –ø–∏–∫—Å–µ–ª—å –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
            val sampleWidth = (bitmap.width / 10).coerceAtLeast(1)
            val sampleHeight = (bitmap.height / 10).coerceAtLeast(1)
            
            val digest = MessageDigest.getInstance("MD5")
            
            for (y in 0 until sampleHeight) {
                for (x in 0 until sampleWidth) {
                    val actualX = (x * 10).coerceAtMost(bitmap.width - 1)
                    val actualY = (y * 10).coerceAtMost(bitmap.height - 1)
                    val pixel = bitmap.getPixel(actualX, actualY)
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –ø–∏–∫—Å–µ–ª—å –≤ —Ö—ç—à
                    digest.update((pixel shr 24 and 0xFF).toByte()) // Alpha
                    digest.update((pixel shr 16 and 0xFF).toByte()) // Red
                    digest.update((pixel shr 8 and 0xFF).toByte())  // Green
                    digest.update((pixel and 0xFF).toByte())         // Blue
                }
            }
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ö—ç—à –≤ hex —Ñ–æ—Ä–º–∞—Ç–µ
            digest.digest().joinToString("") { "%02x".format(it) }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ö—ç—à–∞: ${e.message}")
            // Fallback - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º timestamp –∫–∞–∫ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            System.currentTimeMillis().toString()
        }
    }
    
    /**
     * üîÑ –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
     * 
     * –í—ã–∑—ã–≤–∞–π—Ç–µ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –º–µ–∂–¥—É —ç–∫—Ä–∞–Ω–∞–º–∏ –∏–ª–∏ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞ –∏–≥—Ä—ã
     */
    fun reset() {
        lastStableHash = null
        lastStableTime = 0
        Log.d(TAG, "üîÑ –î–µ—Ç–µ–∫—Ç–æ—Ä —Å–±—Ä–æ—à–µ–Ω")
    }
    
    /**
     * üìä –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
     */
    fun getStats(): String {
        val timeSinceLastChange = if (lastStableHash != null) {
            System.currentTimeMillis() - lastStableTime
        } else {
            0
        }
        
        return "StaticFrameDetector: hash=${lastStableHash?.take(8)}, stable=${timeSinceLastChange}ms"
    }
}
