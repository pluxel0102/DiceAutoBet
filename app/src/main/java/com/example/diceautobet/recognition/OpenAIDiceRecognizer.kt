package com.example.diceautobet.recognition

import android.graphics.Bitmap
import android.util.Base64
import android.util.Log
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import org.json.JSONArray
import org.json.JSONObject
import java.io.ByteArrayOutputStream
import com.example.diceautobet.utils.ProxyManager
import okhttp3.*
import okhttp3.MediaType.Companion.toMediaType
import okhttp3.RequestBody.Companion.toRequestBody

/**
 * –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∫—É–±–∏–∫–æ–≤ —Å –ø–æ–º–æ—â—å—é OpenAI Vision API
 */
class OpenAIDiceRecognizer(private val apiKey: String) {

    companion object {
        private const val TAG = "OpenAIDiceRecognizer"
        private const val OPENAI_API_URL = "https://api.openai.com/v1/chat/completions"
        private const val MODEL = "gpt-4o" // –ú–æ–¥–µ–ª—å —Å vision
        private const val MAX_TOKENS = 50
        private const val JPEG_QUALITY = 85
    }

    data class DiceResult(
        val redDots: Int,
        val orangeDots: Int,
        val confidence: Float = 1.0f,
        val rawResponse: String = ""
    )

    /**
     * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫—É–±–∏–∫–æ–≤ —á–µ—Ä–µ–∑ OpenAI API
     */
    suspend fun analyzeDice(bitmap: Bitmap): DiceResult? {
        return withContext(Dispatchers.IO) {
            try {
                Log.d(TAG, "ü§ñ –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∫—É–±–∏–∫–æ–≤ —á–µ—Ä–µ–∑ OpenAI...")
                Log.d(TAG, "üìä –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${bitmap.width}x${bitmap.height}")
                
                // –ü—Ä–æ–≤–µ—Ä–∏–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                Log.d(TAG, "üåê –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...")
                
                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º bitmap –≤ base64
                val base64Image = bitmapToBase64(bitmap)
                if (base64Image == null) {
                    Log.e(TAG, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64")
                    return@withContext null
                }
                
                Log.d(TAG, "üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ base64 (—Ä–∞–∑–º–µ—Ä: ${base64Image.length} —Å–∏–º–≤–æ–ª–æ–≤)")
                
                // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI
                val requestBody = createRequestBody(base64Image)
                Log.d(TAG, "üìù JSON –∑–∞–ø—Ä–æ—Å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω (—Ä–∞–∑–º–µ—Ä: ${requestBody.length} —Å–∏–º–≤–æ–ª–æ–≤)")
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
                Log.d(TAG, "üåê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º HTTP –∑–∞–ø—Ä–æ—Å –∫ OpenAI API...")
                val response = sendApiRequest(requestBody)
                if (response == null) {
                    Log.e(TAG, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç OpenAI API")
                    return@withContext null
                }
                
                Log.d(TAG, "üì® –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç OpenAI (—Ä–∞–∑–º–µ—Ä: ${response.length} —Å–∏–º–≤–æ–ª–æ–≤)")
                
                // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
                val result = parseResponse(response)
                if (result != null) {
                    Log.d(TAG, "‚úÖ OpenAI —Ä–µ–∑—É–ª—å—Ç–∞—Ç: red=${result.redDots}, orange=${result.orangeDots}, confidence=${result.confidence}")
                } else {
                    Log.e(TAG, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç OpenAI")
                }
                
                result
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —á–µ—Ä–µ–∑ OpenAI: ${e.message}", e)
                null
            }
        }
    }

    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç Bitmap –≤ base64 —Å—Ç—Ä–æ–∫—É
     */
    private fun bitmapToBase64(bitmap: Bitmap): String? {
        return try {
            val outputStream = ByteArrayOutputStream()
            bitmap.compress(Bitmap.CompressFormat.JPEG, JPEG_QUALITY, outputStream)
            val byteArray = outputStream.toByteArray()
            Base64.encodeToString(byteArray, Base64.NO_WRAP)
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ bitmap –≤ base64: ${e.message}")
            null
        }
    }

    /**
     * –§–æ—Ä–º–∏—Ä—É–µ—Ç JSON –∑–∞–ø—Ä–æ—Å –¥–ª—è OpenAI API
     */
    private fun createRequestBody(base64Image: String): String {
        val requestJson = JSONObject().apply {
            put("model", MODEL)
            put("max_tokens", MAX_TOKENS)
            put("messages", JSONArray().apply {
                put(JSONObject().apply {
                    put("role", "user")
                    put("content", JSONArray().apply {
                        put(JSONObject().apply {
                            put("type", "text")
                            put("text", """
                                Analyze this dice image. I see two dice - one RED on the left and one ORANGE on the right.
                                Count the dots on each die and respond ONLY in this exact format: red{number}:orange{number}
                                For example: red3:orange5 or red1:orange6
                                Count carefully - each die shows 1 to 6 dots.
                            """.trimIndent())
                        })
                        put(JSONObject().apply {
                            put("type", "image_url")
                            put("image_url", JSONObject().apply {
                                put("url", "data:image/jpeg;base64,$base64Image")
                                put("detail", "low") // –≠–∫–æ–Ω–æ–º–∏–º —Ç–æ–∫–µ–Ω—ã
                            })
                        })
                    })
                })
            })
        }
        return requestJson.toString()
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ OpenAI API —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
     */
    private fun sendApiRequest(requestBody: String): String? {
        return try {
            Log.d(TAG, "üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ OpenAI API —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏: $OPENAI_API_URL")
            
            val client = ProxyManager.getHttpClient()
            val mediaType = "application/json; charset=utf-8".toMediaType()
            val requestBodyObj = requestBody.toRequestBody(mediaType)
            
            val request = Request.Builder()
                .url(OPENAI_API_URL)
                .post(requestBodyObj)
                .addHeader("Content-Type", "application/json")
                .addHeader("Authorization", "Bearer $apiKey")
                .build()
            
            Log.d(TAG, "üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ (—Ä–∞–∑–º–µ—Ä: ${requestBody.length} –±–∞–π—Ç)...")
            
            client.newCall(request).execute().use { response ->
                val responseCode = response.code
                Log.d(TAG, "üì® OpenAI API response code: $responseCode")
                
                if (response.isSuccessful) {
                    val responseBody = response.body?.string() ?: ""
                    Log.d(TAG, "‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ (—Ä–∞–∑–º–µ—Ä: ${responseBody.length} —Å–∏–º–≤–æ–ª–æ–≤)")
                    responseBody
                } else if (responseCode == 429) {
                    val errorBody = response.body?.string() ?: ""
                    Log.e(TAG, "üí∏ –ö–í–û–¢–ê OPENAI –ü–†–ï–í–´–®–ï–ù–ê! HTTP 429")
                    Log.e(TAG, "üí° –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ https://platform.openai.com/account/billing")
                    Log.e(TAG, "üí° –ò–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ —Ä–µ–∂–∏–º OpenCV –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
                    Log.e(TAG, "‚ùå Error details: $errorBody")
                    null
                } else {
                    val errorBody = response.body?.string() ?: ""
                    Log.e(TAG, "‚ùå OpenAI API error: $responseCode")
                    Log.e(TAG, "‚ùå HTTP Status: ${response.message}")
                    Log.e(TAG, "‚ùå Error details: $errorBody")
                    Log.e(TAG, "‚ùå Request URL: ${request.url}")
                    Log.e(TAG, "‚ùå Request headers: Authorization=Bearer ${apiKey.take(10)}..., Content-Type=${request.header("Content-Type")}")
                    null
                }
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏: ${e.message}", e)
            Log.e(TAG, "‚ùå Exception class: ${e.javaClass.simpleName}")
            if (e.cause != null) {
                Log.e(TAG, "‚ùå Caused by: ${e.cause?.message}")
            }
            null
        }
    }

    /**
     * –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç –æ—Ç OpenAI API
     */
    private fun parseResponse(response: String): DiceResult? {
        return try {
            val jsonResponse = JSONObject(response)
            val choices = jsonResponse.getJSONArray("choices")
            if (choices.length() == 0) {
                Log.e(TAG, "OpenAI –æ—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç choices")
                return null
            }
            
            val message = choices.getJSONObject(0).getJSONObject("message")
            val content = message.getString("content").trim()
            
            Log.d(TAG, "OpenAI –æ—Ç–≤–µ—Ç: '$content'")
            
            // –ü–∞—Ä—Å–∏–º —Ñ–æ—Ä–º–∞—Ç "red3:orange5"
            val regex = Regex("red(\\d):orange(\\d)")
            val matchResult = regex.find(content)
            
            if (matchResult != null) {
                val redDots = matchResult.groupValues[1].toInt()
                val orangeDots = matchResult.groupValues[2].toInt()
                
                // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                if (redDots in 1..6 && orangeDots in 1..6) {
                    DiceResult(
                        redDots = redDots,
                        orangeDots = orangeDots,
                        confidence = 1.0f, // OpenAI –≤—Å–µ–≥–¥–∞ —É–≤–µ—Ä–µ–Ω
                        rawResponse = content
                    )
                } else {
                    Log.e(TAG, "–ù–µ–≤–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫—É–±–∏–∫–æ–≤: red=$redDots, orange=$orangeDots")
                    null
                }
            } else {
                Log.e(TAG, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç OpenAI: '$content'")
                null
            }
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ OpenAI: ${e.message}", e)
            null
        }
    }
}
