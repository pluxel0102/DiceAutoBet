package com.example.diceautobet.services

import android.app.Notification
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.Service
import android.content.BroadcastReceiver
import android.content.ComponentName
import android.content.Context
import android.content.Intent
import android.content.IntentFilter
import android.content.ServiceConnection
import android.content.pm.ServiceInfo
import android.graphics.PixelFormat
import android.os.Build
import android.os.Handler
import android.os.IBinder
import android.os.Looper
import android.util.Log
import android.view.*
import android.widget.Button
import android.widget.TextView
import android.widget.Toast
import androidx.core.app.NotificationCompat
import com.example.diceautobet.R
import com.example.diceautobet.MediaProjectionRequestActivity
import com.example.diceautobet.utils.PreferencesManager
import com.example.diceautobet.managers.MediaProjectionPermissionManager
import com.example.diceautobet.logging.DiagnosticLogger

class DualModeFloatingControlService : Service() {

    companion object {
        private const val TAG = "DualFloatingControl"
        private const val NOTIFICATION_ID = 9001
        private const val CHANNEL_ID = "dual_mode_floating_channel"
    }

    private var overlayView: View? = null
    private var windowManager: WindowManager? = null
    private var layoutParams: WindowManager.LayoutParams? = null
    private var statusTextView: TextView? = null // –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ TextView —Å—Ç–∞—Ç—É—Å–∞
    
    private var dualModeService: DualModeService? = null
    private var bound = false
    private lateinit var preferencesManager: PreferencesManager
    private lateinit var diagnosticLogger: DiagnosticLogger
    private var pendingStart = false // –§–ª–∞–≥, —á—Ç–æ –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    
    private val uiHandler = Handler(Looper.getMainLooper())

    // BroadcastReceiver –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    private val permissionReceiver = object : BroadcastReceiver() {
        override fun onReceive(context: Context?, intent: Intent?) {
            if (intent?.action == "com.example.diceautobet.PERMISSION_GRANTED") {
                val serviceType = intent.getStringExtra("service_type")
                if (serviceType == "dual_mode" && pendingStart) {
                    Log.d(TAG, "‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ –Ω–∞ –∑–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞")
                    pendingStart = false // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ
                    uiHandler.post {
                        Toast.makeText(this@DualModeFloatingControlService, 
                            "‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –¥–≤–æ–π–Ω–æ–π —Ä–µ–∂–∏–º", 
                            Toast.LENGTH_SHORT).show()
                    }
                    
                    Log.d(TAG, "üéØ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ. –û–∂–∏–¥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞")
                }
            }
        }
    }

    private val connection = object : ServiceConnection {
        override fun onServiceConnected(className: ComponentName, service: IBinder) {
            val binder = service as DualModeService.LocalBinder
            dualModeService = binder.getService()
            bound = true
            Log.d(TAG, "‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ DualModeService")
        }

        override fun onServiceDisconnected(className: ComponentName) {
            dualModeService = null
            bound = false
            Log.d(TAG, "‚ùå –û—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç DualModeService")
        }
    }

    override fun onCreate() {
        super.onCreate()
        Log.d(TAG, "üé® –°–æ–∑–¥–∞–Ω–∏–µ DualModeFloatingControlService")
        createNotificationChannel()
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º PreferencesManager
        preferencesManager = PreferencesManager(this)
        diagnosticLogger = DiagnosticLogger(this)
        
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º BroadcastReceiver –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏
        val filter = IntentFilter("com.example.diceautobet.PERMISSION_GRANTED")
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.UPSIDE_DOWN_CAKE) {
            registerReceiver(permissionReceiver, filter, Context.RECEIVER_NOT_EXPORTED)
        } else {
            registerReceiver(permissionReceiver, filter)
        }
        
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ DualModeService
        val intent = Intent(this, DualModeService::class.java)
        bindService(intent, connection, Context.BIND_AUTO_CREATE)
    }

    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
        Log.d(TAG, "üì± –ó–∞–ø—É—Å–∫ –ø–ª–∞–≤–∞—é—â–µ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        
        showFloatingControl()
        
        // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        val notification = createForegroundNotification()
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.UPSIDE_DOWN_CAKE) {
            startForeground(NOTIFICATION_ID, notification, ServiceInfo.FOREGROUND_SERVICE_TYPE_DATA_SYNC)
        } else {
            startForeground(NOTIFICATION_ID, notification)
        }
        
        return START_STICKY
    }

    private fun showFloatingControl() {
        if (overlayView != null) {
            Log.d(TAG, "‚ö†Ô∏è –ü–ª–∞–≤–∞—é—â–µ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–∂–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è")
            return
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ overlay
        if (!android.provider.Settings.canDrawOverlays(this)) {
            Log.e(TAG, "‚ùå –ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–≤–µ—Ä—Ö –¥—Ä—É–≥–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π")
            Toast.makeText(this, "–ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–≤–µ—Ä—Ö –¥—Ä—É–≥–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π", Toast.LENGTH_LONG).show()
            stopSelf()
            return
        }

        windowManager = getSystemService(WINDOW_SERVICE) as WindowManager
        overlayView = createFloatingView()

        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–∫–Ω–∞
        val windowType = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY
        } else {
            @Suppress("DEPRECATION")
            WindowManager.LayoutParams.TYPE_PHONE
        }

        layoutParams = WindowManager.LayoutParams(
            WindowManager.LayoutParams.WRAP_CONTENT,
            WindowManager.LayoutParams.WRAP_CONTENT,
            windowType,
            WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE,
            PixelFormat.TRANSLUCENT
        ).apply {
            gravity = Gravity.TOP or Gravity.START
            x = 100
            y = 100
        }

        try {
            windowManager?.addView(overlayView, layoutParams)
            Log.d(TAG, "‚úÖ –ü–ª–∞–≤–∞—é—â–µ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ")
            Toast.makeText(this, "–ü–ª–∞–≤–∞—é—â–µ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ", Toast.LENGTH_SHORT).show()
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–ª–∞–≤–∞—é—â–µ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${e.message}")
            when {
                e.message?.contains("permission") == true -> {
                    Toast.makeText(this, "–û—à–∏–±–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è –ø–ª–∞–≤–∞—é—â–µ–≥–æ –æ–∫–Ω–∞", Toast.LENGTH_LONG).show()
                }
                e.message?.contains("BadTokenException") == true -> {
                    Toast.makeText(this, "–û—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–∞ –æ–∫–Ω–∞ (–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ)", Toast.LENGTH_LONG).show()
                }
                else -> {
                    Toast.makeText(this, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–≤–∞—é—â–µ–≥–æ –æ–∫–Ω–∞: ${e.message}", Toast.LENGTH_LONG).show()
                }
            }
            stopSelf()
        }
    }

    private fun createFloatingView(): View {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º XML layout –≤–º–µ—Å—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è UI
        val inflater = LayoutInflater.from(this)
        val container = inflater.inflate(R.layout.layout_floating_dual_control_main, null)
        
        // –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫–∏ –∏ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ layout
        val startButton = container.findViewById<Button>(R.id.btnStart)
        val stopButton = container.findViewById<Button>(R.id.btnStop)
        val hideButton = container.findViewById<Button>(R.id.btnHide)
        val logsButton = container.findViewById<Button>(R.id.btnLogs)
        statusTextView = container.findViewById<TextView>(R.id.textStatus) // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º TextView —Å—Ç–∞—Ç—É—Å–∞
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        updateStatusReady()
        
        // –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        startButton.setOnClickListener { onStartClicked() }
        stopButton.setOnClickListener { onStopClicked() }
        hideButton.setOnClickListener { onHideClicked() }
        logsButton.setOnClickListener { onLogsClicked() }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –¥–ª—è –≤—Å–µ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        var initialX = 0
        var initialY = 0
        var initialTouchX = 0f
        var initialTouchY = 0f
        
        container.setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    initialX = layoutParams?.x ?: 0
                    initialY = layoutParams?.y ?: 0
                    initialTouchX = event.rawX
                    initialTouchY = event.rawY
                    true
                }
                MotionEvent.ACTION_MOVE -> {
                    layoutParams?.x = initialX + (event.rawX - initialTouchX).toInt()
                    layoutParams?.y = initialY + (event.rawY - initialTouchY).toInt()
                    windowManager?.updateViewLayout(overlayView, layoutParams)
                    true
                }
                else -> false
            }
        }
        
        return container
    }

    private fun onStartClicked() {
        Log.d(TAG, "üéØ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞")
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
        diagnosticLogger.logStartButtonClick()
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∑–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞ (—á–µ—Ä–µ–∑ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä)
        val mpManager = MediaProjectionPermissionManager.getInstance(this)
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
        Log.d(TAG, "üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π...")
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        val hasManagerPermission = mpManager.hasPermission()
        val tokenStoreHasData = com.example.diceautobet.utils.MediaProjectionTokenStore.get() != null
        
        Log.d(TAG, "üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞:")
        Log.d(TAG, "   Manager hasPermission: $hasManagerPermission")
        Log.d(TAG, "   TokenStore hasData: $tokenStoreHasData")
        
        val hasValidPermission = hasManagerPermission && tokenStoreHasData
        Log.d(TAG, "‚úÖ –ò—Ç–æ–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ - —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ: $hasValidPermission")
        
        // –ù–∞ Android 15+ –≤–æ–∑–º–æ–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        if (mpManager.shouldRerequestPermission()) {
            Log.d(TAG, "‚ö†Ô∏è Android 15+ —Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è")
            Toast.makeText(this, "Android 15+ —Ç—Ä–µ–±—É–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è", Toast.LENGTH_LONG).show()
            requestPermissionForAndroid15()
            return
        }
        
        if (!hasValidPermission) {
            Log.d(TAG, "üîë –ù–µ—Ç –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∑–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º")
            
            if (!hasManagerPermission) {
                Log.d(TAG, "‚ùå –ü—Ä–∏—á–∏–Ω–∞: MediaProjectionPermissionManager.hasPermission() = false")
            }
            if (!tokenStoreHasData) {
                Log.d(TAG, "‚ùå –ü—Ä–∏—á–∏–Ω–∞: MediaProjectionTokenStore –ø—É—Å—Ç–æ–π (–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—ã–ª–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ?)")
            }
            
            diagnosticLogger.logFullDiagnostic() // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
            pendingStart = true // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
            requestMediaProjectionPermission()
        } else {
            // –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –µ—Å—Ç—å, –∑–∞–ø—É—Å–∫–∞–µ–º –¥–≤–æ–π–Ω–æ–π —Ä–µ–∂–∏–º —Å—Ä–∞–∑—É
            Log.d(TAG, "‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ, –∑–∞–ø—É—Å–∫–∞–µ–º —Å—Ä–∞–∑—É")
            startDualModeDirectly()
        }
    }
    
    private fun requestPermissionForAndroid15() {
        Log.d(TAG, "üì± –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è Android 15+")
        pendingStart = true
        
        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        val mpManager = MediaProjectionPermissionManager.getInstance(this)
        mpManager.clearPermission()
        
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ
        requestMediaProjectionPermission()
    }
    
    private fun requestMediaProjectionPermission() {
        try {
            val intent = Intent(this, MediaProjectionRequestActivity::class.java)
            intent.putExtra(MediaProjectionRequestActivity.EXTRA_TARGET_SERVICE, MediaProjectionRequestActivity.SERVICE_DUAL_MODE)
            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
            startActivity(intent)
            Toast.makeText(this, "üîë –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –∑–µ–ª–µ–Ω—É—é –∫–Ω–æ–ø–∫—É —Å–Ω–æ–≤–∞", Toast.LENGTH_LONG).show()
            Log.d(TAG, "üîë –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: ${e.message}")
            Toast.makeText(this, "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: ${e.message}", Toast.LENGTH_SHORT).show()
            pendingStart = false
        }
    }

    private fun startDualModeDirectly() {
        Log.d(TAG, "üéØ –ü—Ä—è–º–æ–π –∑–∞–ø—É—Å–∫ –¥–≤–æ–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞")
        diagnosticLogger.logDualModeStart() // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∑–∞–ø—É—Å–∫–∞
        
        dualModeService?.let { service ->
            service.startDualMode()
            updateStatusRunning() // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–†–∞–±–æ—Ç–∞–µ—Ç"
            Log.d(TAG, "üéØ –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
            Toast.makeText(this, "–ó–∞–ø—É—Å–∫ –¥–≤–æ–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞...", Toast.LENGTH_SHORT).show()
        } ?: run {
            Log.e(TAG, "‚ùå DualModeService –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            Toast.makeText(this, "–°–µ—Ä–≤–∏—Å –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω", Toast.LENGTH_SHORT).show()
        }
    }

    private fun onStopClicked() {
        Log.d(TAG, "üõë –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        dualModeService?.let { service ->
            service.stopDualMode()
            updateStatusPaused() // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–ü–∞—É–∑–∞"
            Log.d(TAG, "üõë –ö–æ–º–∞–Ω–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        } ?: run {
            Log.e(TAG, "‚ùå DualModeService –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
        }
    }

    private fun onHideClicked() {
        Log.d(TAG, "üóï –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å–∫—Ä—ã—Ç–∏—è")
        stopSelf()
    }
    
    private fun onLogsClicked() {
        Log.d(TAG, "üìã –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ª–æ–≥–æ–≤")
        
        try {
            // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
            diagnosticLogger.logFullDiagnostic()
            
            // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            val exportedFile = diagnosticLogger.exportLogs()
            
            if (exportedFile != null) {
                // –°–æ–∑–¥–∞–µ–º Intent –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤
                val shareIntent = Intent(Intent.ACTION_SEND).apply {
                    type = "text/plain"
                    putExtra(Intent.EXTRA_SUBJECT, "Dice Auto Bet - –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –ª–æ–≥–∏")
                    putExtra(Intent.EXTRA_TEXT, "–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –§–∞–π–ª: ${exportedFile.name}")
                    putExtra(Intent.EXTRA_STREAM, androidx.core.content.FileProvider.getUriForFile(
                        this@DualModeFloatingControlService,
                        "${packageName}.fileprovider",
                        exportedFile
                    ))
                    addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION)
                    addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
                }
                
                val chooserIntent = Intent.createChooser(shareIntent, "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É")
                chooserIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
                startActivity(chooserIntent)
                
                Toast.makeText(this, "üìã –õ–æ–≥–∏ –≥–æ—Ç–æ–≤—ã –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.", Toast.LENGTH_LONG).show()
            } else {
                Toast.makeText(this, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–≥–æ–≤", Toast.LENGTH_SHORT).show()
            }
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–≥–æ–≤", e)
            Toast.makeText(this, "‚ùå –û—à–∏–±–∫–∞: ${e.message}", Toast.LENGTH_SHORT).show()
        }
    }

    private fun hideFloatingControl() {
        overlayView?.let { view ->
            windowManager?.removeView(view)
            overlayView = null
            Log.d(TAG, "üóï –ü–ª–∞–≤–∞—é—â–µ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫—Ä—ã—Ç–æ")
        }
    }

    private fun createNotificationChannel() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val channel = NotificationChannel(
                CHANNEL_ID,
                "–ü–ª–∞–≤–∞—é—â–µ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–æ–π–Ω—ã–º —Ä–µ–∂–∏–º–æ–º",
                NotificationManager.IMPORTANCE_LOW
            ).apply {
                description = "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–ª–∞–≤–∞—é—â–µ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–æ–π–Ω—ã–º —Ä–µ–∂–∏–º–æ–º"
            }

            val notificationManager = getSystemService(NotificationManager::class.java)
            notificationManager.createNotificationChannel(channel)
        }
    }

    private fun createForegroundNotification(): Notification {
        return NotificationCompat.Builder(this, CHANNEL_ID)
            .setContentTitle("–î–≤–æ–π–Ω–æ–π —Ä–µ–∂–∏–º")
            .setContentText("–ü–ª–∞–≤–∞—é—â–µ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ")
            .setSmallIcon(R.drawable.ic_launcher_foreground)
            .setPriority(NotificationCompat.PRIORITY_LOW)
            .setOngoing(true)
            .build()
    }
    
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    private fun updateStatus(status: String) {
        uiHandler.post {
            statusTextView?.text = status
            Log.d(TAG, "üìä –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: $status")
        }
    }
    
    private fun updateStatusReady() {
        updateStatus("–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É")
    }
    
    private fun updateStatusRunning() {
        updateStatus("–†–∞–±–æ—Ç–∞–µ—Ç")
    }
    
    private fun updateStatusPaused() {
        updateStatus("–ü–∞—É–∑–∞")
    }

    override fun onDestroy() {
        Log.d(TAG, "üßπ –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ DualModeFloatingControlService")
        
        // –û—Ç–º–µ–Ω—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é BroadcastReceiver
        try {
            unregisterReceiver(permissionReceiver)
        } catch (e: Exception) {
            Log.w(TAG, "BroadcastReceiver —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω: ${e.message}")
        }
        
        // –°–∫—Ä—ã–≤–∞–µ–º –ø–ª–∞–≤–∞—é—â–µ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        hideFloatingControl()
        
        // –û—Ç–≤—è–∑—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–µ—Ä–≤–∏—Å–∞
        if (bound) {
            unbindService(connection)
            bound = false
        }
        
        super.onDestroy()
        Log.d(TAG, "üßπ DualModeFloatingControlService —É–Ω–∏—á—Ç–æ–∂–µ–Ω")
    }

    override fun onBind(intent: Intent?): IBinder? {
        return null
    }
}
