package com.example.diceautobet.services

import android.app.Notification
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.Service
import android.content.Context
import android.content.Intent
import android.content.pm.ServiceInfo
import android.media.projection.MediaProjectionManager
import android.os.Binder
import android.os.Build
import android.os.IBinder
import android.util.Log
import androidx.core.app.NotificationCompat
import com.example.diceautobet.R
import com.example.diceautobet.controllers.SimpleDualModeController
import com.example.diceautobet.game.ClickManager
import com.example.diceautobet.managers.DualWindowAreaManager
import com.example.diceautobet.models.SimpleDualModeState
import com.example.diceautobet.utils.PreferencesManager

/**
 * –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–≤–æ–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
 */
class DualModeService : Service() {
    
    companion object {
        private const val TAG = "DualModeService"
        private const val NOTIFICATION_ID = 1
        private const val CHANNEL_ID = "DualModeServiceChannel"
    const val ACTION_START_FOREGROUND = "com.example.diceautobet.dual.START_FOREGROUND"
    const val ACTION_STOP_FOREGROUND = "com.example.diceautobet.dual.STOP_FOREGROUND"
    }
    
    private val binder = LocalBinder()
    private lateinit var preferencesManager: PreferencesManager
    private lateinit var controller: SimpleDualModeController
    
    inner class LocalBinder : Binder() {
        fun getService(): DualModeService = this@DualModeService
    }
    
    override fun onBind(intent: Intent): IBinder {
        return binder
    }
    
    override fun onCreate() {
        super.onCreate()
        Log.d(TAG, "–°–æ–∑–¥–∞–Ω–∏–µ DualModeService")
        
        preferencesManager = PreferencesManager(this)
        val clickManager = ClickManager(preferencesManager)
        val areaManager = DualWindowAreaManager(this)
        
        controller = SimpleDualModeController(
            context = this,
            clickManager = clickManager,
            preferencesManager = preferencesManager,
            areaManager = areaManager
        )
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        controller.onError = { errorMessage ->
            Log.e(TAG, "–û—à–∏–±–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞: $errorMessage")
        }
        
        createNotificationChannel()
    }
    
    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
        Log.d(TAG, "onStartCommand: action=${intent?.action}")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ MediaProjection
        val immediateStart = intent?.getBooleanExtra("immediate_start", false) ?: false
        val resultCode = intent?.getIntExtra("resultCode", -1) ?: -1
        val data = intent?.getParcelableExtra<Intent>("data")
        
        // –ö–†–ò–¢–ò–ß–ù–û: Foreground —Å—Ç–∞—Ç—É—Å –≤–∫–ª—é—á–∞–µ–º –°–†–ê–ó–£, –î–û —Å–æ–∑–¥–∞–Ω–∏—è MediaProjection
        when (intent?.action) {
            ACTION_START_FOREGROUND -> {
                val notification = createNotification()
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.UPSIDE_DOWN_CAKE) {
                    startForeground(NOTIFICATION_ID, notification, ServiceInfo.FOREGROUND_SERVICE_TYPE_MEDIA_PROJECTION or ServiceInfo.FOREGROUND_SERVICE_TYPE_DATA_SYNC)
                } else {
                    startForeground(NOTIFICATION_ID, notification)
                }
                Log.d(TAG, "‚úÖ Foreground service –∑–∞–ø—É—â–µ–Ω –¥–ª—è MediaProjection")
                
                // –¢–µ–ø–µ—Ä—å, –∫–æ–≥–¥–∞ foreground service –∞–∫—Ç–∏–≤–µ–Ω, –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å MediaProjection
                if (immediateStart) {
                    Log.d(TAG, "üö® –°–æ–∑–¥–∞–Ω–∏–µ MediaProjection –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ foreground: resultCode=$resultCode")
                    if (resultCode == android.app.Activity.RESULT_OK && data != null) {
                        Log.d(TAG, "‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ MediaProjection –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
                        
                        // –ö–†–ò–¢–ò–ß–ù–û: –°–æ–∑–¥–∞–µ–º MediaProjection –ü–û–°–õ–ï startForeground()
                        try {
                            Log.d(TAG, "üéØ –°–æ–∑–¥–∞–µ–º MediaProjection –≤–Ω—É—Ç—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ foreground service...")
                            val mediaProjectionManager = getSystemService(Context.MEDIA_PROJECTION_SERVICE) as MediaProjectionManager
                            val mediaProjection = mediaProjectionManager.getMediaProjection(resultCode, data)
                            
                            if (mediaProjection != null) {
                                Log.d(TAG, "‚úÖ MediaProjection —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤–Ω—É—Ç—Ä–∏ foreground service!")
                                
                                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä
                                val permissionManager = com.example.diceautobet.managers.MediaProjectionPermissionManager.getInstance(this)
                                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π MediaProjection –≤ –º–µ–Ω–µ–¥–∂–µ—Ä
                                permissionManager.setCachedMediaProjection(mediaProjection)
                                permissionManager.savePermission(resultCode, data)
                                
                                Log.d(TAG, "‚úÖ MediaProjection —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ")
                            } else {
                                Log.e(TAG, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å MediaProjection –≤–Ω—É—Ç—Ä–∏ foreground service")
                            }
                        } catch (e: Exception) {
                            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è MediaProjection –≤–Ω—É—Ç—Ä–∏ foreground service", e)
                        }
                    }
                }
            }
            ACTION_STOP_FOREGROUND -> {
                stopForeground(STOP_FOREGROUND_REMOVE)
            }
        }
        return START_STICKY
    }
    
    private fun createNotificationChannel() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val channel = NotificationChannel(
                CHANNEL_ID,
                "Dual Mode Service",
                NotificationManager.IMPORTANCE_LOW
            ).apply {
                description = "–°–µ—Ä–≤–∏—Å –¥–≤–æ–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"
            }
            
            val notificationManager = getSystemService(NotificationManager::class.java)
            notificationManager.createNotificationChannel(channel)
        }
    }
    
    private fun createNotification(): Notification {
        return NotificationCompat.Builder(this, CHANNEL_ID)
            .setContentTitle("DiceAutoBet")
            .setContentText("–°–µ—Ä–≤–∏—Å –¥–≤–æ–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            .setSmallIcon(R.drawable.ic_launcher_foreground)
            .setPriority(NotificationCompat.PRIORITY_LOW)
            .build()
    }
    
    override fun onDestroy() {
        super.onDestroy()
        Log.d(TAG, "–£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ DualModeService")
        controller.stopDualMode()
        stopForeground(true)
    }
    
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    fun startDualMode() {
        Log.d(TAG, "startDualMode() –≤—ã–∑–≤–∞–Ω")
        // –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ foreground —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω–æ–º —Å—Ç–∞—Ä—Ç–µ —Ä–µ–∂–∏–º–∞
        try {
            Log.d(TAG, "–ó–∞–ø—É—Å–∫–∞–µ–º foreground —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
            val notification = createNotification()
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.UPSIDE_DOWN_CAKE) {
                startForeground(NOTIFICATION_ID, notification, ServiceInfo.FOREGROUND_SERVICE_TYPE_MEDIA_PROJECTION or ServiceInfo.FOREGROUND_SERVICE_TYPE_DATA_SYNC)
            } else {
                startForeground(NOTIFICATION_ID, notification)
            }
            Log.d(TAG, "Foreground —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ foreground —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", e)
        }
        
        Log.d(TAG, "–ó–∞–ø—É—Å–∫–∞–µ–º controller.startDualMode()")
        try {
            controller.startDualMode()
            Log.d(TAG, "controller.startDualMode() –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –≤ controller.startDualMode()", e)
        }
    }
    
    fun stopDualMode() {
        Log.d(TAG, "stopDualMode() –≤—ã–∑–≤–∞–Ω")
        
        Log.d(TAG, "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º controller.stopDualMode()")
        try {
            controller.stopDualMode()
            Log.d(TAG, "controller.stopDualMode() –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –≤ controller.stopDualMode()", e)
        }
        
        // –°–Ω–∏–º–∞–µ–º foreground, —á—Ç–æ–±—ã –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ—â—É—â–µ–Ω–∏–µ —Ñ–æ–Ω–æ–≤–æ–π —Ä–∞–±–æ—Ç—ã
        Log.d(TAG, "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º foreground —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
        try { 
            stopForeground(STOP_FOREGROUND_REMOVE) 
            Log.d(TAG, "Foreground —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        } catch (e: Exception) { 
            Log.e(TAG, "–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ foreground —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", e)
        }
    }
    
    fun isRunning(): Boolean {
        return controller.getCurrentState().isRunning
    }
    
    fun getCurrentState(): SimpleDualModeState {
        return controller.getCurrentState()
    }
    
    fun getStatisticsText(): String {
        return controller.getStatistics()
    }
    
    fun getSimulatorInfo(): String {
        return "–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–∏–º—É–ª—è—Ç–æ—Ä: –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 10, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è 2500"
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ MediaProjection –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ
     */
    fun updateMediaProjection(resultCode: Int, data: Intent) {
        Log.d(TAG, "updateMediaProjection –≤—ã–∑–≤–∞–Ω —Å resultCode=$resultCode")
        try {
            controller.updateMediaProjection(resultCode, data)
            Log.d(TAG, "MediaProjection –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —É—Å–ø–µ—à–Ω–æ")
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ MediaProjection –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä", e)
        }
    }
}