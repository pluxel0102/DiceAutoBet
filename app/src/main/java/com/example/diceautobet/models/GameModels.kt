package com.example.diceautobet.models

import android.graphics.Rect
import android.util.Log
import com.example.diceautobet.opencv.DotCounter

// –ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
data class ScreenArea(
    val rect: Rect,
    val adaptive: com.example.diceautobet.utils.CoordinateUtils.AdaptiveRect? = null,
    val name: String
) {
    // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º (–±–µ–∑ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç)
    constructor(name: String, rect: Rect) : this(
        rect = rect,
        adaptive = null,
        name = name
    )

    // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å –∞–±—Å–æ–ª—é—Ç–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
    constructor(name: String, left: Int, top: Int, right: Int, bottom: Int) :
            this(name, Rect(left, top, right, bottom))
}

// –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –¥–ª—è —Ç–∏–ø–æ–≤ –æ–±–ª–∞—Å—Ç–µ–π
enum class AreaType(val displayName: String) {
    DICE_AREA("–û–±–ª–∞—Å—Ç—å –∫—É–±–∏–∫–æ–≤"),
    RED_BUTTON("–ö—Ä–∞—Å–Ω—ã–π –∫—É–±–∏–∫"),
    DRAW_BUTTON("–ù–∏—á—å—è X"),
    ORANGE_BUTTON("–û—Ä–∞–Ω–∂–µ–≤—ã–π –∫—É–±–∏–∫"),
    BET_10("–°—Ç–∞–≤–∫–∞ 10"),
    BET_50("–°—Ç–∞–≤–∫–∞ 50"),
    BET_100("–°—Ç–∞–≤–∫–∞ 100"),
    BET_500("–°—Ç–∞–≤–∫–∞ 500"),
    BET_2500("–°—Ç–∞–≤–∫–∞ 2500"),
    CONFIRM_BET("–ó–∞–∫–ª—é—á–∏—Ç—å –ø–∞—Ä–∏"),
    DOUBLE_BUTTON("–£–¥–≤–æ–∏—Ç—å x2"),
    BET_RESULT("–†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç–∞–≤–∫–∏")
}

// –í—ã–±–æ—Ä –Ω–∞ —á—Ç–æ —Å—Ç–∞–≤–∏—Ç—å
enum class BetChoice {
    RED, ORANGE
}

// –¢–∏–ø —Ö–æ–¥–∞ –≤ –Ω–æ–≤–æ–π –∞–ª—å—Ç–µ—Ä–Ω–∏—Ä—É—é—â–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
enum class TurnType {
    ACTIVE,   // –ê–∫—Ç–∏–≤–Ω—ã–π —Ö–æ–¥ - –¥–µ–ª–∞–µ–º —Å—Ç–∞–≤–∫—É
    PASSIVE   // –ü–∞—Å—Å–∏–≤–Ω—ã–π —Ö–æ–¥ - —Ç–æ–ª—å–∫–æ –Ω–∞–±–ª—é–¥–∞–µ–º
}

// === –ù–û–í–´–ï –ú–û–î–ï–õ–ò –î–õ–Ø –î–í–û–ô–ù–û–ì–û –†–ï–ñ–ò–ú–ê ===

// –¢–∏–ø –æ–∫–Ω–∞ –≤ –¥–≤–æ–π–Ω–æ–º —Ä–µ–∂–∏–º–µ
enum class WindowType {
    LEFT,    // –õ–µ–≤–æ–µ –æ–∫–Ω–æ (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ)
    RIGHT,   // –ü—Ä–∞–≤–æ–µ –æ–∫–Ω–æ (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ)
    TOP,     // –í–µ—Ä—Ö–Ω–µ–µ –æ–∫–Ω–æ (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ)
    BOTTOM   // –ù–∏–∂–Ω–µ–µ –æ–∫–Ω–æ (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ)
}

// –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
enum class GameMode {
    SINGLE_WINDOW,  // –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º (–æ–¥–Ω–æ –æ–∫–Ω–æ)
    DUAL_WINDOW     // –î–≤–æ–π–Ω–æ–π —Ä–µ–∂–∏–º (–¥–≤–∞ –æ–∫–Ω–∞)
}

// –¢–∏–ø —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞
enum class SplitScreenType {
    HORIZONTAL,  // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ (–ª–µ–≤–æ–µ/–ø—Ä–∞–≤–æ–µ)
    VERTICAL     // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ (–≤–µ—Ä—Ö–Ω–µ–µ/–Ω–∏–∂–Ω–µ–µ)
}

// –°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–≤–æ–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
enum class DualWindowStrategy {
    WIN_SWITCH,        // –ü—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥—Ä—É–≥–æ–µ –æ–∫–Ω–æ —Å –±–∞–∑–æ–≤–æ–π —Å—Ç–∞–≤–∫–æ–π
    LOSS_DOUBLE,       // –ü—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ —É–¥–≤–∞–∏–≤–∞–µ–º –≤ –¥—Ä—É–≥–æ–º –æ–∫–Ω–µ
    COLOR_ALTERNATING  // –ü–æ—Å–ª–µ 2 –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –¥—Ä—É–≥–æ–π —Ü–≤–µ—Ç
}

// –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—É–Ω–¥–∞
data class RoundResult(
    val redDots: Int,
    val orangeDots: Int,
    val winner: BetChoice?,
    val isDraw: Boolean = false,
    val confidence: Float = 0.0f,
    val isValid: Boolean = true
) {
    companion object {
        fun fromDotResult(result: DotCounter.Result): RoundResult {
            val isDraw = result.leftDots == result.rightDots
            val winner = when {
                isDraw -> null
                result.leftDots > result.rightDots -> BetChoice.RED
                else -> BetChoice.ORANGE
            }

            // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            val isValid = validateResult(result)

            val roundResult = RoundResult(
                redDots = result.leftDots,
                orangeDots = result.rightDots,
                winner = winner,
                isDraw = isDraw,
                confidence = result.confidence,
                isValid = isValid
            )
            Log.d("RoundResult", "–°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç: leftDots=${result.leftDots}, rightDots=${result.rightDots}, isDraw=$isDraw, winner=$winner, confidence=${result.confidence}, isValid=$isValid")
            return roundResult
        }

        private fun validateResult(result: DotCounter.Result): Boolean {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ª–æ–≥–∏—á–µ–Ω
            val totalDots = result.leftDots + result.rightDots

            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ö–∞–∂–¥—ã–π –∫—É–±–∏–∫ –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ—Ç 1 –¥–æ 6 —Ç–æ—á–µ–∫
            // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–∏–ø–∞ 0:X –∏–ª–∏ X:0 - —ç—Ç–æ –∞–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏, –Ω–µ —Ä–µ–∞–ª—å–Ω—ã–µ –∫—É–±–∏–∫–∏
            if (result.leftDots !in 1..6 || result.rightDots !in 1..6) {
                Log.d("RoundResult", "–ù–µ–≤–∞–ª–∏–¥–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ—á–µ–∫: ${result.leftDots}:${result.rightDots} (–∫—É–±–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å 1-6 —Ç–æ—á–µ–∫)")
                return false
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å - –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥
            if (result.confidence < 0.05f) { // –ï—â—ë –±–æ–ª–µ–µ –ª–æ—è–ª—å–Ω—ã–π: 0.1f ‚Üí 0.05f
                Log.d("RoundResult", "–ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (${result.confidence}) - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ–Ω–∞–¥–µ–∂–µ–Ω")
                return false
            }

            Log.d("RoundResult", "‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–µ–Ω: totalDots=$totalDots, confidence=${result.confidence}")
            return true
        }
    }
}

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
data class GameState(
    val isRunning: Boolean = false,
    val isPaused: Boolean = false,
    val currentBet: Int = 10,
    val baseBet: Int = 10,
    val betChoice: BetChoice = BetChoice.RED,
    val consecutiveLosses: Int = 0,
    val maxAttempts: Int = 10,
    val roundHistory: List<RoundResult> = emptyList(),
    val totalAttempts: Int = 0,  // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    val isBetPlaced: Boolean = false, // –§–ª–∞–≥: —Å—Ç–∞–≤–∫–∞ —É–∂–µ —Å–¥–µ–ª–∞–Ω–∞ –∏ –æ–∂–∏–¥–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    val startTime: Long = 0L,
    val endTime: Long = 0L,
    val lastResult: GameResultType = GameResultType.UNKNOWN,
    val statistics: GameStatistics = GameStatistics(),
    val balance: Int = 10000, // –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    // –ù–û–í–ê–Ø –ê–õ–¨–¢–ï–†–ù–ò–†–£–Æ–©–ê–Ø –õ–û–ì–ò–ö–ê
    val currentTurnNumber: Int = 0,  // –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ —Ö–æ–¥–∞ (0, 1, 2, 3...)
    val lastActiveResult: GameResultType = GameResultType.UNKNOWN,  // –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ö–æ–¥–∞
    val firstResultIgnored: Boolean = false,  // –§–ª–∞–≥: –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É–∂–µ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω
    val totalProfit: Int = 0,
    val totalBetsPlaced: Int = 0
) {

    // –ú–ï–¢–û–î–´ –î–õ–Ø –ù–û–í–û–ô –ê–õ–¨–¢–ï–†–ù–ò–†–£–Æ–©–ï–ô –õ–û–ì–ò–ö–ò

    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Ç–µ–∫—É—â–µ–≥–æ —Ö–æ–¥–∞ (–∞–∫—Ç–∏–≤–Ω—ã–π –∏–ª–∏ –ø–∞—Å—Å–∏–≤–Ω—ã–π)
     */
    fun getCurrentTurnType(): TurnType {
        return if (currentTurnNumber % 2 == 0) TurnType.ACTIVE else TurnType.PASSIVE
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
     */
    fun shouldIgnoreFirstResult(): Boolean {
        return !firstResultIgnored
    }

    fun calculateBetAmount(): Int {
        Log.d("GameState", "üéØ –†–ê–°–ß–ï–¢ –°–¢–ê–í–ö–ò –î–õ–Ø –ê–ö–¢–ò–í–ù–û–ì–û –•–û–î–ê")
        Log.d("GameState", "–¢–µ–∫—É—â–∏–π —Ö–æ–¥: ${currentTurnNumber + 1}")
        Log.d("GameState", "–ü–æ—Å–ª–µ–¥–Ω–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: $lastActiveResult")
        Log.d("GameState", "–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: $currentBet")
        Log.d("GameState", "–ë–∞–∑–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞: $baseBet")

        val betAmount = when (lastActiveResult) {
            GameResultType.WIN -> {
                Log.d("GameState", "‚úÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —Ö–æ–¥ –í–´–ò–ì–†–ê–õ–ò ‚Üí —Å—Ç–∞–≤–∏–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞–≤–∫—É: $baseBet")
                baseBet
            }
            GameResultType.LOSS, GameResultType.DRAW -> {
                // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –Ω–µ —É–¥–≤–∞–∏–≤–∞–µ–º, –∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞–≤–∫—É
                // –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –±—ã–ª–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –≤ updateBalanceAfterActiveTurn
                Log.d("GameState", "‚ùå –ü–æ—Å–ª–µ–¥–Ω–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —Ö–æ–¥ –ü–†–û–ò–ì–†–ê–õ–ò/–ù–ò–ß–¨–Ø ‚Üí –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞–≤–∫—É: $currentBet")
                currentBet
            }
            GameResultType.UNKNOWN -> {
                Log.d("GameState", "üé¨ –ü–µ—Ä–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —Ö–æ–¥ ‚Üí —Å—Ç–∞–≤–∏–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞–≤–∫—É: $baseBet")
                baseBet
            }
        }

        Log.d("GameState", "üí∞ –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–í–ö–ê: $betAmount")
        return betAmount
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ö–æ–¥–∞
     */
    fun advanceToNextTurn(result: GameResultType = GameResultType.UNKNOWN): GameState {
        val currentType = getCurrentTurnType()

        return when (currentType) {
            TurnType.ACTIVE -> {
                // –ê–∫—Ç–∏–≤–Ω—ã–π —Ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω - –∑–∞–ø–æ–º–∏–Ω–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                Log.d("GameState", "–ó–∞–≤–µ—Ä—à–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —Ö–æ–¥ ${currentTurnNumber + 1}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: $result")
                this.copy(
                    currentTurnNumber = currentTurnNumber + 1,
                    lastActiveResult = result,
                    lastResult = result
                )
            }
            TurnType.PASSIVE -> {
                // –ü–∞—Å—Å–∏–≤–Ω—ã–π —Ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω - –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
                Log.d("GameState", "–ó–∞–≤–µ—Ä—à–µ–Ω –ø–∞—Å—Å–∏–≤–Ω—ã–π —Ö–æ–¥ ${currentTurnNumber + 1}")
                this.copy(
                    currentTurnNumber = currentTurnNumber + 1,
                    lastResult = result
                )
            }
        }
    }

    /**
     * –ü–æ–º–µ—á–∞–µ—Ç –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
     */
    fun markFirstResultIgnored(): GameState {
        return this.copy(
            firstResultIgnored = true,
            currentTurnNumber = 0  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ—Å–ª–µ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
        )
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ö–æ–¥–∞
     */
    fun updateBalanceAfterActiveTurn(betAmount: Int, result: GameResultType): GameState {
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º (–∫–∞–∫ –≤ OverlayService)
        val winAmount = (betAmount * 2.28).toInt() - betAmount

        val newBalance = when (result) {
            GameResultType.WIN -> {
                Log.d("GameState", "üéâ –í–´–ò–ì–†–´–®! –°—Ç–∞–≤–∫–∞: $betAmount, –≤—ã–∏–≥—Ä—ã—à: $winAmount")
                balance + winAmount  // –î–æ–±–∞–≤–ª—è–µ–º —á–∏—Å—Ç—ã–π –≤—ã–∏–≥—Ä—ã—à (–±–µ–∑ —Å—Ç–∞–≤–∫–∏)
            }
            GameResultType.LOSS -> {
                Log.d("GameState", "üí∏ –ü–†–û–ò–ì–†–´–®! -$betAmount")
                balance - betAmount
            }
            GameResultType.DRAW -> {
                Log.d("GameState", "ü§ù –ù–ò–ß–¨–Ø (—Å—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è)")
                balance // –ü—Ä–∏ –Ω–∏—á—å–µ–π —Å—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è
            }
            GameResultType.UNKNOWN -> {
                Log.w("GameState", "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                balance
            }
        }

        val newProfit = when (result) {
            GameResultType.WIN -> totalProfit + winAmount  // –ß–∏—Å—Ç—ã–π –≤—ã–∏–≥—Ä—ã—à
            GameResultType.LOSS -> totalProfit - betAmount
            GameResultType.DRAW -> totalProfit
            GameResultType.UNKNOWN -> totalProfit
        }

        // ‚úÖ –ì–õ–ê–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É –¥–ª—è –°–õ–ï–î–£–Æ–©–ï–ì–û —Ö–æ–¥–∞
        val nextBet = when (result) {
            GameResultType.WIN -> {
                Log.d("GameState", "–°–ª–µ–¥—É—é—â–∞—è —Å—Ç–∞–≤–∫–∞ –ø–æ—Å–ª–µ –≤—ã–∏–≥—Ä—ã—à–∞: –±–∞–∑–æ–≤–∞—è $baseBet")
                baseBet  // –ü—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –±–∞–∑–æ–≤–æ–π —Å—Ç–∞–≤–∫–µ
            }
            GameResultType.LOSS, GameResultType.DRAW -> {
                val doubled = betAmount * 2
                val maxBet = 2500
                val finalBet = doubled.coerceAtMost(maxBet)
                Log.d("GameState", "–°–ª–µ–¥—É—é—â–∞—è —Å—Ç–∞–≤–∫–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–∏–≥—Ä—ã—à–∞/–Ω–∏—á—å–µ–π: $betAmount * 2 = $doubled ‚Üí $finalBet")
                finalBet  // –ü—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ/–Ω–∏—á—å–µ–π —É–¥–≤–∞–∏–≤–∞–µ–º –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ö–æ–¥–∞
            }
            GameResultType.UNKNOWN -> currentBet
        }

        val newBetsPlaced = if (result != GameResultType.UNKNOWN) totalBetsPlaced + 1 else totalBetsPlaced

        return this.copy(
            balance = newBalance,
            currentBet = nextBet,  // ‚úÖ –°—Ç–∞–≤–∫–∞ –¥–ª—è –°–õ–ï–î–£–Æ–©–ï–ì–û —Ö–æ–¥–∞
            totalProfit = newProfit,
            totalBetsPlaced = newBetsPlaced
        )
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è UI
     */
    fun getStatusDescription(): String {
        val turnType = getCurrentTurnType()
        val turnDescription = when (turnType) {
            TurnType.ACTIVE -> "–ê–∫—Ç–∏–≤–Ω—ã–π —Ö–æ–¥"
            TurnType.PASSIVE -> "–ü–∞—Å—Å–∏–≤–Ω—ã–π —Ö–æ–¥"
        }

        val lastResultDescription = when (lastActiveResult) {
            GameResultType.WIN -> "–ü–æ—Å–ª–µ–¥–Ω–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π: –í–´–ò–ì–†–´–®"
            GameResultType.LOSS -> "–ü–æ—Å–ª–µ–¥–Ω–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π: –ü–†–û–ò–ì–†–´–®"
            GameResultType.DRAW -> "–ü–æ—Å–ª–µ–¥–Ω–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π: –ù–ò–ß–¨–Ø"
            GameResultType.UNKNOWN -> "–ü–µ—Ä–≤–∞—è –∏–≥—Ä–∞"
        }

        return "$turnDescription (${currentTurnNumber + 1}). $lastResultDescription"
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
     */
    fun shouldStop(): Boolean {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è, –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ä—è–¥ –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π –¥–æ—Å—Ç–∏–≥–ª–æ –ª–∏–º–∏—Ç–∞ –ø–æ–ø—ã—Ç–æ–∫
    return consecutiveLosses >= maxAttempts
    }

    // –£–°–¢–ê–†–ï–í–®–ò–ï –ú–ï–¢–û–î–´ (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    val currentAttempt: Int get() = consecutiveLosses + 1

    fun getNextBet(): Int {
    // –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ç–µ—Å—Ç–∞–º–∏: —É–¥–≤–æ–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞–≤–∫–∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
    // –ï—Å–ª–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π –Ω–µ—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞–≤–∫—É, –∏–Ω–∞—á–µ —É–¥–≤–∞–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é (–¥–æ 2500)
    return if (consecutiveLosses <= 0) baseBet else (currentBet * 2).coerceAtMost(2500)
    }
}

// –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–π
sealed class GameResult<out T> {
    data class Success<T>(val data: T) : GameResult<T>()
    data class Error(val message: String, val cause: Throwable? = null) : GameResult<Nothing>()
    object Loading : GameResult<Nothing>()
}

// –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç–∞–≤–∫–∏
enum class GameResultType {
    WIN, LOSS, DRAW, UNKNOWN
}

// –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–∞–≤–∫–∏
sealed class BetCalculationResult {
    data class Success(val amount: Int) : BetCalculationResult()
    data class InsufficientBalance(val required: Int, val available: Int) : BetCalculationResult()
    data class MaxStepsReached(val maxSteps: Int) : BetCalculationResult()
    object NoAvailableBet : BetCalculationResult()
    data class Error(val message: String) : BetCalculationResult()
}

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã
data class GameStatistics(
    val totalBets: Int = 0,
    val wins: Int = 0,
    val losses: Int = 0,
    val draws: Int = 0,
    val totalProfit: Int = 0,
    val currentWinStreak: Int = 0,
    val currentLossStreak: Int = 0,
    val maxWinStreak: Int = 0,
    val maxLossStreak: Int = 0,
    val averageBet: Double = 0.0,
    val winRate: Double = 0.0
) {
    // –í—ã—á–∏—Å–ª—è–µ–º–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ –¥–ª—è winRate
    val calculatedWinRate: Double
        get() = if (totalBets > 0) wins.toDouble() / totalBets.toDouble() else 0.0
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏–≥—Ä—ã
interface GameStateObserver {
    fun onGameStateChanged(gameState: GameState)
}