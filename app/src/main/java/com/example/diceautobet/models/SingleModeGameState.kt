package com.example.diceautobet.models

import com.example.diceautobet.models.DiceResult
import com.example.diceautobet.utils.FileLogger
import android.util.Log

/**
 * –¶–≤–µ—Ç–∞ –¥–ª—è —Å—Ç–∞–≤–æ–∫ –≤ –æ–¥–∏–Ω–æ—á–Ω–æ–º —Ä–µ–∂–∏–º–µ
 */
enum class BetColor(val displayName: String) {
    BLUE("–°–∏–Ω–∏–π"),
    RED("–ö—Ä–∞—Å–Ω—ã–π")
}

/**
 * –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –≤ –æ–¥–∏–Ω–æ—á–Ω–æ–º —Ä–µ–∂–∏–º–µ
 */
data class SingleModeGameState(
    // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç–∞–≤–∫–∏
    val baseBet: Int = 20,                     // –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ (20 —á–µ—Ä–µ–∑ 10 + x2)
    val currentBet: Int = 20,                  // –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞
    val currentColor: BetColor = BetColor.BLUE, // –¢–µ–∫—É—â–∏–π —Ü–≤–µ—Ç —Å—Ç–∞–≤–∫–∏
    
    // –°—á–µ—Ç—á–∏–∫–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π
    val consecutiveLossesOnColor: Int = 0,      // –ü—Ä–æ–∏–≥—Ä—ã—à–∏ –ø–æ–¥—Ä—è–¥ –Ω–∞ —Ç–µ–∫—É—â–µ–º —Ü–≤–µ—Ç–µ
    val totalConsecutiveLosses: Int = 0,        // –û–±—â–∏–µ –ø—Ä–æ–∏–≥—Ä—ã—à–∏ –ø–æ–¥—Ä—è–¥
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    val totalGames: Int = 0,                    // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä
    val totalWins: Int = 0,                     // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∏–≥—Ä—ã—à–µ–π
    val totalLosses: Int = 0,                   // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π
    val totalDraws: Int = 0,                    // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∏—á—å–∏—Ö
    val totalProfit: Int = 0,                   // –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
    val isGameActive: Boolean = false,          // –ê–∫—Ç–∏–≤–Ω–∞ –ª–∏ –∏–≥—Ä–∞
    val isPaused: Boolean = false,              // –ù–∞ –ø–∞—É–∑–µ –ª–∏ –∏–≥—Ä–∞
    val lastResult: DiceResult? = null,         // –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    val gameStartTime: Long = 0L,               // –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    val maxBet: Int = 200000,                   // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ (–æ—Å—Ç–∞–Ω–æ–≤–∫–∞)
    val maxLossesBeforeColorSwitch: Int = 2     // –ü—Ä–æ–∏–≥—Ä—ã—à–µ–π –¥–æ —Å–º–µ–Ω—ã —Ü–≤–µ—Ç–∞
) {
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é —Å—Ç–∞–≤–∫—É –ø–æ—Å–ª–µ –ø—Ä–æ–∏–≥—Ä—ã—à–∞
     * –ò–ó–ú–ï–ù–ï–ù–û: –£–±—Ä–∞–Ω –ª–∏–º–∏—Ç maxBet - —É–¥–≤–∞–∏–≤–∞–µ–º –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
     */
    fun getNextBetAfterLoss(): Int {
        val nextBet = currentBet * 2
        Log.d("SingleModeGameState", "üí∞ getNextBetAfterLoss(): $currentBet √ó 2 = $nextBet")
        FileLogger.d("SingleModeGameState", "üí∞ –£–¥–≤–æ–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏: $currentBet ‚Üí $nextBet")
        return nextBet // –£–¥–≤–∞–∏–≤–∞–µ–º –±–µ–∑ –ª–∏–º–∏—Ç–∞
    }
    
    /**
     * –ù—É–∂–Ω–æ –ª–∏ –º–µ–Ω—è—Ç—å —Ü–≤–µ—Ç —Å—Ç–∞–≤–∫–∏
     */
    fun shouldSwitchColor(): Boolean {
        return consecutiveLossesOnColor >= maxLossesBeforeColorSwitch
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π —Ü–≤–µ—Ç
     */
    fun getOppositeColor(): BetColor {
        return if (currentColor == BetColor.BLUE) BetColor.RED else BetColor.BLUE
    }
    
    /**
     * –ù—É–∂–Ω–æ –ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É (–¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞)
     * –û–¢–ö–õ–Æ–ß–ï–ù–û: –£–±—Ä–∞–Ω –ª–∏–º–∏—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–∏ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    fun shouldStopGame(): Boolean {
        return false // –í—Å–µ–≥–¥–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä—É, –±–µ–∑ –ª–∏–º–∏—Ç–∞ —Å—Ç–∞–≤–∫–∏
    }
    
    /**
     * –°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É —É–¥–≤–æ–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç–∞–≤–∫–∏
     * –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –î–ª—è –±–∞–∑–æ–≤–æ–π —Å—Ç–∞–≤–∫–∏ 20 –≤—Å–µ–≥–¥–∞ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç 10
     */
    fun getDoublingClicksNeeded(): Int {
        if (baseBet == 20) {
            // –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã 10 + x2
            return calculateMultiplierClicksFor20System(currentBet)
        } else {
            // –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö –±–∞–∑–æ–≤—ã—Ö —Å—Ç–∞–≤–æ–∫
            if (currentBet <= baseBet) return 0
            
            var bet = baseBet
            var clicks = 0
            
            while (bet < currentBet) {
                bet *= 2
                clicks++
            }
            
            return clicks
        }
    }
    
    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–∂–∞—Ç–∏–π x2 –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Å –±–∞–∑–æ–≤–æ–π —Å—Ç–∞–≤–∫–æ–π 20 (10 + x2)
     */
    private fun calculateMultiplierClicksFor20System(targetBet: Int): Int {
        if (targetBet < 10) return 0
        
        // –ù–∞—Ö–æ–¥–∏–º —Å—Ç–µ–ø–µ–Ω—å –¥–≤–æ–π–∫–∏: targetBet = 10 * 2^n
        var current = 10
        var clicks = 0
        
        while (current < targetBet) {
            current *= 2
            clicks++
        }
        
        return clicks
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã –∏ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
     */
    fun processGameResult(result: DiceResult): SingleModeGameState {
        val TAG = "SingleModeGameState"
        
        val isWin = when (currentColor) {
            BetColor.BLUE -> result.leftDots > result.rightDots
            BetColor.RED -> result.rightDots > result.leftDots
        }
        
        val isDraw = result.leftDots == result.rightDots
        
        Log.d(TAG, "üé≤ processGameResult: –∫—É–±–∏–∫–∏=${result.leftDots}:${result.rightDots}, —Ü–≤–µ—Ç=$currentColor, —Ç–µ–∫—É—â–∞—è_—Å—Ç–∞–≤–∫–∞=$currentBet")
        FileLogger.i(TAG, "üé≤ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: ${result.leftDots}:${result.rightDots}, —Ü–≤–µ—Ç=$currentColor, —Å—Ç–∞–≤–∫–∞=$currentBet")
        
        return when {
            isWin -> {
                Log.d(TAG, "‚úÖ –í–´–ò–ì–†–´–®! –í–æ–∑–≤—Ä–∞—Ç –∫ –±–∞–∑–æ–≤–æ–π —Å—Ç–∞–≤–∫–µ: $baseBet")
                FileLogger.i(TAG, "‚úÖ –í–´–ò–ì–†–´–® ‚Üí –±–∞–∑–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ $baseBet")
                // –í—ã–∏–≥—Ä—ã—à - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –±–∞–∑–æ–≤–æ–π —Å—Ç–∞–≤–∫–µ
                copy(
                    currentBet = baseBet,
                    consecutiveLossesOnColor = 0,
                    totalConsecutiveLosses = 0,
                    totalGames = totalGames + 1,
                    totalWins = totalWins + 1,
                    totalProfit = totalProfit + currentBet,
                    lastResult = result
                )
            }
            isDraw -> {
                val nextBet = getNextBetAfterLoss()
                Log.d(TAG, "üü∞ –ù–ò–ß–¨–Ø! –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: $currentBet ‚Üí –°–ª–µ–¥—É—é—â–∞—è —Å—Ç–∞–≤–∫–∞: $nextBet")
                FileLogger.w(TAG, "üü∞ –ù–ò–ß–¨–Ø: $currentBet ‚Üí —É–¥–≤–æ–µ–Ω–∏–µ ‚Üí $nextBet")
                
                // –ù–∏—á—å—è —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø—Ä–æ–∏–≥—Ä—ã—à–µ–º
                val newLossesOnColor = consecutiveLossesOnColor + 1
                val newColor = if (shouldSwitchColor()) getOppositeColor() else currentColor
                val newLossesAfterSwitch = if (shouldSwitchColor()) 0 else newLossesOnColor
                
                if (shouldSwitchColor()) {
                    Log.d(TAG, "üîÑ –°–º–µ–Ω–∞ —Ü–≤–µ—Ç–∞: $currentColor ‚Üí $newColor (–ø—Ä–æ–∏–≥—Ä—ã—à–µ–π –Ω–∞ —Ü–≤–µ—Ç–µ: $newLossesOnColor)")
                    FileLogger.i(TAG, "üîÑ –°–º–µ–Ω–∞ —Ü–≤–µ—Ç–∞: $currentColor ‚Üí $newColor")
                }
                
                copy(
                    currentBet = nextBet,
                    currentColor = newColor,
                    consecutiveLossesOnColor = newLossesAfterSwitch,
                    totalConsecutiveLosses = totalConsecutiveLosses + 1,
                    totalGames = totalGames + 1,
                    totalDraws = totalDraws + 1,
                    totalProfit = totalProfit - currentBet,
                    lastResult = result
                )
            }
            else -> {
                val nextBet = getNextBetAfterLoss()
                Log.d(TAG, "‚ùå –ü–†–û–ò–ì–†–´–®! –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: $currentBet ‚Üí –°–ª–µ–¥—É—é—â–∞—è —Å—Ç–∞–≤–∫–∞: $nextBet")
                FileLogger.w(TAG, "‚ùå –ü–†–û–ò–ì–†–´–®: $currentBet ‚Üí —É–¥–≤–æ–µ–Ω–∏–µ ‚Üí $nextBet")
                
                // –ü—Ä–æ–∏–≥—Ä—ã—à
                val newLossesOnColor = consecutiveLossesOnColor + 1
                val newColor = if (shouldSwitchColor()) getOppositeColor() else currentColor
                val newLossesAfterSwitch = if (shouldSwitchColor()) 0 else newLossesOnColor
                
                if (shouldSwitchColor()) {
                    Log.d(TAG, "üîÑ –°–º–µ–Ω–∞ —Ü–≤–µ—Ç–∞: $currentColor ‚Üí $newColor (–ø—Ä–æ–∏–≥—Ä—ã—à–µ–π –Ω–∞ —Ü–≤–µ—Ç–µ: $newLossesOnColor)")
                    FileLogger.i(TAG, "üîÑ –°–º–µ–Ω–∞ —Ü–≤–µ—Ç–∞: $currentColor ‚Üí $newColor")
                }
                
                copy(
                    currentBet = nextBet,
                    currentColor = newColor,
                    consecutiveLossesOnColor = newLossesAfterSwitch,
                    totalConsecutiveLosses = totalConsecutiveLosses + 1,
                    totalGames = totalGames + 1,
                    totalLosses = totalLosses + 1,
                    totalProfit = totalProfit - currentBet,
                    lastResult = result
                )
            }
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∏–≥—Ä—ã—à–µ–π
     */
    fun getWinRate(): Float {
        return if (totalGames > 0) (totalWins.toFloat() / totalGames.toFloat()) * 100f else 0f
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –∏–≥—Ä—ã –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
     */
    fun getGameDuration(): Long {
        return if (gameStartTime > 0) System.currentTimeMillis() - gameStartTime else 0L
    }
}