package com.example.diceautobet.detection

import android.content.Context
import android.graphics.Bitmap
import android.graphics.Rect
import android.util.Log
import com.example.diceautobet.models.*
import com.example.diceautobet.opencv.DotCounter
import com.example.diceautobet.recognition.HybridDiceRecognizer
import com.example.diceautobet.utils.PreferencesManager
import com.example.diceautobet.utils.ScreenshotService
import com.example.diceautobet.timing.DualModeTimingOptimizer
import com.example.diceautobet.timing.OperationType
import kotlinx.coroutines.*

/**
 * –î–µ—Ç–µ–∫—Ç–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –¥–≤–æ–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Å —ç–∫–æ–Ω–æ–º–Ω–æ–π AI –ª–æ–≥–∏–∫–æ–π
 * –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –≤ –æ–±–æ–∏—Ö –æ–∫–Ω–∞—Ö
 * üí∞ –≠–ö–û–ù–û–ú–ò–Ø: AI –∑–∞–ø—Ä–æ—Å—ã —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫—É–±–∏–∫–æ–≤
 */
class DualModeResultDetector(
    private val context: Context,
    private val screenshotService: ScreenshotService,
    private val timingOptimizer: DualModeTimingOptimizer? = null
) {
    
    companion object {
        private const val TAG = "DualModeResultDetector"
        private const val BASE_DETECTION_INTERVAL_MS = 500L
        private const val RESULT_CONFIDENCE_THRESHOLD = 0.7f
        private const val DICE_CHANGE_THRESHOLD = 0.1f // –ü–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏
    }
    
    private val detectionScope = CoroutineScope(Dispatchers.IO + SupervisorJob())
    private var detectionJob: Job? = null
    
    // üí∞ –≠–ö–û–ù–û–ú–ò–Ø: –∫—ç—à –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫—É–±–∏–∫–æ–≤
    private var lastLeftResult: RoundResult? = null
    private var lastRightResult: RoundResult? = null
    private var lastDetectionTime = 0L
    
    // üéØ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫—É–±–∏–∫–æ–≤
    private var previousLeftDice: DotCounter.Result? = null
    private var previousRightDice: DotCounter.Result? = null
    private var isFirstBet = true // –§–ª–∞–≥ –ø–µ—Ä–≤–æ–π —Å—Ç–∞–≤–∫–∏
    
    // ü§ñ AI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —ç–∫–æ–Ω–æ–º–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    private var hybridRecognizer: HybridDiceRecognizer? = null
    private var preferencesManager: PreferencesManager? = null
    
    // –°–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π
    private var onResultDetected: ((WindowType, RoundResult) -> Unit)? = null
    private var onDetectionError: ((String, Exception?) -> Unit)? = null
    
    /**
     * üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç AI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —ç–∫–æ–Ω–æ–º–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
     */
    fun initializeAI(prefsManager: PreferencesManager) {
        Log.d(TAG, "üí∞ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫–æ–Ω–æ–º–Ω–æ–π AI –ª–æ–≥–∏–∫–∏")
        
        preferencesManager = prefsManager
        hybridRecognizer = HybridDiceRecognizer(prefsManager)
        
        Log.d(TAG, "‚úÖ AI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤")
    }
    
    /**
     * üéØ –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ñ–ª–∞–≥ –ø–µ—Ä–≤–æ–π —Å—Ç–∞–≤–∫–∏ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ START)
     */
    fun resetFirstBetFlag() {
        Log.d(TAG, "üöÄ –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –ø–µ—Ä–≤–æ–π —Å—Ç–∞–≤–∫–∏ - –Ω–∞—á–∏–Ω–∞–µ–º —ç–∫–æ–Ω–æ–º–Ω—É—é –∏–≥—Ä—É")
        isFirstBet = true
        previousLeftDice = null
        previousRightDice = null
    }
    
    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–µ—Ç–µ–∫—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
     */
    fun startDetection(leftWindowAreas: Map<AreaType, ScreenArea>, rightWindowAreas: Map<AreaType, ScreenArea>) {
        Log.d(TAG, "–ó–∞–ø—É—Å–∫ –¥–µ—Ç–µ–∫—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        if (detectionJob?.isActive == true) {
            Log.w(TAG, "–î–µ—Ç–µ–∫—Ü–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
            return
        }
        
        detectionJob = detectionScope.launch {
            while (isActive) {
                val detectionStartTime = System.currentTimeMillis()
                
                try {
                    // –î–µ—Ç–µ–∫—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –æ–±–æ–∏—Ö –æ–∫–Ω–∞—Ö
                    detectResultsInBothWindows(leftWindowAreas, rightWindowAreas)
                    
                    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É —É—Å–ø–µ—à–Ω–æ–π –¥–µ—Ç–µ–∫—Ü–∏–∏
                    val detectionTime = System.currentTimeMillis() - detectionStartTime
                    timingOptimizer?.recordOperationMetric(OperationType.DETECTION, detectionTime, true)
                    
                    // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–µ—Ç–µ–∫—Ü–∏–∏
                    val detectionInterval = timingOptimizer?.getDelayForOperation(OperationType.DETECTION) 
                        ?: BASE_DETECTION_INTERVAL_MS
                    delay(detectionInterval)
                    
                } catch (e: CancellationException) {
                    Log.d(TAG, "–î–µ—Ç–µ–∫—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                    break
                } catch (e: Exception) {
                    Log.e(TAG, "–û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏", e)
                    
                    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É –Ω–µ—É–¥–∞—á–Ω–æ–π –¥–µ—Ç–µ–∫—Ü–∏–∏
                    val detectionTime = System.currentTimeMillis() - detectionStartTime
                    timingOptimizer?.recordOperationMetric(OperationType.DETECTION, detectionTime, false)
                    
                    onDetectionError?.invoke("–û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", e)
                    delay(1000) // –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                }
            }
        }
        
        Log.d(TAG, "–î–µ—Ç–µ–∫—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞")
    }
    
    /**
     * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–µ—Ç–µ–∫—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
     */
    fun stopDetection() {
        Log.d(TAG, "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        detectionJob?.cancel()
        detectionJob = null
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à
        lastLeftResult = null
        lastRightResult = null
        lastDetectionTime = 0L
    }
    
    /**
     * –î–µ—Ç–µ–∫—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –æ–±–æ–∏—Ö –æ–∫–Ω–∞—Ö —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
     */
    private suspend fun detectResultsInBothWindows(
        leftWindowAreas: Map<AreaType, ScreenArea>,
        rightWindowAreas: Map<AreaType, ScreenArea>
    ) {
        val currentTime = System.currentTimeMillis()
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞—â–∏—Ç—É –æ—Ç —á–∞—Å—Ç—ã—Ö –¥–µ—Ç–µ–∫—Ü–∏–π
        val minInterval = timingOptimizer?.getDelayForOperation(OperationType.DETECTION)?.div(2) 
            ?: (BASE_DETECTION_INTERVAL_MS / 2)
        
        if (currentTime - lastDetectionTime < minInterval) {
            return
        }
        
        lastDetectionTime = currentTime
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Å –∏–∑–º–µ—Ä–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏
        val screenshotStartTime = System.currentTimeMillis()
        val screenshot = screenshotService.takeScreenshot()
        
        if (screenshot == null) {
            Log.w(TAG, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç")
            timingOptimizer?.recordOperationMetric(OperationType.SCREENSHOT, 
                System.currentTimeMillis() - screenshotStartTime, false)
            return
        }
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
        val screenshotTime = System.currentTimeMillis() - screenshotStartTime
        timingOptimizer?.recordOperationMetric(OperationType.SCREENSHOT, screenshotTime, true)
        
        // –î–µ—Ç–µ–∫—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        val leftJob = detectionScope.async { detectResultInWindow(screenshot, leftWindowAreas, WindowType.LEFT) }
        val rightJob = detectionScope.async { detectResultInWindow(screenshot, rightWindowAreas, WindowType.RIGHT) }
        
        // –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        val leftResult = leftJob.await()
        val rightResult = rightJob.await()
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        leftResult?.let { result ->
            if (isNewResult(result, lastLeftResult)) {
                lastLeftResult = result
                onResultDetected?.invoke(WindowType.LEFT, result)
                Log.d(TAG, "–ù–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ª–µ–≤–æ–º –æ–∫–Ω–µ: $result")
            }
        }
        
        rightResult?.let { result ->
            if (isNewResult(result, lastRightResult)) {
                lastRightResult = result
                onResultDetected?.invoke(WindowType.RIGHT, result)
                Log.d(TAG, "–ù–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø—Ä–∞–≤–æ–º –æ–∫–Ω–µ: $result")
            }
        }
    }
    
    /**
     * –î–µ—Ç–µ–∫—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –æ–∫–Ω–µ
     */
    private suspend fun detectResultInWindow(
        screenshot: Bitmap,
        windowAreas: Map<AreaType, ScreenArea>,
        windowType: WindowType
    ): RoundResult? {
        return withContext(Dispatchers.IO) {
            try {
                // –ü–æ–ª—É—á–∞–µ–º –æ–±–ª–∞—Å—Ç—å –∫—É–±–∏–∫–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –æ–∫–Ω–∞
                val diceArea = windowAreas[AreaType.DICE_AREA]
                if (diceArea == null) {
                    Log.w(TAG, "–û–±–ª–∞—Å—Ç—å –∫—É–±–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –æ–∫–Ω–∞ $windowType")
                    return@withContext null
                }
                
                // –í—ã—Ä–µ–∑–∞–µ–º –æ–±–ª–∞—Å—Ç—å –∫—É–±–∏–∫–æ–≤ –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
                val diceRegion = extractRegion(screenshot, diceArea.rect)
                if (diceRegion == null) {
                    Log.w(TAG, "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—Ä–µ–∑–∞—Ç—å –æ–±–ª–∞—Å—Ç—å –∫—É–±–∏–∫–æ–≤ –¥–ª—è –æ–∫–Ω–∞ $windowType")
                    return@withContext null
                }
                
                // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—É–±–∏–∫–∏ —Å —ç–∫–æ–Ω–æ–º–Ω–æ–π AI –ª–æ–≥–∏–∫–æ–π
                val roundResult = analyzeWithEconomicAI(diceRegion, windowType)
                
                if (roundResult == null) {
                    Log.v(TAG, "–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –¥–ª—è –æ–∫–Ω–∞ $windowType")
                    return@withContext null
                }
                
                Log.v(TAG, "‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤ –æ–∫–Ω–µ $windowType: –∫—Ä–∞—Å–Ω—ã–π=${roundResult.redDots}, –æ—Ä–∞–Ω–∂–µ–≤—ã–π=${roundResult.orangeDots}")
                
                return@withContext roundResult
                
            } catch (e: Exception) {
                Log.e(TAG, "–û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ –≤ –æ–∫–Ω–µ $windowType", e)
                return@withContext null
            }
        }
    }
    
    /**
     * –í—ã—Ä–µ–∑–∞–µ—Ç —Ä–µ–≥–∏–æ–Ω –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
     */
    private fun extractRegion(screenshot: Bitmap, rect: Rect): Bitmap? {
        return try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
            val safeLeft = maxOf(0, rect.left)
            val safeTop = maxOf(0, rect.top)
            val safeRight = minOf(screenshot.width, rect.right)
            val safeBottom = minOf(screenshot.height, rect.bottom)
            
            val width = safeRight - safeLeft
            val height = safeBottom - safeTop
            
            if (width <= 0 || height <= 0) {
                Log.w(TAG, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Ä–µ–≥–∏–æ–Ω–∞: ${width}x${height}")
                return null
            }
            
            Bitmap.createBitmap(screenshot, safeLeft, safeTop, width, height)
            
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –≤—ã—Ä–µ–∑–∞–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞", e)
            null
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–æ–≤—ã–º
     */
    private fun isNewResult(newResult: RoundResult, lastResult: RoundResult?): Boolean {
        if (lastResult == null) return true
        
        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        return newResult.redDots != lastResult.redDots ||
               newResult.orangeDots != lastResult.orangeDots ||
               newResult.winner != lastResult.winner
    }
    
    /**
     * üí∞ –≠–ö–û–ù–û–ú–ù–´–ô –ê–ù–ê–õ–ò–ó: AI –∑–∞–ø—Ä–æ—Å—ã —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫—É–±–∏–∫–æ–≤
     */
    private suspend fun analyzeWithEconomicAI(diceRegion: Bitmap, windowType: WindowType): RoundResult? {
        // 1Ô∏è‚É£ –í—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ–º —Å OpenCV (–±—ã—Å—Ç—Ä—ã–π –∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π)
        val openCvResult = DotCounter.count(diceRegion)
        
        // 2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å OpenCV
        if (openCvResult.confidence < RESULT_CONFIDENCE_THRESHOLD) {
            Log.v(TAG, "üìä –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å OpenCV –¥–ª—è $windowType: ${openCvResult.confidence}")
            return null
        }
        
        // 3Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        val previousResult = when (windowType) {
            WindowType.LEFT, WindowType.TOP -> previousLeftDice
            WindowType.RIGHT, WindowType.BOTTOM -> previousRightDice
        }
        
        // 4Ô∏è‚É£ –≠–ö–û–ù–û–ú–ò–Ø: –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –∫—É–±–∏–∫–∏
        val diceChanged = hasDiceChanged(openCvResult, previousResult)
        
        // 5Ô∏è‚É£ –õ–æ–≥–∏–∫–∞ AI –∑–∞–ø—Ä–æ—Å–æ–≤
        val finalResult = when {
            isFirstBet -> {
                Log.d(TAG, "üöÄ –ü–µ—Ä–≤–∞—è —Å—Ç–∞–≤–∫–∞ - —Ç–æ–ª—å–∫–æ OpenCV, AI –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º")
                isFirstBet = false // –ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π —Å—Ç–∞–≤–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ —ç–∫–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º
                RoundResult.fromDotResult(openCvResult)
            }
            
            !diceChanged -> {
                Log.v(TAG, "üìä –ö—É–±–∏–∫–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å - –∏—Å–ø–æ–ª—å–∑—É–µ–º OpenCV (—ç–∫–æ–Ω–æ–º–∏—è —Å—Ä–µ–¥—Å—Ç–≤)")
                RoundResult.fromDotResult(openCvResult)
            }
            
            shouldUseAI() -> {
                Log.d(TAG, "üíé –ö—É–±–∏–∫–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å! –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ AI –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏")
                requestAIAnalysis(diceRegion, openCvResult)
            }
            
            else -> {
                Log.d(TAG, "üìä AI –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º OpenCV")
                RoundResult.fromDotResult(openCvResult)
            }
        }
        
        // 6Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        when (windowType) {
            WindowType.LEFT, WindowType.TOP -> previousLeftDice = openCvResult
            WindowType.RIGHT, WindowType.BOTTOM -> previousRightDice = openCvResult
        }
        
        return finalResult
    }
    
    /**
     * üîç –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –∫—É–±–∏–∫–∏
     */
    private fun hasDiceChanged(current: DotCounter.Result, previous: DotCounter.Result?): Boolean {
        if (previous == null) return true // –ü–µ—Ä–≤—ã–π –∞–Ω–∞–ª–∏–∑
        
        val leftChanged = current.leftDots != previous.leftDots
        val rightChanged = current.rightDots != previous.rightDots
        val confidenceChanged = kotlin.math.abs(current.confidence - previous.confidence) > DICE_CHANGE_THRESHOLD
        
        val changed = leftChanged || rightChanged || confidenceChanged
        
        if (changed) {
            Log.d(TAG, "üé≤ –ò–ó–ú–ï–ù–ï–ù–ò–ï: left ${previous.leftDots}‚Üí${current.leftDots}, right ${previous.rightDots}‚Üí${current.rightDots}")
        }
        
        return changed
    }
    
    /**
     * ü§ñ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ AI
     */
    private fun shouldUseAI(): Boolean {
        val prefsManager = preferencesManager ?: return false
        val mode = prefsManager.getRecognitionMode()
        
        return mode in listOf(
            PreferencesManager.RecognitionMode.OPENAI,
            PreferencesManager.RecognitionMode.GEMINI,
            PreferencesManager.RecognitionMode.HYBRID
        ) && prefsManager.isAIConfigured()
    }
    
    /**
     * üíé –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ AI (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫—É–±–∏–∫–æ–≤)
     */
    private suspend fun requestAIAnalysis(diceRegion: Bitmap, fallbackResult: DotCounter.Result): RoundResult {
        val recognizer = hybridRecognizer
        
        if (recognizer == null) {
            Log.w(TAG, "‚ö†Ô∏è AI –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º OpenCV")
            return RoundResult.fromDotResult(fallbackResult)
        }
        
        return try {
            val aiResult = recognizer.analyzeDice(diceRegion)
            if (aiResult != null) {
                Log.d(TAG, "‚úÖ AI –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: left=${aiResult.leftDots}, right=${aiResult.rightDots}")
                RoundResult.fromDotResult(aiResult)
            } else {
                Log.w(TAG, "‚ö†Ô∏è AI –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å - –∏—Å–ø–æ–ª—å–∑—É–µ–º OpenCV")
                RoundResult.fromDotResult(fallbackResult)
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ AI –∑–∞–ø—Ä–æ—Å–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º OpenCV", e)
            RoundResult.fromDotResult(fallbackResult)
        }
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫—ç—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
     */
    fun resetResultCache() {
        Log.d(TAG, "–°–±—Ä–æ—Å –∫—ç—à–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        lastLeftResult = null
        lastRightResult = null
        lastDetectionTime = 0L
        
        // üí∞ –¢–∞–∫–∂–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —ç–∫–æ–Ω–æ–º–Ω—ã–π –∫—ç—à
        previousLeftDice = null
        previousRightDice = null
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ–∫–Ω–∞
     */
    fun getLastResult(windowType: WindowType): RoundResult? {
        return when (windowType) {
            WindowType.LEFT -> lastLeftResult
            WindowType.RIGHT -> lastRightResult
            WindowType.TOP -> lastLeftResult    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–µ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –≤–µ—Ä—Ö–Ω–µ–≥–æ –æ–∫–Ω–∞
            WindowType.BOTTOM -> lastRightResult // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –Ω–∏–∂–Ω–µ–≥–æ –æ–∫–Ω–∞
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –¥–µ—Ç–µ–∫—Ü–∏—è
     */
    fun isDetectionActive(): Boolean {
        return detectionJob?.isActive == true
    }
    
    // === –°–ï–¢–¢–ï–†–´ –î–õ–Ø –°–õ–£–®–ê–¢–ï–õ–ï–ô ===
    
    fun setOnResultDetectedListener(listener: (WindowType, RoundResult) -> Unit) {
        onResultDetected = listener
    }
    
    fun setOnDetectionErrorListener(listener: (String, Exception?) -> Unit) {
        onDetectionError = listener
    }
    
    /**
     * –û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã
     */
    fun cleanup() {
        Log.d(TAG, "–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ DualModeResultDetector")
        stopDetection()
        detectionScope.cancel()
    }
}
