package com.example.diceautobet.utils

import android.content.Context
import android.util.Log
import okhttp3.*
import okhttp3.Credentials
import java.net.InetSocketAddress
import java.net.Proxy
import java.util.concurrent.TimeUnit
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.launch

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–æ–º
 * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç OkHttp –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è VPN
 */
object ProxyManager {
    private const val TAG = "ProxyManager"
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    private const val DEFAULT_PROXY_HOST = "200.10.39.135"
    private const val DEFAULT_PROXY_PORT = 8000
    private const val DEFAULT_PROXY_USERNAME = "tr6NAW"
    private const val DEFAULT_PROXY_PASSWORD = "Kjohrt"
    
    // üîÑ –†–ï–ó–ï–†–í–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò HTTP –ü–†–û–ö–°–ò (–µ—Å–ª–∏ SOCKS5 –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
    private const val HTTP_FALLBACK_HOST = "138.219.172.121"
    private const val HTTP_FALLBACK_PORT = 8000
    private const val HTTP_FALLBACK_USER = "ZpUR2q"
    private const val HTTP_FALLBACK_PASS = "Hd1foV"
    
    // –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ (–∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ SharedPreferences)
    private var _currentProxyHost = DEFAULT_PROXY_HOST
    private var _currentProxyPort = DEFAULT_PROXY_PORT
    private var _currentProxyUsername = DEFAULT_PROXY_USERNAME
    private var _currentProxyPassword = DEFAULT_PROXY_PASSWORD
    private var _currentProxyType = ProxyType.SOCKS5
    
    // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã –∏ —Å—Ç–∞—Ç—É—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    private var _proxyHttpClient: OkHttpClient? = null
    private var _directHttpClient: OkHttpClient? = null
    private var _isAuthenticated = false
    private var _authenticatedConnection: Call? = null
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏ (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö)
    private var _isProxyEnabled = true
    
    /**
     * –¢–∏–ø—ã –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–æ–≤
     */
    enum class ProxyType {
        SOCKS5, HTTP
    }
    
    /**
     * –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏
     */
    data class ProxyConfig(
        val host: String,
        val port: Int,
        val username: String,
        val password: String,
        val type: ProxyType
    ) {
        fun isValid(): Boolean {
            return host.isNotBlank() && 
                   port in 1..65535 && 
                   username.isNotBlank() && 
                   password.isNotBlank()
        }
    }
    
    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–∂–∏–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏
     */
    fun setProxyEnabled(enabled: Boolean, context: Context? = null) {
        if (_isProxyEnabled != enabled) {
            Log.d(TAG, "üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ–∫—Å–∏: ${if (enabled) "–≤–∫–ª—é—á–µ–Ω" else "–æ—Ç–∫–ª—é—á–µ–Ω (VPN/–ø—Ä—è–º–æ–µ)"}")
            _isProxyEnabled = enabled
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ SharedPreferences, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context?.let {
                val prefs = it.getSharedPreferences("proxy_settings", Context.MODE_PRIVATE)
                prefs.edit().putBoolean("proxy_enabled", enabled).apply()
            }
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã
            resetClient()
            _isAuthenticated = false
            
            // üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ü–†–û–ì–†–ï–í –ø—Ä–∏ —Å–º–µ–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            CoroutineScope(Dispatchers.IO).launch {
                try {
                    Log.d(TAG, "üî• –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥—Ä–µ–≤ –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
                    warmUpConnection()
                } catch (e: Exception) {
                    Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–≥—Ä–µ–≤–∞: ${e.message}")
                }
            }
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–∫—Å–∏
     */
    fun isProxyEnabled(): Boolean = _isProxyEnabled
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ –∏–∑ SharedPreferences
     */
    fun initFromPreferences(context: Context) {
        val prefs = context.getSharedPreferences("proxy_settings", Context.MODE_PRIVATE)
        _isProxyEnabled = prefs.getBoolean("proxy_enabled", true) // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏
        _currentProxyHost = prefs.getString("proxy_host", DEFAULT_PROXY_HOST) ?: DEFAULT_PROXY_HOST
        _currentProxyPort = prefs.getInt("proxy_port", DEFAULT_PROXY_PORT)
        _currentProxyUsername = prefs.getString("proxy_username", DEFAULT_PROXY_USERNAME) ?: DEFAULT_PROXY_USERNAME
        _currentProxyPassword = prefs.getString("proxy_password", DEFAULT_PROXY_PASSWORD) ?: DEFAULT_PROXY_PASSWORD
        
        val typeString = prefs.getString("proxy_type", ProxyType.SOCKS5.name) ?: ProxyType.SOCKS5.name
        _currentProxyType = try {
            ProxyType.valueOf(typeString)
        } catch (e: Exception) {
            ProxyType.SOCKS5 // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é SOCKS5
        }
        
        Log.d(TAG, "üì± –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: ${if (_isProxyEnabled) "–≤–∫–ª—é—á–µ–Ω" else "–æ—Ç–∫–ª—é—á–µ–Ω"}")
        Log.d(TAG, "üì± –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: ${_currentProxyType.name} ${_currentProxyUsername}@${_currentProxyHost}:${_currentProxyPort}")
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏
     */
    fun saveProxyConfig(context: Context, config: ProxyConfig): Boolean {
        if (!config.isValid()) {
            Log.e(TAG, "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏: $config")
            return false
        }
        
        val prefs = context.getSharedPreferences("proxy_settings", Context.MODE_PRIVATE)
        prefs.edit().apply {
            putString("proxy_host", config.host)
            putInt("proxy_port", config.port)
            putString("proxy_username", config.username)
            putString("proxy_password", config.password)
            putString("proxy_type", config.type.name)
        }.apply()
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        _currentProxyHost = config.host
        _currentProxyPort = config.port
        _currentProxyUsername = config.username
        _currentProxyPassword = config.password
        _currentProxyType = config.type
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã –¥–ª—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        resetClient()
        
        Log.d(TAG, "üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: ${config.type.name} ${config.username}@${config.host}:${config.port}")
        return true
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ–∫—Å–∏
     */
    fun getCurrentProxyConfig(): ProxyConfig {
        return ProxyConfig(
            host = _currentProxyHost,
            port = _currentProxyPort,
            username = _currentProxyUsername,
            password = _currentProxyPassword,
            type = _currentProxyType
        )
    }
    
    /**
     * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
     */
    fun resetProxyConfigToDefaults(context: Context) {
        val defaultConfig = ProxyConfig(
            host = DEFAULT_PROXY_HOST,
            port = DEFAULT_PROXY_PORT,
            username = DEFAULT_PROXY_USERNAME,
            password = DEFAULT_PROXY_PASSWORD,
            type = ProxyType.SOCKS5
        )
        
        saveProxyConfig(context, defaultConfig)
        Log.d(TAG, "üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    }
    
    /**
     * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏
     */
    fun validateProxyConfig(host: String, port: String, username: String, password: String): String? {
        if (host.isBlank()) {
            return "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Ö–æ—Å—Ç–∞"
        }
        
        if (!isValidHost(host)) {
            return "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ö–æ—Å—Ç–∞"
        }
        
        if (port.isBlank()) {
            return "–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç"
        }
        
        val portNum = port.toIntOrNull()
        if (portNum == null || portNum !in 1..65535) {
            return "–ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 65535"
        }
        
        if (username.isBlank() || password.isBlank()) {
            return "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å"
        }
        
        return null // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ö–æ—Å—Ç–∞ (IP –∏–ª–∏ –¥–æ–º–µ–Ω)
     */
    private fun isValidHost(host: String): Boolean {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º IP –∞–¥—Ä–µ—Å
        val ipPattern = "^([0-9]{1,3}\\.){3}[0-9]{1,3}$".toRegex()
        if (ipPattern.matches(host)) {
            return host.split(".").all { part ->
                val num = part.toIntOrNull()
                num != null && num in 0..255
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–º–µ–Ω–Ω–æ–µ –∏–º—è
        val domainPattern = "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?(\\.[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?)*$".toRegex()
        return domainPattern.matches(host)
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π OkHttpClient (—Å –ø—Ä–æ–∫—Å–∏ –∏–ª–∏ –±–µ–∑)
     */
    fun getHttpClient(): OkHttpClient {
        return if (_isProxyEnabled) {
            _proxyHttpClient ?: createProxyHttpClient().also { _proxyHttpClient = it }
        } else {
            _directHttpClient ?: createDirectHttpClient().also { _directHttpClient = it }
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π OkHttpClient —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–æ–∫—Å–∏
     */
    private fun createProxyHttpClient(): OkHttpClient {
        Log.d(TAG, "üîß –°–æ–∑–¥–∞–µ–º OkHttp –∫–ª–∏–µ–Ω—Ç —Å –ø—Ä–æ–∫—Å–∏ ${_currentProxyHost}:${_currentProxyPort} (${_currentProxyType.name})")
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        val host = _currentProxyHost
        val port = _currentProxyPort
        val username = _currentProxyUsername
        val password = _currentProxyPassword
        val proxyType = _currentProxyType
        
        Log.d(TAG, "üåê –ò—Å–ø–æ–ª—å–∑—É–µ–º ${proxyType.name}: ${username}@${host}:${port}")
        
        val clientBuilder = OkHttpClient.Builder()
        
        when (proxyType) {
            ProxyType.SOCKS5 -> {
                val proxy = Proxy(Proxy.Type.SOCKS, InetSocketAddress(host, port))
                clientBuilder.proxy(proxy)
                
                // SOCKS5 –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è - —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ + Authenticator
                System.setProperty("java.net.socks.username", username)
                System.setProperty("java.net.socks.password", password)
                System.setProperty("socksProxyHost", host)
                System.setProperty("socksProxyPort", port.toString())
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–π Authenticator –¥–ª—è SOCKS
                val socksAuthenticator = object : java.net.Authenticator() {
                    override fun getPasswordAuthentication(): java.net.PasswordAuthentication {
                        return java.net.PasswordAuthentication(username, password.toCharArray())
                    }
                }
                java.net.Authenticator.setDefault(socksAuthenticator)
                
                Log.d(TAG, "üß¶ SOCKS5 –Ω–∞—Å—Ç—Ä–æ–µ–Ω: ${username}@${host}:${port}")
            }
            
            ProxyType.HTTP -> {
                val proxy = Proxy(Proxy.Type.HTTP, InetSocketAddress(host, port))
                clientBuilder.proxy(proxy)
                
                // HTTP –ø—Ä–æ–∫—Å–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ ProxyAuthenticator
                clientBuilder.proxyAuthenticator { _, response ->
                    val credential = Credentials.basic(username, password)
                    response.request.newBuilder()
                        .header("Proxy-Authorization", credential)
                        .build()
                }
                
                Log.d(TAG, "üåê HTTP –ø—Ä–æ–∫—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: ${username}@${host}:${port}")
            }
        }
        
        return clientBuilder
            // ÔøΩ –£–í–ï–õ–ò–ß–ï–ù–ù–´–ï –¢–ê–ô–ú–ê–£–¢–´ –î–õ–Ø –ù–ï–°–¢–ê–ë–ò–õ–¨–ù–û–ì–û –ü–†–û–ö–°–ò
            .connectTimeout(5, TimeUnit.SECONDS)   // 5 —Å–µ–∫—É–Ω–¥ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (–±—ã–ª–æ 1)
            .readTimeout(8, TimeUnit.SECONDS)      // 8 —Å–µ–∫—É–Ω–¥ –Ω–∞ —á—Ç–µ–Ω–∏–µ (–±—ã–ª–æ 2) 
            .writeTimeout(3, TimeUnit.SECONDS)     // 3 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É (–±—ã–ª–æ 1)
            .callTimeout(12, TimeUnit.SECONDS)     // 12 —Å–µ–∫—É–Ω–¥ –Ω–∞ –≤–µ—Å—å –∑–∞–ø—Ä–æ—Å (–±—ã–ª–æ 3)
            // üöÄ –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–û–ï –ü–ï–†–ï–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –°–û–ï–î–ò–ù–ï–ù–ò–ô
            .connectionPool(ConnectionPool(3, 300, TimeUnit.SECONDS))  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            .retryOnConnectionFailure(true)        // –í–ö–õ–Æ–ß–ê–ï–ú –ø–æ–≤—Ç–æ—Ä—ã –¥–ª—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏
            .followRedirects(false)                // –ù–∏–∫–∞–∫–∏—Ö —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤
            .followSslRedirects(false)             // –ù–∏–∫–∞–∫–∏—Ö SSL —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤
            .pingInterval(5, TimeUnit.SECONDS)     // –ß–∞—Å—Ç—ã–µ keep-alive –ø–∏–Ω–≥–∏
            .addInterceptor { chain ->
                // üöÄ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –ó–ê–ì–û–õ–û–í–ö–ò (pr–æxyAuthenticator –¥–µ–ª–∞–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é)
                val request = chain.request().newBuilder()
                    .header("Connection", "keep-alive") // –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
                    .header("Accept", "application/json") // –û–∂–∏–¥–∞–µ–º JSON
                    .header("User-Agent", "DiceAutoBet-Fast/1.0") // –ö–æ—Ä–æ—Ç–∫–∏–π User-Agent
                    .build()
                    
                Log.d(TAG, "üåê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏: ${request.method} ${request.url}")
                val startTime = System.currentTimeMillis()
                try {
                    val response = chain.proceed(request)
                    val duration = System.currentTimeMillis() - startTime
                    Log.d(TAG, "üì® –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏: ${response.code} ${response.message} (${duration}–º—Å)")
                    response
                } catch (e: Exception) {
                    val duration = System.currentTimeMillis() - startTime
                    Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ (${duration}–º—Å): ${e.message}")
                    throw e
                }
            }
            .build()
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π OkHttpClient –±–µ–∑ –ø—Ä–æ–∫—Å–∏ (–¥–ª—è VPN/–ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è)
     */
    private fun createDirectHttpClient(): OkHttpClient {
        Log.d(TAG, "üåê –°–æ–∑–¥–∞–µ–º OkHttp –∫–ª–∏–µ–Ω—Ç –ë–ï–ó –ø—Ä–æ–∫—Å–∏ (VPN/–ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ)")
        
        // –û—á–∏—â–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏
        System.clearProperty("java.net.socks.username")
        System.clearProperty("java.net.socks.password")
        System.clearProperty("socksProxyHost")
        System.clearProperty("socksProxyPort")
        java.net.Authenticator.setDefault(null)
        
        return OkHttpClient.Builder()
            // –ë—ã—Å—Ç—Ä—ã–µ —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            .connectTimeout(3, TimeUnit.SECONDS)
            .readTimeout(5, TimeUnit.SECONDS)
            .writeTimeout(2, TimeUnit.SECONDS)
            .callTimeout(8, TimeUnit.SECONDS)
            .connectionPool(ConnectionPool(3, 60, TimeUnit.SECONDS))
            .retryOnConnectionFailure(true)
            .followRedirects(false)
            .followSslRedirects(false)
            .addInterceptor { chain ->
                val request = chain.request().newBuilder()
                    .header("Connection", "keep-alive")
                    .header("Accept", "application/json")
                    .header("User-Agent", "DiceAutoBet-Direct/1.0")
                    .build()
                    
                Log.d(TAG, "üåê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –ë–ï–ó –ø—Ä–æ–∫—Å–∏: ${request.method} ${request.url}")
                val startTime = System.currentTimeMillis()
                try {
                    val response = chain.proceed(request)
                    val duration = System.currentTimeMillis() - startTime
                    Log.d(TAG, "üì® –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –ë–ï–ó –ø—Ä–æ–∫—Å–∏: ${response.code} ${response.message} (${duration}–º—Å)")
                    response
                } catch (e: Exception) {
                    val duration = System.currentTimeMillis() - startTime
                    Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ë–ï–ó –ø—Ä–æ–∫—Å–∏ (${duration}–º—Å): ${e.message}")
                    throw e
                }
            }
            .build()
    }
    
    /**
     * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É (—á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ –∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é)
     */
    suspend fun testConnection(): ProxyTestResult = withContext(Dispatchers.IO) {
        return@withContext try {
            Log.d(TAG, "üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (${if (_isProxyEnabled) "—á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏" else "–Ω–∞–ø—Ä—è–º—É—é"})...")
            
            val client = getHttpClient()
            
            // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö URL –¥–ª—è –±–æ–ª—å—à–µ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            val testUrls = listOf(
                "https://httpbin.org/ip",
                "https://ipinfo.io/json",
                "https://api.ipify.org?format=json"
            )
            
            var lastError: String? = null
            
            for (testUrl in testUrls) {
                try {
                    Log.d(TAG, "üåê –¢–µ—Å—Ç–∏—Ä—É–µ–º URL: $testUrl")
                    
                    val request = Request.Builder()
                        .url(testUrl)
                        .get()
                        .addHeader("User-Agent", "DiceAutoBet/1.0")
                        .build()
                    
                    val startTime = System.currentTimeMillis()
                    client.newCall(request).execute().use { response ->
                        val duration = System.currentTimeMillis() - startTime
                        
                        if (response.isSuccessful) {
                            val responseBody = response.body?.string() ?: ""
                            val connectionType = if (_isProxyEnabled) "—á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏" else "–ë–ï–ó –ø—Ä–æ–∫—Å–∏"
                            Log.d(TAG, "‚úÖ –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–µ–Ω $connectionType —á–µ—Ä–µ–∑ $testUrl (${duration}–º—Å)")
                            Log.d(TAG, "üìä –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: $responseBody")
                            
                            // üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó IP –ê–î–†–ï–°–ê
                            if (_isProxyEnabled) {
                                if (responseBody.contains("200.10.39.135")) {
                                    Log.d(TAG, "üéØ SOCKS5 –ø—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ! IP: 200.10.39.135")
                                } else if (responseBody.contains("138.219.172.121")) {
                                    Log.w(TAG, "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è HTTP fallback –ø—Ä–æ–∫—Å–∏! IP: 138.219.172.121")
                                } else {
                                    Log.w(TAG, "ü§î –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π IP –≤ –æ—Ç–≤–µ—Ç–µ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏!")
                                }
                            } else {
                                Log.d(TAG, "üåê –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, IP: ${responseBody.take(50)}...")
                            }
                            
                            return@withContext ProxyTestResult.Success(duration, responseBody)
                        } else {
                            val errorMsg = "HTTP ${response.code}: ${response.message}"
                            Log.w(TAG, "‚ö†Ô∏è –ù–µ—É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç $testUrl: $errorMsg")
                            lastError = errorMsg
                        }
                    }
                } catch (e: Exception) {
                    val errorMsg = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ $testUrl: ${e.message}"
                    Log.w(TAG, "‚ö†Ô∏è $errorMsg")
                    lastError = errorMsg
                }
            }
            
            // –ï—Å–ª–∏ –≤—Å–µ URL –Ω–µ —É–¥–∞–ª–∏—Å—å
            Log.e(TAG, "‚ùå –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ URL –Ω–µ —É–¥–∞–ª–∏—Å—å")
            ProxyTestResult.Error(lastError ?: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∏ –∫ –æ–¥–Ω–æ–º—É —Ç–µ—Å—Ç–æ–≤–æ–º—É —Å–µ—Ä–≤–µ—Ä—É")
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${e.message}", e)
            ProxyTestResult.Error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${e.message}")
        }
    }
    
    /**
     * üöÄ –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–ê–Ø –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø –ò WARM-UP –°–û–ï–î–ò–ù–ï–ù–ò–Ø
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –±—ã—Å—Ç—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
     */
    suspend fun warmUpConnection(): Boolean = withContext(Dispatchers.IO) {
        return@withContext try {
            Log.d(TAG, "üî• –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ warm-up —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
            
            val client = getHttpClient()
            
            // üöÄ –¢–ï–°–¢–ò–†–£–ï–ú –ü–†–Ø–ú–û –° GEMINI API
            val warmUpRequest = Request.Builder()
                .url("https://generativelanguage.googleapis.com/v1beta/models") // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ü–µ–ª–µ–≤–æ–π API
                .get()
                .header("Accept", "application/json")
                .build()
            
            val startTime = System.currentTimeMillis()
            client.newCall(warmUpRequest).execute().use { response ->
                val duration = System.currentTimeMillis() - startTime
                
                Log.d(TAG, "üîç Gemini API —Ç–µ—Å—Ç: –∫–æ–¥ ${response.code}, —Å–æ–æ–±—â–µ–Ω–∏–µ: ${response.message}")
                
                // –î–ª—è Gemini API –¥–∞–∂–µ 401/403 –æ–∑–Ω–∞—á–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–æ–∫—Å–∏
                if (response.isSuccessful || response.code == 401 || response.code == 403 || response.code == 400) {
                    _isAuthenticated = true
                    Log.d(TAG, "‚úÖ SOCKS5 –ø—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å Gemini API (${duration}–º—Å, –∫–æ–¥: ${response.code})")
                    true
                } else {
                    Log.w(TAG, "‚ö†Ô∏è Gemini API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ SOCKS5: ${response.code}")
                    false
                }
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ warm-up —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${e.message}")
            
            // üöÄ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê
            if (e.message?.contains("SOCKS") == true) {
                Log.e(TAG, "üí° SOCKS5 –æ—à–∏–±–∫–∞ - –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                Log.e(TAG, "   1. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ credentials: ${_currentProxyUsername}")
                Log.e(TAG, "   2. –ü—Ä–æ–∫—Å–∏ –±–ª–æ–∫–∏—Ä—É–µ—Ç –¥–æ–º–µ–Ω: generativelanguage.googleapis.com")
                Log.e(TAG, "   3. –ü—Ä–æ–∫—Å–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç HTTPS")
                Log.e(TAG, "   4. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π IP/–ø–æ—Ä—Ç: ${_currentProxyHost}:${_currentProxyPort}")
            }
            false
        }
    }
    
    /**
     * üöÄ –ë–´–°–¢–†–´–ô –ö–õ–ò–ï–ù–¢ –î–õ–Ø –ò–ì–†–û–í–û–ì–û –†–ï–ñ–ò–ú–ê  
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —É–∂–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏ –ø—Ä–æ–≥—Ä–µ—Ç–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
     */
    fun getFastGameClient(): OkHttpClient {
        if (!_isAuthenticated) {
            Log.w(TAG, "‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ–≥—Ä–µ—Ç–æ! –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω–µ–µ")
            // üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ü–†–û–ì–†–ï–í –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
            CoroutineScope(Dispatchers.IO).launch {
                try {
                    Log.d(TAG, "üî• –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥—Ä–µ–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
                    warmUpConnection()
                } catch (e: Exception) {
                    Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–≥—Ä–µ–≤–∞: ${e.message}")
                }
            }
        }
        return getHttpClient()
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    fun getCurrentConnectionInfo(): String {
        return if (_isProxyEnabled) {
            "${_currentProxyHost}:${_currentProxyPort} (${_currentProxyType.name})"
        } else {
            "VPN/–ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"
        }
    }
    
    /**
     * –û—á–∏—â–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã (–¥–ª—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏)
     */
    fun resetClient() {
        Log.d(TAG, "üîÑ –°–±—Ä–æ—Å HTTP –∫–ª–∏–µ–Ω—Ç–æ–≤")
        _proxyHttpClient = null
        _directHttpClient = null
        _isAuthenticated = false
        _authenticatedConnection?.cancel()
        _authenticatedConnection = null
    }
    
    /**
     * üî• –ü–†–û–ì–†–ï–í –°–û–ï–î–ò–ù–ï–ù–ò–Ø –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ–æ–Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞–º–∏
     */
    suspend fun warmupConnection(): WarmupResult = withContext(Dispatchers.IO) {
        val startTime = System.currentTimeMillis()
        
        try {
            Log.d(TAG, "üî• –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≥—Ä–µ–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
            
            val client = getHttpClient()
            val requests = mutableListOf<String>()
            val errors = mutableListOf<String>()
            
            // 1. –ü—Ä–æ–≥—Ä–µ–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Google API
            try {
                Log.d(TAG, "üß† –ü—Ä–æ–≥—Ä–µ–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Google API...")
                val googleUrl = "https://www.googleapis.com"
                val googleRequest = Request.Builder()
                    .url(googleUrl)
                    .head() // HEAD –∑–∞–ø—Ä–æ—Å - –±—ã—Å—Ç—Ä–µ–µ –∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∫–ª—é—á–∞
                    .addHeader("User-Agent", "DiceAutoBet/1.0")
                    .build()
                
                client.newCall(googleRequest).execute().use { response ->
                    // –ü—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π –æ—Ç–≤–µ—Ç –∫–∞–∫ —É—Å–ø–µ—à–Ω—ã–π –ø—Ä–æ–≥—Ä–µ–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                    // 200=OK, 404=Not Found, 405=Method Not Allowed - –≤—Å–µ –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
                    if (response.code in 200..499) {
                        requests.add("Google API: ${response.code}")
                        Log.d(TAG, "‚úÖ Google API —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Ç–æ —É—Å–ø–µ—à–Ω–æ (${response.code})")
                    } else {
                        errors.add("Google API: ${response.code}")
                        Log.w(TAG, "‚ö†Ô∏è Google API –ø—Ä–æ–≥—Ä–µ–≤ —Å –æ—à–∏–±–∫–æ–π: ${response.code}")
                    }
                }
            } catch (e: Exception) {
                errors.add("Google API: ${e.message}")
                Log.w(TAG, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞ Google API: ${e.message}")
            }
            
            // 2. –ü—Ä–æ–≥—Ä–µ–≤ BetBoom API
            try {
                Log.d(TAG, "üé∞ –ü—Ä–æ–≥—Ä–µ–≤–∞–µ–º BetBoom API...")
                val betboomUrl = "https://betboom.ru"
                val betboomRequest = Request.Builder()
                    .url(betboomUrl)
                    .head() // HEAD –∑–∞–ø—Ä–æ—Å –±—ã—Å—Ç—Ä–µ–µ
                    .addHeader("User-Agent", "Mozilla/5.0 (Android)")
                    .build()
                
                client.newCall(betboomRequest).execute().use { response ->
                    // –ü—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π –æ—Ç–≤–µ—Ç 2xx, 3xx, 4xx –∫–∞–∫ —É—Å–ø–µ—à–Ω—ã–π –ø—Ä–æ–≥—Ä–µ–≤
                    if (response.code in 200..499) {
                        requests.add("BetBoom: ${response.code}")
                        Log.d(TAG, "‚úÖ BetBoom –ø—Ä–æ–≥—Ä–µ—Ç —É—Å–ø–µ—à–Ω–æ (${response.code})")
                    } else {
                        errors.add("BetBoom: ${response.code}")
                        Log.w(TAG, "‚ö†Ô∏è BetBoom –ø—Ä–æ–≥—Ä–µ–≤ —Å –æ—à–∏–±–∫–æ–π: ${response.code}")
                    }
                }
            } catch (e: Exception) {
                errors.add("BetBoom: ${e.message}")
                Log.w(TAG, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞ BetBoom: ${e.message}")
            }
            
            // 3. –û—Ç–º–µ—á–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ–≥—Ä–µ—Ç–æ–µ
            _isAuthenticated = true
            
            val totalTime = System.currentTimeMillis() - startTime
            val connectionType = if (_isProxyEnabled) "–ø—Ä–æ–∫—Å–∏" else "–ø—Ä—è–º–æ–µ"
            
            Log.d(TAG, "üî• –ü—Ä–æ–≥—Ä–µ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${totalTime}–º—Å —á–µ—Ä–µ–∑ $connectionType —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
            
            WarmupResult.Success(
                duration = totalTime,
                connectionType = connectionType,
                successfulRequests = requests,
                errors = errors
            )
            
        } catch (e: Exception) {
            val totalTime = System.currentTimeMillis() - startTime
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (${totalTime}–º—Å): ${e.message}", e)
            
            WarmupResult.Error(
                duration = totalTime,
                error = e.message ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
            )
        }
    }

    /**
     * –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
     */
    sealed class ProxyTestResult {
        data class Success(val duration: Long, val response: String) : ProxyTestResult()
        data class Error(val message: String) : ProxyTestResult()
    }
    
    /**
     * –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≥—Ä–µ–≤–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
     */
    sealed class WarmupResult {
        data class Success(
            val duration: Long,
            val connectionType: String,
            val successfulRequests: List<String>,
            val errors: List<String>
        ) : WarmupResult()
        
        data class Error(
            val duration: Long,
            val error: String
        ) : WarmupResult()
    }
}
