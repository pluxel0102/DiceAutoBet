package com.example.diceautobet.utils

import com.example.diceautobet.models.AreaType

/**
 * –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–∞–≤–æ–∫ –¥–ª—è –¥–≤–æ–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
 * 
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—Å–µ –±–∞–∑–æ–≤—ã–µ —Å—Ç–∞–≤–∫–∏: 10, 20, 50, 100, 500, 2500
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∫–Ω–æ–ø–∫—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–≤–æ–µ–Ω–∏–π –¥–ª—è –ª—é–±–æ–π —Å—É–º–º—ã
 */
object BetCalculator {
    
    // –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞–≤–æ–∫ –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è
    private val AVAILABLE_BUTTONS = listOf(2500, 500, 100, 50, 10)
    
    // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞
    private const val MAX_BET = 30000
    
    /**
     * –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–∞–≤–∫–∏
     */
    data class BetStrategy(
        val buttonAmount: Int,        // –°—É–º–º–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è (10, 50, 100, 500, 2500)
        val doublingClicks: Int,      // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–∫–∏ x2
        val finalAmount: Int,         // –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏
        val areaType: AreaType        // –¢–∏–ø –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è
    ) {
        /**
         * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –≤–∞–ª–∏–¥–Ω–æ–π
         */
        fun isValid(): Boolean = finalAmount <= MAX_BET && doublingClicks >= 0
        
        /**
         * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É–¥–≤–æ–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–π –±–∞–∑–æ–≤–æ–π —Å—Ç–∞–≤–∫–∏
         */
        fun getDoublingSequence(): List<Int> {
            val sequence = mutableListOf<Int>()
            var current = buttonAmount
            
            // –î–ª—è —Å—Ç–∞–≤–∫–∏ 20 (10 + x2) –Ω–∞—á–∏–Ω–∞–µ–º —Å—Ä–∞–∑—É —Å 20
            if (buttonAmount == 10 && doublingClicks > 0) {
                current = 20 // 10 + x2 = 20
                sequence.add(current)
                
                // –û—Å—Ç–∞–ª—å–Ω—ã–µ —É–¥–≤–æ–µ–Ω–∏—è
                repeat(doublingClicks - 1) {
                    current *= 2
                    if (current <= MAX_BET) {
                        sequence.add(current)
                    }
                }
            } else {
                // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫: –æ–±—ã—á–Ω—ã–µ —É–¥–≤–æ–µ–Ω–∏—è
                sequence.add(current)
                repeat(doublingClicks) {
                    current *= 2
                    if (current <= MAX_BET) {
                        sequence.add(current)
                    }
                }
            }
            
            return sequence
        }
    }
    
    /**
     * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å—Ç–∞–≤–∫–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—É–º–º—ã
     */
    fun calculateBetStrategy(targetAmount: Int): BetStrategy {
        when (targetAmount) {
            // –ü—Ä—è–º—ã–µ –∫–Ω–æ–ø–∫–∏ –±–µ–∑ —É–¥–≤–æ–µ–Ω–∏–π
            10 -> return BetStrategy(10, 0, 10, AreaType.BET_10)
            50 -> return BetStrategy(50, 0, 50, AreaType.BET_50)
            100 -> return BetStrategy(100, 0, 100, AreaType.BET_100)
            500 -> return BetStrategy(500, 0, 500, AreaType.BET_500)
            2500 -> return BetStrategy(2500, 0, 2500, AreaType.BET_2500)
            
            // –°—Ç–∞–≤–∫–∞ 20 = 10 + x2
            20 -> return BetStrategy(10, 1, 20, AreaType.BET_10)
            
            else -> {
                // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—É–º–º –∏—â–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é
                return findOptimalStrategy(targetAmount)
            }
        }
    }
    
    /**
     * –ò—â–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Å—É–º–º—ã
     */
    private fun findOptimalStrategy(targetAmount: Int): BetStrategy {
        // –ü—Ä–æ–±—É–µ–º –∫–∞–∂–¥—É—é –∫–Ω–æ–ø–∫—É –∏ –∏—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–≤–æ–µ–Ω–∏–π
        for (buttonAmount in AVAILABLE_BUTTONS) {
            val strategy = calculateForButton(buttonAmount, targetAmount)
            if (strategy.isValid() && strategy.finalAmount == targetAmount) {
                return strategy
            }
        }
        
        // –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –±–ª–∏–∂–∞–π—à—É—é –º–µ–Ω—å—à—É—é —Å—É–º–º—É
        for (buttonAmount in AVAILABLE_BUTTONS) {
            val strategy = findClosestStrategy(buttonAmount, targetAmount)
            if (strategy.isValid()) {
                return strategy
            }
        }
        
        // –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω—É—é —Å—Ç–∞–≤–∫—É
        return BetStrategy(2500, 4, 40000.coerceAtMost(MAX_BET), AreaType.BET_2500)
    }
    
    /**
     * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–Ω–æ–ø–∫–∏
     */
    private fun calculateForButton(buttonAmount: Int, targetAmount: Int): BetStrategy {
        var current = buttonAmount
        var doublings = 0
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π –¥–ª—è —Å—Ç–∞–≤–∫–∏ 20 (10 + x2)
        if (buttonAmount == 10 && targetAmount >= 20) {
            current = 20 // 10 + x2
            doublings = 1
            
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —É–¥–≤–∞–∏–≤–∞—Ç—å –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω–µ–º —Ü–µ–ª–∏
            while (current < targetAmount && current <= MAX_BET / 2) {
                current *= 2
                doublings++
            }
        } else {
            // –û–±—ã—á–Ω—ã–µ —É–¥–≤–æ–µ–Ω–∏—è
            while (current < targetAmount && current <= MAX_BET / 2) {
                current *= 2
                doublings++
            }
        }
        
        val areaType = getAreaTypeForButton(buttonAmount)
        return BetStrategy(buttonAmount, doublings, current, areaType)
    }
    
    /**
     * –ò—â–µ—Ç –±–ª–∏–∂–∞–π—à—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é, –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—â—É—é —Ü–µ–ª–µ–≤—É—é —Å—É–º–º—É
     */
    private fun findClosestStrategy(buttonAmount: Int, targetAmount: Int): BetStrategy {
        var current = buttonAmount
        var doublings = 0
        var lastValid = BetStrategy(buttonAmount, 0, buttonAmount, getAreaTypeForButton(buttonAmount))
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π –¥–ª—è —Å—Ç–∞–≤–∫–∏ 20 (10 + x2)
        if (buttonAmount == 10) {
            current = 20 // 10 + x2
            doublings = 1
            if (current <= targetAmount) {
                lastValid = BetStrategy(buttonAmount, doublings, current, getAreaTypeForButton(buttonAmount))
            }
        }
        
        // –£–¥–≤–∞–∏–≤–∞–µ–º –ø–æ–∫–∞ –Ω–µ –ø—Ä–µ–≤—ã—Å–∏–º —Ü–µ–ª—å –∏–ª–∏ –º–∞–∫—Å–∏–º—É–º
        while (current <= MAX_BET / 2) {
            val next = current * 2
            if (next <= targetAmount && next <= MAX_BET) {
                current = next
                doublings++
                lastValid = BetStrategy(buttonAmount, doublings, current, getAreaTypeForButton(buttonAmount))
            } else {
                break
            }
        }
        
        return lastValid
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∏–ø –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞–≤–∫–∏
     */
    private fun getAreaTypeForButton(buttonAmount: Int): AreaType {
        return when (buttonAmount) {
            10 -> AreaType.BET_10
            50 -> AreaType.BET_50
            100 -> AreaType.BET_100
            500 -> AreaType.BET_500
            2500 -> AreaType.BET_2500
            else -> AreaType.BET_10 // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É–¥–≤–æ–µ–Ω–∏–π –¥–ª—è –±–∞–∑–æ–≤–æ–π —Å—Ç–∞–≤–∫–∏
     */
    fun generateDoublingSequence(baseBet: Int): List<Int> {
        val sequence = mutableListOf<Int>()
        var current = baseBet
        
        // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞–≤–∫—É
        sequence.add(current)
        
        // –£–¥–≤–∞–∏–≤–∞–µ–º –¥–æ –º–∞–∫—Å–∏–º—É–º–∞
        while (current <= MAX_BET / 2) {
            current *= 2
            if (current <= MAX_BET) {
                sequence.add(current)
            }
        }
        
        return sequence
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—É–º–º–∞ –≤–∞–ª–∏–¥–Ω–æ–π –±–∞–∑–æ–≤–æ–π —Å—Ç–∞–≤–∫–æ–π
     */
    fun isValidBaseBet(amount: Int): Boolean {
        return amount in listOf(10, 20, 50, 100, 500, 2500)
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é —Å—Ç–∞–≤–∫—É –ø—Ä–∏ —É–¥–≤–æ–µ–Ω–∏–∏
     */
    fun getNextBet(currentBet: Int): Int {
        val doubled = currentBet * 2
        return doubled.coerceAtMost(MAX_BET)
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω—É—é —Å—Ç–∞–≤–∫—É
     */
    fun getMaxBet(): Int = MAX_BET
    
    /**
     * –õ–æ–≥–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
     */
    fun logStrategy(strategy: BetStrategy, tag: String = "BetCalculator") {
        android.util.Log.d(tag, "üé∞ –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å—Ç–∞–≤–∫–∏:")
        android.util.Log.d(tag, "   –ö–Ω–æ–ø–∫–∞: ${strategy.buttonAmount}")
        android.util.Log.d(tag, "   –£–¥–≤–æ–µ–Ω–∏–π: ${strategy.doublingClicks}")
        android.util.Log.d(tag, "   –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: ${strategy.finalAmount}")
        android.util.Log.d(tag, "   –û–±–ª–∞—Å—Ç—å: ${strategy.areaType}")
        android.util.Log.d(tag, "   –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${strategy.getDoublingSequence()}")
    }
}
