package com.example.diceautobet.controllers

import android.content.Context
import android.content.Intent
import android.util.Log
import android.media.projection.MediaProjectionManager
import com.example.diceautobet.MediaProjectionRequestActivity
import com.example.diceautobet.game.ScreenCaptureManager
import com.example.diceautobet.opencv.DotCounter
import com.example.diceautobet.recognition.HybridDiceRecognizer
import android.graphics.Bitmap
import android.graphics.Rect
import com.example.diceautobet.game.ClickManager
import com.example.diceautobet.managers.DualWindowAreaManager
import com.example.diceautobet.managers.MediaProjectionPermissionManager
import com.example.diceautobet.models.*
import com.example.diceautobet.utils.PreferencesManager
import com.example.diceautobet.automation.DualModeBetPlacer
import com.example.diceautobet.utils.SplitScreenUtils
import com.example.diceautobet.utils.BetCalculator
import kotlinx.coroutines.*
import kotlinx.coroutines.delay
import java.io.File
import java.io.FileOutputStream
import java.text.SimpleDateFormat
import java.util.*
import java.security.MessageDigest
import java.nio.ByteBuffer

/**
 * –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–≤–æ–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π
 *
 * –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –ª–æ–≥–∏–∫–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º:
 * 1. –°—Ç–∞—Ä—Ç: BET_10 + DOUBLE_BUTTON (20 —Ä—É–±–ª–µ–π) –Ω–∞ –∫—Ä–∞—Å–Ω—ã–π –∫—É–±–∏–∫ –≤ –ø–µ—Ä–≤–æ–º –æ–∫–Ω–µ
 * 2. –ü—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–µ: BET_10 + DOUBLE_BUTTON (20 —Ä—É–±–ª–µ–π) –Ω–∞ —Ç–æ—Ç –∂–µ —Ü–≤–µ—Ç –≤ —Å–æ—Å–µ–¥–Ω–µ–º –æ–∫–Ω–µ
 * 3. –ü—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ: —Å—Ç–∞–≤–∫–∞ √ó2 –Ω–∞ —Ç–æ—Ç –∂–µ —Ü–≤–µ—Ç –≤ —Å–æ—Å–µ–¥–Ω–µ–º –æ–∫–Ω–µ (20‚Üí40‚Üí80‚Üí160‚Üí320‚Üí640‚Üí...‚Üí30000)
 * 4. –ü–æ—Å–ª–µ 2 –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π –ø–æ–¥—Ä—è–¥ –Ω–∞ –æ–¥–Ω–æ–º —Ü–≤–µ—Ç–µ: –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –¥—Ä—É–≥–æ–π —Ü–≤–µ—Ç + —Å—Ç–∞–≤–∫–∞ √ó2 –≤ —Å–æ—Å–µ–¥–Ω–µ–º –æ–∫–Ω–µ
 * 5. –ü–æ—Å–ª–µ 2 –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π –Ω–∞ –Ω–æ–≤–æ–º —Ü–≤–µ—Ç–µ: –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ü–≤–µ—Ç + —Å—Ç–∞–≤–∫–∞ √ó2 –≤ —Å–æ—Å–µ–¥–Ω–µ–º –æ–∫–Ω–µ
 *
 * –ù–û–í–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø (9 —Å–µ–Ω—Ç—è–±—Ä—è 2025):
 * üîß –£–õ–£–ß–®–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –î–ï–¢–ï–ö–¶–ò–ò –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:
 *    - –ü–∏–∫—Å–µ–ª—å–Ω–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —á–µ—Ä–µ–∑ MD5 —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–µ–π
 *    - –£–º–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
 *    - –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: OpenCV + Gemini —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
 *    - –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ–≤—ã—à–µ–Ω–∞ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –∏ —Å–Ω–∏–∂–µ–Ω—ã –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ API
 *
 * üéØ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –î–ï–¢–ï–ö–¶–ò–ò:
 *    1. –§–∞–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π: –î–µ—Ç–µ–∫—Ü–∏—è –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é MD5 —Ö–µ—à–∞ –æ–±–ª–∞—Å—Ç–∏ –∫—É–±–∏–∫–æ–≤ (–∫–∞–∂–¥—ã–µ 50–º—Å)
 *    2. –§–∞–∑–∞ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏: –û–∂–∏–¥–∞–Ω–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ (—Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ö–µ—à 0.4+ —Å–µ–∫)
 *    3. –§–∞–∑–∞ –∞–Ω–∞–ª–∏–∑–∞: –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ OpenCV —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (1 –∫–∞–¥—Ä)
 *    4. –§–∞–∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ Gemini API –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
 *
 * ‚ö° –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê–Ø –°–ö–û–†–û–°–¢–¨:
 *    - –î–µ—Ç–µ–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π: –∫–∞–∂–¥—ã–µ 50–º—Å (–≤ 3 —Ä–∞–∑–∞ –±—ã—Å—Ç—Ä–µ–µ)
 *    - –°—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è —Ö–µ—à–∞: 0.4 —Å–µ–∫—É–Ω–¥—ã (–≤ 2 —Ä–∞–∑–∞ –±—ã—Å—Ç—Ä–µ–µ)
 *    - OpenCV –≤–∞–ª–∏–¥–∞—Ü–∏—è: –º–≥–Ω–æ–≤–µ–Ω–Ω–æ (1 –∫–∞–¥—Ä –≤–º–µ—Å—Ç–æ 2)
 *    - –û–±—â–µ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ: –±–æ–ª–µ–µ —á–µ–º –≤ 2 —Ä–∞–∑–∞
 *
 * üîß –ó–ê–©–ò–¢–ê –û–¢ –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:
 *    - –î–æ–±–∞–≤–ª–µ–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
 *    - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω–µ–µ 3 —Å–µ–∫—É–Ω–¥ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
 *    - –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –ª–æ–∂–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ –ø—Ä–∏ –∑–∞–¥–µ—Ä–∂–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É–±–∏–∫–æ–≤
 *
 * üé® –¶–ò–ö–õ–ò–ß–ï–°–ö–ê–Ø –°–ú–ï–ù–ê –¶–í–ï–¢–û–í:
 *    - –ü—Ä–∏ 2 –ø—Ä–æ–∏–≥—Ä—ã—à–∞—Ö –Ω–∞ red ‚Üí –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ orange
 *    - –ü—Ä–∏ 2 –ø—Ä–æ–∏–≥—Ä—ã—à–∞—Ö –Ω–∞ orange ‚Üí –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞ red
 *    - –ò —Ç–∞–∫ —Ü–∏–∫–ª–∏—á–Ω–æ: red ‚Üî orange ‚Üî red ‚Üî orange...
 *
 * üí∞ –£–í–ï–õ–ò–ß–ï–ù–ù–´–ô –õ–ò–ú–ò–¢ –£–î–í–û–ï–ù–ò–Ø:
 *    - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞ —Å 2.500 –¥–æ 30.000 —Ä—É–±–ª–µ–π
 *    - –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –¥–µ–ª–∞—Ç—å –±–æ–ª—å—à–µ —É–¥–≤–æ–µ–Ω–∏–π –ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–Ω–æ–π —Å–µ—Ä–∏–∏
 *
 * –í–∞–∂–Ω–æ: –æ–∫–Ω–æ –í–°–ï–ì–î–ê –º–µ–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ä–∞—É–Ω–¥–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –∏–≥—Ä–æ–π!
 *
 * –†–£–ß–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –û–ë–õ–ê–°–¢–ï–ô:
 * –ï—Å–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –ª–∏—à–Ω–∏–µ —á–∞—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä,
 * –ø—Ä–∞–≤—É—é —á–∞—Å—Ç—å —Å –ø—Ä–æ—à–ª—ã–º–∏ –∫—É–±–∏–∫–∞–º–∏), –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä—É—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
 *
 * –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
 * ```
 * // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—á–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è TOP –æ–∫–Ω–∞ (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –ø–∏–∫—Å–µ–ª—è—Ö)
 * controller.setManualResultArea(WindowType.TOP, 100, 200, 400, 350)
 *
 * // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π –æ–±–ª–∞—Å—Ç–∏
 * val currentArea = controller.getCurrentResultArea(WindowType.TOP)
 * Log.d(TAG, "–¢–µ–∫—É—â–∞—è –æ–±–ª–∞—Å—Ç—å: $currentArea")
 *
 * // –°–±—Ä–æ—Å –∫ –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é
 * controller.resetResultAreaToAuto(WindowType.TOP)
 * ```
 */
class SimpleDualModeController(
    private val context: Context,
    private val clickManager: ClickManager,
    private val preferencesManager: PreferencesManager,
    private val areaManager: DualWindowAreaManager
) {
    companion object {
        private const val TAG = "SimpleDualModeController"
        // –£–±–∏—Ä–∞–µ–º —Ö–∞—Ä–¥–∫–æ–¥ MIN_BET - –∏—Å–ø–æ–ª—å–∑—É–µ–º baseBet –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        private const val MAX_BET = 30000 // –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ 30.000 —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
        private const val FAST_CLICK_DELAY = 0L // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
        private const val CLICK_DELAY = 0L // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
        private const val DICE_CHANGE_THRESHOLD = 1 // –ü–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É–±–∏–∫–æ–≤
        private const val RESULT_IGNORE_TIME_MS = 3000L // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ (3 —Å–µ–∫)
    }

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
    private var gameState = SimpleDualModeState()
    private var gameJob: Job? = null
    private var screenCaptureManager: ScreenCaptureManager? = null
    private var betPlacer: DualModeBetPlacer? = null
    private var lastDetectedRound: RoundResult? = null
    private var lastResultProcessTime: Long = 0L // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    // –û–∫–Ω–æ, –≤ –∫–æ—Ç–æ—Ä–æ–º –ë–´–õ–ê —Ä–∞–∑–º–µ—â–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç–∞–≤–∫–∞
    private var lastBetWindow: WindowType? = null
    // –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ —Å–º–µ—â–µ–Ω–∏—è ROI –ø–æ –æ–∫–Ω–∞–º (–¥–ª—è –¥–≤–æ–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞)
    private val roiYOffsetMap = mutableMapOf<WindowType, Int>()

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–≤–æ–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ (–∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–º–µ—Å—Ç–æ –∫–æ–Ω—Å—Ç–∞–Ω—Ç)
    private lateinit var dualModeSettings: DualModeSettings

    // –û—Ç–ª–∞–¥–∫–∞: –ø–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
    private var debugFolder: File? = null

    // üí∞ –≠–ö–û–ù–û–ú–ù–û–ï —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∫—É–±–∏–∫–æ–≤ —Å –¥–µ—Ç–µ–∫—Ü–∏–µ–π –∏–∑–º–µ–Ω–µ–Ω–∏–π
    private val hybridRecognizer = com.example.diceautobet.recognition.HybridDiceRecognizer(preferencesManager)

    // –ö–æ–ª–ª–±—ç–∫–∏
    var onError: ((String) -> Unit)? = null
    var onBetPlaced: ((WindowType, BetChoice, Int) -> Unit)? = null
    var onWindowSwitched: ((WindowType) -> Unit)? = null
    var onColorChanged: ((BetChoice) -> Unit)? = null
    var onStateChanged: ((SimpleDualModeState) -> Unit)? = null
    var onResultDetected: ((RoundResult) -> Unit)? = null

    init {
        Log.d(TAG, "üéÆ –°–æ–∑–¥–∞–Ω SimpleDualModeController")
        // –†–∞–Ω–µ–µ –∑–¥–µ—Å—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–ª–∏—Å—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã DICE_AREA.
        // –≠—Ç–æ –ø—Ä–∏–≤–æ–¥–∏–ª–æ –∫ —Ç–æ–º—É, —á—Ç–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏–ª–æ –Ω–µ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π ROI, –∞ –≤ –≤–µ—Ä—Ö–Ω–µ–π –ø–æ–ª–æ—Å–µ —ç–∫—Ä–∞–Ω–∞.
        // –¢–µ–ø–µ—Ä—å –ù–ò–ß–ï–ì–û –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –æ–±–ª–∞—Å—Ç–∏.
        setupDiceAreaCoordinates()

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–ø–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if (preferencesManager.isDebugImagesEnabled()) {
            initDebugFolder()
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç DICE_AREA –¥–ª—è TOP –∏ BOTTOM –æ–∫–æ–Ω
     * –¢–µ–∫—É—â–∞—è –ø—Ä–æ–±–ª–µ–º–∞: DICE_AREA –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –æ–±–µ –∏–≥—Ä—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
     * –†–µ—à–µ–Ω–∏–µ: —Ä–∞–∑–¥–µ–ª–∏—Ç—å –æ–±–ª–∞—Å—Ç—å –Ω–∞ –≤–µ—Ä—Ö–Ω—é—é –∏ –Ω–∏–∂–Ω—é—é —á–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞
     */
    private fun setupDiceAreaCoordinates() {
        // –ë–æ–ª—å—à–µ –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º DICE_AREA. –¢–æ–ª—å–∫–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±–ª–∞—Å—Ç–µ–π.
        try {
            val dualModeSettings = preferencesManager.getDualModeSettings()
            val splitScreenType = dualModeSettings.splitScreenType
            val windows = when (splitScreenType) {
                SplitScreenType.HORIZONTAL -> listOf(WindowType.LEFT, WindowType.RIGHT)
                SplitScreenType.VERTICAL -> listOf(WindowType.TOP, WindowType.BOTTOM)
            }
            Log.d(TAG, "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ DICE_AREA –±–µ–∑ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–ø–∏—Å–∏ (${splitScreenType})")
            windows.forEach { w ->
                val areas = areaManager.getAreasForWindow(w)
                val betResult = areas[AreaType.BET_RESULT] ?: areas[AreaType.DICE_AREA]
                if (betResult != null) {
                    val type = if (areas[AreaType.BET_RESULT] != null) "BET_RESULT" else "DICE_AREA"
                    Log.d(TAG, "‚úÖ –û–±–ª–∞—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ($type) –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è $w: ${betResult.rect}")
                } else {
                    Log.w(TAG, "‚ö†Ô∏è –û–±–ª–∞—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (BET_RESULT/DICE_AREA) –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è $w ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç–∫—Ä–∞–Ω –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–ª–∞—Å—Ç–µ–π")
                }
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–ª–∞—Å—Ç–µ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: ${e.message}")
        }
    }

    private fun setupLeftRightDiceAreas() {
        // –ú–µ—Ç–æ–¥ –æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏, –Ω–æ –±–æ–ª–µ–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.
        Log.d(TAG, "‚ÑπÔ∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É DICE_AREA –¥–ª—è LEFT/RIGHT")
    }

    private fun setupTopBottomDiceAreas() {
        // –ú–µ—Ç–æ–¥ –æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏, –Ω–æ –±–æ–ª–µ–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.
        Log.d(TAG, "‚ÑπÔ∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É DICE_AREA –¥–ª—è TOP/BOTTOM")
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–ø–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
     */
    private fun initDebugFolder() {
        try {
            val timestamp = SimpleDateFormat("yyyyMMdd_HHmmss", Locale.getDefault()).format(Date())

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ)
            val appExternalDir = context.getExternalFilesDir(null)
            debugFolder = File(appExternalDir, "DiceAutoBet_Debug_$timestamp")

            if (!debugFolder!!.exists()) {
                val created = debugFolder!!.mkdirs()
                if (created) {
                    Log.d(TAG, "üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${debugFolder!!.absolutePath}")
                    Log.d(TAG, "üìç –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ: Android/data/com.example.diceautobet/files/DiceAutoBet_Debug_$timestamp")

                    // –°–æ–∑–¥–∞–µ–º README —Ñ–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                    createDebugReadme()
                } else {
                    Log.w(TAG, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                    debugFolder = null
                }
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${e.message}", e)
            debugFolder = null
        }
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç README —Ñ–∞–π–ª —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
     */
    private fun createDebugReadme() {
        try {
            val readmeFile = File(debugFolder, "README.txt")
            val readmeContent = """
–û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è SimpleDualModeController
==============================================

–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${SimpleDateFormat("dd.MM.yyyy HH:mm:ss", Locale.getDefault()).format(Date())}
–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: Android/data/com.example.diceautobet/files/

–í–ê–ñ–ù–û: –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –¥–∞–Ω–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
(–Ω–∞–ø—Ä–∏–º–µ—Ä, Root Explorer, Total Commander –∏–ª–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∫ –ü–ö)

–¢–∏–ø—ã —Ñ–∞–π–ª–æ–≤:
- fullscreen_[–û–ö–ù–û]_[–í–†–ï–ú–Ø].png - –ü–æ–ª–Ω—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —ç–∫—Ä–∞–Ω–∞
- cropped_[–û–ö–ù–û]_[–í–†–ï–ú–Ø]_R[–ö–†_–¢–û–ß–ö–ò]O[–û–†_–¢–û–ß–ö–ò]_conf[–£–í–ï–†–ï–ù–ù–û–°–¢–¨].png - –í—ã—Ä–µ–∑–∞–Ω–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞ –∫—É–±–∏–∫–æ–≤

–û–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –æ–∫–æ–Ω:
- TOP - –í–µ—Ä—Ö–Ω–µ–µ –æ–∫–Ω–æ (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ)
- BOTTOM - –ù–∏–∂–Ω–µ–µ –æ–∫–Ω–æ (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ)  
- LEFT - –õ–µ–≤–æ–µ –æ–∫–Ω–æ (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ)
- RIGHT - –ü—Ä–∞–≤–æ–µ –æ–∫–Ω–æ (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ)

–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:
- R[—á–∏—Å–ª–æ] - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–∞—Å–Ω—ã—Ö —Ç–æ—á–µ–∫ (–ª–µ–≤—ã–π –∫—É–±–∏–∫)
- O[—á–∏—Å–ª–æ] - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ä–∞–Ω–∂–µ–≤—ã—Ö —Ç–æ—á–µ–∫ (–ø—Ä–∞–≤—ã–π –∫—É–±–∏–∫)
- conf[—á–∏—Å–ª–æ] - —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è (0.0-1.0)

–í—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: HHmmss_SSS (—á–∞—Å—ã/–º–∏–Ω—É—Ç—ã/—Å–µ–∫—É–Ω–¥—ã/–º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã)

–ü—Ä–∏–º–µ—Ä—ã –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤:
- fullscreen_TOP_143052_123.png - –ø–æ–ª–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –≤–µ—Ä—Ö–Ω–µ–≥–æ –æ–∫–Ω–∞ –≤ 14:30:52.123
- cropped_TOP_143052_456_R3O5_conf0.85.png - –æ–±–ª–∞—Å—Ç—å –∫—É–±–∏–∫–æ–≤: 3 –∫—Ä–∞—Å–Ω—ã—Ö, 5 –æ—Ä–∞–Ω–∂–µ–≤—ã—Ö, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å 85%

–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:
1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤ cropped –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö –≤–∏–¥–Ω—ã –∏–º–µ–Ω–Ω–æ –∫—É–±–∏–∫–∏
2. –°—Ä–∞–≤–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ—á–µ–∫
3. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (confidence) - –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å > 0.5
4. –ï—Å–ª–∏ –æ–±–ª–∞—Å—Ç–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∏—Ö –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
            """.trimIndent()

            readmeFile.writeText(readmeContent)
            Log.d(TAG, "üìÑ –°–æ–∑–¥–∞–Ω README —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ –æ—Ç–ª–∞–¥–∫–∏")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è README —Ñ–∞–π–ª–∞: ${e.message}")
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫—Ä–æ–ø, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ Gemini, –≤ –∫–∞—Ç–∞–ª–æ–≥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    private fun saveGeminiCropImage(crop: Bitmap, window: WindowType, quick: DotCounter.Result?) {
        try {
            val dir = File(context.getExternalFilesDir(null), "Gemini_Crops")
            if (!dir.exists()) dir.mkdirs()
            val ts = SimpleDateFormat("yyyyMMdd_HHmmss_SSS", Locale.getDefault()).format(Date())
            val dots = quick?.let { "_R${it.leftDots}O${it.rightDots}" } ?: ""
            val file = File(dir, "gemini_crop_${window}_${ts}${dots}.jpg")
            FileOutputStream(file).use { out ->
                crop.compress(Bitmap.CompressFormat.JPEG, 90, out)
                out.flush()
            }
            Log.d(TAG, "üíæ Gemini-–∫—Ä–æ–ø —Å–æ—Ö—Ä–∞–Ω—ë–Ω: ${file.absolutePath}")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Gemini-–∫—Ä–æ–ø–∞: ${e.message}", e)
        }
    }

    /**
     * –û–¢–ö–õ–Æ–ß–ï–ù–û: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
     */
    private fun saveDebugImage(bitmap: Bitmap, filename: String, description: String = "") {
        // –ü–û–õ–ù–û–°–¢–¨–Æ –û–¢–ö–õ–Æ–ß–ï–ù–û –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏!
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞ –¥–∏—Å–∫ –æ—Ç–Ω–∏–º–∞–µ—Ç —Å–µ–∫—É–Ω–¥—ã - –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è betting
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    private fun createDebugFilename(prefix: String, window: WindowType, dots: DotCounter.Result? = null): String {
        val timestamp = SimpleDateFormat("HHmmss_SSS", Locale.getDefault()).format(Date())
        val dotsInfo = dots?.let { dotResult -> "_R${dotResult.leftDots}O${dotResult.rightDots}_conf${String.format("%.2f", dotResult.confidence)}" } ?: ""
        return "${prefix}_${window}_${timestamp}${dotsInfo}.png"
    }

    /**
     * –î–µ–ª–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    private suspend fun takeTestScreenshot() {
        try {
            Log.d(TAG, "üì∏ –î–µ–ª–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ...")
            val scm = screenCaptureManager
            if (scm == null) {
                Log.w(TAG, "‚ö†Ô∏è ScreenCaptureManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞")
                return
            }

            val shot = scm.captureScreen()
            if (shot is GameResult.Success) {
                val testFilename = "test_startup_${SimpleDateFormat("HHmmss", Locale.getDefault()).format(Date())}.png"
                saveDebugImage(shot.data, testFilename, "–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ")
                Log.d(TAG, "‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: $testFilename")
            } else {
                Log.w(TAG, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç")
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: ${e.message}")
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–≤–æ–π–Ω–æ–π —Ä–µ–∂–∏–º
     */
    fun startDualMode() {
        Log.d(TAG, "üöÄ –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –¥–≤–æ–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞")
        roiYOffsetMap.clear()

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ª–∏ –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è –¥–≤–æ–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        Log.d(TAG, "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –æ–±–ª–∞—Å—Ç–µ–π...")
        if (!checkAreasConfigured()) {
            Log.e(TAG, "‚ùå –û–±–ª–∞—Å—Ç–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –≤—ã—Ö–æ–¥–∏–º –∏–∑ startDualMode()")
            return
        }
        Log.d(TAG, "‚úÖ –û–±–ª–∞—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

        // üîß –í–†–ï–ú–ï–ù–ù–û–ï –†–ï–®–ï–ù–ò–ï: –†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–ª–∞—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–¥ –≤–∞—à —ç–∫—Ä–∞–Ω –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–∂–Ω–æ–π –¥–µ—Ç–µ–∫—Ü–∏–∏
        // –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —á–µ—Ä–µ–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç - —Å–º. —Ñ–∞–π–ª MANUAL_AREA_SETUP.md

        try {
            val dualModeSettings = preferencesManager.getDualModeSettings()
            val splitScreenType = dualModeSettings.splitScreenType

            // –ü—Ä–∏–º–µ—Ä –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (–¢–†–ï–ë–£–Æ–¢ –ù–ê–°–¢–†–û–ô–ö–ò –ø–æ–¥ –≤–∞—à —ç–∫—Ä–∞–Ω!)
            when (splitScreenType) {
                SplitScreenType.VERTICAL -> {
                    // –î–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è (TOP/BOTTOM)
                    // setManualResultArea(WindowType.TOP, 150, 250, 450, 380)
                    Log.d(TAG, "üìù –î–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–∂–Ω–æ–π –¥–µ—Ç–µ–∫—Ü–∏–∏ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—ã—à–µ")
                }
                SplitScreenType.HORIZONTAL -> {
                    // –î–ª—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è (LEFT/RIGHT)
                    // setManualResultArea(WindowType.LEFT, 50, 300, 250, 450)
                    // setManualResultArea(WindowType.RIGHT, 550, 300, 750, 450)
                    Log.d(TAG, "üìù –î–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–∂–Ω–æ–π –¥–µ—Ç–µ–∫—Ü–∏–∏ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—ã—à–µ")
                }
            }
        } catch (e: Exception) {
            Log.w(TAG, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ä—É—á–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –æ–±–ª–∞—Å—Ç–µ–π: ${e.message}")
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞ (–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∞–∑—ã —Å—Ç–∞–≤–æ–∫/—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞)
        Log.d(TAG, "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∑–∞—Ö–≤–∞—Ç–∞ —ç–∫—Ä–∞–Ω–∞...")
        if (!ensureScreenCaptureReady()) {
            Log.e(TAG, "‚ùå –ó–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞ –Ω–µ –≥–æ—Ç–æ–≤, –≤—ã—Ö–æ–¥–∏–º –∏–∑ startDualMode()")
            onError?.invoke("üîë –î–ª—è —Ä–∞–±–æ—Ç—ã —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∑–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞.\n\n–ù–∞–∂–º–∏—Ç–µ '–†–∞–∑—Ä–µ—à–∏—Ç—å' –≤ –æ—Ç–∫—Ä—ã–≤—à–µ–º—Å—è –æ–∫–Ω–µ, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –∑–µ–ª–µ–Ω—É—é –∫–Ω–æ–ø–∫—É –µ—â–µ —Ä–∞–∑.")
            return
        }
        Log.d(TAG, "‚úÖ –ó–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞ –≥–æ—Ç–æ–≤")

        // ‚úÖ –ó–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞ –≥–æ—Ç–æ–≤ - –Ω–∏–∫–∞–∫–∏—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–ª–∞–≥–æ–≤ –Ω–µ –Ω—É–∂–Ω–æ
        Log.d(TAG, "‚úÖ –ó–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞ –≥–æ—Ç–æ–≤, –ª–æ–≥–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ waitForStableResult()")

        // –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        if (preferencesManager.isDebugImagesEnabled()) {
            CoroutineScope(Dispatchers.IO).launch {
                takeTestScreenshot()
            }
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DualModeBetPlacer –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        if (betPlacer == null) {
            betPlacer = DualModeBetPlacer(context, areaManager)
            Log.d(TAG, "‚úÖ DualModeBetPlacer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        }

        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–≤–æ–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        dualModeSettings = preferencesManager.getDualModeSettings()
        val splitScreenType = dualModeSettings.splitScreenType

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        val initialWindow = when (splitScreenType) {
            SplitScreenType.HORIZONTAL -> WindowType.LEFT
            SplitScreenType.VERTICAL -> WindowType.TOP
        }

        Log.d(TAG, "–ù–∞—á–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Ç–∏–ø–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è $splitScreenType: $initialWindow")
        Log.d(TAG, "üí∞ –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${dualModeSettings.baseBet}")

        gameState = SimpleDualModeState(
            isRunning = true,
            currentWindow = initialWindow,
            currentColor = BetChoice.RED, // –ù–∞—á–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç: –∫—Ä–∞—Å–Ω—ã–π
            previousColor = null, // –ü—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ü–≤–µ—Ç–∞ –Ω–µ—Ç –≤ –Ω–∞—á–∞–ª–µ
            currentBet = dualModeSettings.baseBet, // –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            consecutiveLosses = 0,
            consecutiveLossesOnCurrentColor = 0,
            totalBets = 0,
            totalProfit = 0,
            lastResult = GameResultType.UNKNOWN
        )

        Log.d(TAG, "‚úÖ –î–≤–æ–π–Ω–æ–π —Ä–µ–∂–∏–º –∑–∞–ø—É—â–µ–Ω: $gameState")
        notifyStateChanged()

        // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
        gameJob = CoroutineScope(Dispatchers.Main).launch {
            try {
                // –ü–ï–†–í–ê–Ø –°–¢–ê–í–ö–ê: —Ä–∞–∑–º–µ—â–∞–µ–º —Å—Ä–∞–∑—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
                Log.d(TAG, "üöÄ –†–∞–∑–º–µ—â–∞–µ–º –ü–ï–†–í–£–Æ —Å—Ç–∞–≤–∫—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ...")
                placeBetOnly()
                // –ë–∞–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º –æ–∫–Ω–µ
                lastBetWindow = gameState.currentWindow

                // –ó–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ–∏—Å–∫–∞ —Å–º–µ–Ω—ã –∫—É–±–∏–∫–æ–≤
                runGameLoop()
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –≤ –∏–≥—Ä–æ–≤–æ–º —Ü–∏–∫–ª–µ", e)
                onError?.invoke("–û—à–∏–±–∫–∞ –≤ –∏–≥—Ä–æ–≤–æ–º —Ü–∏–∫–ª–µ: ${e.message}")
            }
        }
    }

    /**
     * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–≤–æ–π–Ω–æ–π —Ä–µ–∂–∏–º
     */
    fun stopDualMode() {
        Log.d(TAG, "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –¥–≤–æ–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞")

        gameState = gameState.copy(isRunning = false)
        gameJob?.cancel()
        gameJob = null

        // –û—á–∏—Å—Ç–∫–∞ DualModeBetPlacer
        betPlacer?.cleanup()
        betPlacer = null

        notifyStateChanged()
    }

    /**
     * –†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–ª–∞—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º
     * –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é, –µ—Å–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –ª–∏—à–Ω–∏–µ —á–∞—Å—Ç–∏
     *
     * @param windowType - —Ç–∏–ø –æ–∫–Ω–∞ (TOP, LEFT, RIGHT, BOTTOM)
     * @param left - –ª–µ–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –æ–±–ª–∞—Å—Ç–∏ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
     * @param top - –≤–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –æ–±–ª–∞—Å—Ç–∏ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
     * @param right - –ø—Ä–∞–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –æ–±–ª–∞—Å—Ç–∏ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
     * @param bottom - –Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –æ–±–ª–∞—Å—Ç–∏ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
     */
    fun setManualResultArea(windowType: WindowType, left: Int, top: Int, right: Int, bottom: Int) {
        Log.d(TAG, "üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä—É—á–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è $windowType: [$left, $top, $right, $bottom]")
        areaManager.setManualResultArea(windowType, left, top, right, bottom)
    }

    /**
     * –°–±—Ä–æ—Å –æ–±–ª–∞—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é
     */
    fun resetResultAreaToAuto(windowType: WindowType) {
        Log.d(TAG, "üîÑ –°–±—Ä–æ—Å –æ–±–ª–∞—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è $windowType –∫ –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é")
        areaManager.resetResultAreaToAuto(windowType)
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –æ–±–ª–∞—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
     */
    fun getCurrentResultArea(windowType: WindowType): Rect? {
        return try {
            val areas = areaManager.getAreasForWindow(windowType)
            val resultArea = areas[AreaType.BET_RESULT] ?: areas[AreaType.BET_RESULT] ?: areas[AreaType.DICE_AREA]
            resultArea?.rect
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${e.message}")
            null
        }
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª —Å –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ú –ø–æ–∏—Å–∫–æ–º —Å–º–µ–Ω—ã –∫—É–±–∏–∫–æ–≤ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π —Å—Ç–∞–≤–∫–æ–π
     */
    private suspend fun runGameLoop() {
        var isFirstRound = true // –§–ª–∞–≥ –ø–µ—Ä–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞

        while (gameState.isRunning) {
            try {
                if (isFirstRound) {
                    // –ü–ï–†–í–´–ô –†–ê–£–ù–î: –°—Ç–∞–≤–∫–∞ —É–∂–µ —Å–¥–µ–ª–∞–Ω–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ -> –ø—Ä–æ—Å—Ç–æ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–∞–ª–∏–¥–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    Log.d(TAG, "üéØ –ü–ï–†–í–´–ô –†–ê–£–ù–î: –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–∞–ª–∏–¥–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–∑ —Å—Ç–∞–≤–æ–∫ –∏ –±–µ–∑ Gemini")

                    // –í–ê–ñ–ù–û: –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –¥—Ä—É–≥–æ–µ –æ–∫–Ω–æ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (—Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è)
                    val prev = gameState.currentWindow
                    val next = getNextWindow(prev)
                    gameState = gameState.copy(currentWindow = next)
                    try { areaManager.setActiveWindow(next) } catch (_: Exception) {}
                    Log.d(TAG, "üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –æ–∫–Ω–æ ${prev} ‚Üí ${next} –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")

                    // –ñ–¥–µ–º –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ (–Ω–æ –ù–ï –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –≤—ã–∏–≥—Ä—ã—à/–ø—Ä–æ–∏–≥—Ä—ã—à)
                    val firstResult = withTimeoutOrNull(15000L) {
                        waitForFirstResult(gameState.currentWindow)
                    }

                    if (firstResult != null) {
                        Log.d(TAG, "üìù –ó–∞–ø–æ–º–Ω–∏–ª–∏ –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${firstResult.redDots}:${firstResult.orangeDots} (–ù–ï –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç–∞–≤–∫–∏)")
                        lastDetectedRound = firstResult
                        onResultDetected?.invoke(firstResult)
                    }

                    isFirstRound = false
                    continue // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ü–∏–∫–ª—É –ë–ï–ó –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç–∞–≤–∫–∏
                }

                // –û–ë–´–ß–ù–´–ï –†–ê–£–ù–î–´: –∂–¥–µ–º —Ñ–∞–∑—É ¬´–∏—Å—á–µ–∑–ª–∏ ‚Üí –ø–æ—è–≤–∏–ª–∏—Å—å¬ª —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –¥–µ—Ç–µ–∫—Ü–∏–µ–π
                Log.d(TAG, "üîç –û–∂–∏–¥–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫—É–±–∏–∫–æ–≤ (—É–ª—É—á—à–µ–Ω–Ω–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è)...")
                val detectedResult = withTimeoutOrNull(35000L) { // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
                    detectDiceChangeAndStabilize(gameState.currentWindow)
                }

                if (detectedResult != null) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–∏ —ç—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    if (shouldIgnoreResult(detectedResult)) {
                        Log.w(TAG, "‚ö†Ô∏è –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫...")
                        continue
                    }

                    // –≠–¢–ê–ü 2: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (—É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —á–µ—Ä–µ–∑ Gemini)
                    val gameResult = convertRoundResultToGameResult(detectedResult)

                    // –≠–¢–ê–ü 3: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é)
                    processResult(gameResult)

                    // –≠–¢–ê–ü 4: –†–∞–∑–º–µ—â–∞–µ–º —Å—Ç–∞–≤–∫—É —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–æ–∫–Ω–æ —É–∂–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –≤ processResult)
                    placeBetOnly()

                    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –¥–µ—Ç–µ–∫—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    onResultDetected?.invoke(detectedResult)
                    lastDetectedRound = detectedResult

                    Log.d(TAG, "‚úÖ –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω: –¥–µ—Ç–µ–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π ‚Üí —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è ‚Üí Gemini ‚Üí —Å—Ç–∞–≤–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∞ ‚Üí –æ–∫–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ")
                } else {
                    Log.w(TAG, "‚ö†Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏—è –∫—É–±–∏–∫–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã —É–ª—É—á—à–µ–Ω–Ω–æ–π –¥–µ—Ç–µ–∫—Ü–∏–µ–π, –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–∏—Å–∫...")
                }

                // –ë–ï–ó –ü–ê–£–ó! –°—Ä–∞–∑—É –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ü–∏–∫–ª—É –ø–æ–∏—Å–∫–∞ —Å–º–µ–Ω—ã

            } catch (e: CancellationException) {
                break
            } catch (e: Exception) {
                onError?.invoke("–û—à–∏–±–∫–∞ –≤ –∏–≥—Ä–æ–≤–æ–º —Ü–∏–∫–ª–µ: ${e.message}")
                break
            }
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º (—Ç–æ—Ç –∂–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ)
     */
    private fun shouldIgnoreResult(result: RoundResult?): Boolean {
        if (result == null) return true

        val currentTime = System.currentTimeMillis()
        val lastRound = lastDetectedRound

        // –ï—Å–ª–∏ —ç—Ç–æ —Ç–æ—Ç –∂–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω–µ–µ RESULT_IGNORE_TIME_MS, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        if (lastRound != null &&
            lastRound.redDots == result.redDots &&
            lastRound.orangeDots == result.orangeDots &&
            (currentTime - lastResultProcessTime) < RESULT_IGNORE_TIME_MS) {

            Log.d(TAG, "üö´ –ò–ì–ù–û–†–ò–†–£–ï–ú –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${result.redDots}:${result.orangeDots} (–ø—Ä–æ—à–ª–æ ${currentTime - lastResultProcessTime}ms)")
            return true
        }

        return false
    }

    /**
     * –ü–†–û–°–¢–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ - –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é Gemini
     */
    private fun processResult(result: GameResultType) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        val currentTime = System.currentTimeMillis()
        if ((currentTime - lastResultProcessTime) < RESULT_IGNORE_TIME_MS) {
            Log.d(TAG, "üö´ –ò–ì–ù–û–†–ò–†–£–ï–ú —Ä–µ–∑—É–ª—å—Ç–∞—Ç: —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ –ø–æ—Å–ª–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ (${currentTime - lastResultProcessTime}ms)")
            return
        }

        lastResultProcessTime = currentTime

        // –ü–†–û–°–¢–ê–Ø –õ–û–ì–ò–ö–ê: –í—Å–µ–≥–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–∫–Ω—É –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        val prevWindow = gameState.currentWindow
        // –ß–µ—Ä–µ–¥—É–µ–º –æ—Ç –æ–∫–Ω–∞ –ü–û–°–õ–ï–î–ù–ï–ô –°–¢–ê–í–ö–ò, –∞ –Ω–µ –æ—Ç –æ–∫–Ω–∞ –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        val basisWindow = lastBetWindow ?: prevWindow
        val nextWindow = getNextWindow(basisWindow)
        Log.d(TAG, "ü™ü –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ–∫–Ω–∞ –ø–æ—Å–ª–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: –æ—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç–∞–≤–∫–µ –≤ ${basisWindow} ‚Üí —Å–ª–µ–¥—É—é—â–∏–π ${nextWindow} (result=${result})")

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π
        val newConsecutiveLosses = if (result == GameResultType.WIN) 0 else gameState.consecutiveLosses + 1
        val newConsecutiveLossesOnCurrentColor = if (result == GameResultType.WIN) 0 else gameState.consecutiveLossesOnCurrentColor + 1

        // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –°–ú–ï–ù–´ –¶–í–ï–¢–ê: –ü–æ—Å–ª–µ 2 –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π –ø–æ–¥—Ä—è–¥ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è —Ü–∏–∫–ª–∏—á–Ω–æ
        var newColor = gameState.currentColor
        var newPreviousColor = gameState.previousColor

        if (newConsecutiveLossesOnCurrentColor >= 2) {
            Log.d(TAG, "üé® –°–ú–ï–ù–ê –¶–í–ï–¢–ê: 2 –ø—Ä–æ–∏–≥—Ä—ã—à–∞ –ø–æ–¥—Ä—è–¥ –Ω–∞ ${gameState.currentColor}")

            if (gameState.previousColor != null && gameState.previousColor != gameState.currentColor) {
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Ü–≤–µ—Ç—É
                newColor = gameState.previousColor!!
                newPreviousColor = gameState.currentColor
                Log.d(TAG, "üîÑ –í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Ü–≤–µ—Ç—É: ${gameState.currentColor} ‚Üí ${newColor}")
            } else {
                // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π —Ü–≤–µ—Ç
                newPreviousColor = gameState.currentColor
                newColor = when (gameState.currentColor) {
                    BetChoice.RED -> BetChoice.ORANGE
                    BetChoice.ORANGE -> BetChoice.RED
                }
                Log.d(TAG, "üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π —Ü–≤–µ—Ç: ${gameState.currentColor} ‚Üí ${newColor}")
            }

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π –Ω–∞ —Ü–≤–µ—Ç–µ –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã
            // newConsecutiveLossesOnCurrentColor –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º, —Ç–∞–∫ –∫–∞–∫ –º—ã –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —É–¥–≤–∞–∏–≤–∞—Ç—å —Å—Ç–∞–≤–∫—É
            onColorChanged?.invoke(newColor)
        }

        // –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º:
        // - –ü—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–µ: –±–∞–∑–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        // - –ü—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ: —É–¥–≤–æ–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ (–¥–æ MAX_BET = 30.000)
        // - –ü—Ä–∏ –Ω–∏—á—å–µ–π: –∫–∞–∫ –ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ (—É–¥–≤–æ–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏)
        // - UNKNOWN: —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ –ø—Ä–æ–∏–≥—Ä—ã—à (—É–¥–≤–æ–µ–Ω–∏–µ), —á—Ç–æ–±—ã –Ω–µ —Ç–µ—Ä—è—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        val nextBet = when (result) {
            GameResultType.WIN -> dualModeSettings.baseBet // –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            GameResultType.LOSS, GameResultType.DRAW, GameResultType.UNKNOWN -> (gameState.currentBet * 2).coerceAtMost(MAX_BET)
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π
        gameState = gameState.copy(
            currentWindow = nextWindow,
            currentColor = newColor,
            previousColor = newPreviousColor,
            currentBet = nextBet,
            consecutiveLosses = newConsecutiveLosses,
            consecutiveLossesOnCurrentColor = if (newColor != gameState.currentColor) 0 else newConsecutiveLossesOnCurrentColor,
            totalBets = gameState.totalBets + 1,
            totalProfit = gameState.totalProfit + when (result) {
                GameResultType.WIN -> gameState.currentBet
                GameResultType.LOSS -> -gameState.currentBet
                GameResultType.DRAW -> -gameState.currentBet  // –ù–∏—á—å—è = –ø—Ä–æ–∏–≥—Ä—ã—à
                GameResultType.UNKNOWN -> 0  // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –ø—Ä–∏–±—ã–ª—å
            },
            lastResult = result
        )

        Log.d(TAG, "üìä –û–ë–ù–û–í–õ–ï–ù–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï:")
        Log.d(TAG, "   üéØ –¶–≤–µ—Ç: ${gameState.currentColor} (–ø—Ä–µ–¥—ã–¥—É—â–∏–π: ${gameState.previousColor})")
        Log.d(TAG, "   üí∞ –°—Ç–∞–≤–∫–∞: ${gameState.currentBet} (–º–∞–∫—Å: $MAX_BET)")
        Log.d(TAG, "   üìà –ü—Ä–æ–∏–≥—Ä—ã—à–µ–π –ø–æ–¥—Ä—è–¥: ${gameState.consecutiveLosses}")
        Log.d(TAG, "   üé® –ü—Ä–æ–∏–≥—Ä—ã—à–µ–π –Ω–∞ —Ü–≤–µ—Ç–µ: ${gameState.consecutiveLossesOnCurrentColor}")

        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –æ–±–ª–∞—Å—Ç–µ–π —Å –Ω–æ–≤—ã–º –∞–∫—Ç–∏–≤–Ω—ã–º –æ–∫–Ω–æ–º (–ë–ï–ó –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏)
        try {
            areaManager.setActiveWindow(nextWindow)
            // –£–±–∏—Ä–∞–µ–º –∏–∑–±—ã—Ç–æ—á–Ω—É—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É –æ–±–ª–∞—Å—Ç–µ–π - –æ–Ω–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
            // areaManager.getAreasForWindow(nextWindow)
        } catch (_: Exception) {}

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Å–º–µ–Ω–µ –æ–∫–Ω–∞
        onWindowSwitched?.invoke(gameState.currentWindow)
        notifyStateChanged()
    }
    /**
     * –†–∞–∑–º–µ—â–∞–µ—Ç —Å—Ç–∞–≤–∫—É –∏ –æ–∂–∏–¥–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
     */
    private suspend fun placeBetAndWaitResult() {
        if (!gameState.isRunning) return

        try {
            // –ü–æ–ª—É—á–∞–µ–º –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –æ–∫–Ω–∞
            val targetWindow = gameState.currentWindow

            // 1. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å—Ç–∞–≤–∫–∏ —á–µ—Ä–µ–∑ BetCalculator
            val strategy = BetCalculator.calculateBetStrategy(gameState.currentBet)
            BetCalculator.logStrategy(strategy, TAG)
            placeBetBaseAmount(targetWindow, strategy.buttonAmount)

            // 2. –ö–ª–∏–∫–∞–µ–º –ø–æ —Ü–≤–µ—Ç—É –∫—É–±–∏–∫–∞ –≤ –Ω—É–∂–Ω–æ–º –æ–∫–Ω–µ
            val colorButtonType = getColorButtonType(gameState.currentColor)
            val colorArea = areaManager.getAreaForWindow(targetWindow, colorButtonType)

            if (colorArea == null) {
                val colorName = if (gameState.currentColor == BetChoice.RED) "–ö—Ä–∞—Å–Ω—ã–π –∫—É–±–∏–∫" else "–û—Ä–∞–Ω–∂–µ–≤—ã–π –∫—É–±–∏–∫"
                val errorMsg = "‚ùå –û–±–ª–∞—Å—Ç—å —Ü–≤–µ—Ç–∞ '$colorName' –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è –æ–∫–Ω–∞ $targetWindow"
                onError?.invoke(errorMsg)
                return
            }

            val colorResult = clickManager.clickAreaFast(colorArea, FAST_CLICK_DELAY)
            if (colorResult !is GameResult.Success) {
                Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —Ü–≤–µ—Ç—É")
                onError?.invoke("–û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —Ü–≤–µ—Ç—É ${gameState.currentColor}")
                return
            }

            // 3. –î–µ–ª–∞–µ–º —É–¥–≤–æ–µ–Ω–∏—è –ü–û–°–õ–ï –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞
            if (strategy.doublingClicks > 0) {
                applyDoublingClicks(targetWindow, strategy.doublingClicks)
            }

            // 4. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Å—Ç–∞–≤–∫—É –≤ –Ω—É–∂–Ω–æ–º –æ–∫–Ω–µ
            val confirmArea = areaManager.getAreaForWindow(targetWindow, AreaType.CONFIRM_BET)

            if (confirmArea == null) {
                val errorMsg = "‚ùå –û–±–ª–∞—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è –æ–∫–Ω–∞ $targetWindow"
                Log.e(TAG, errorMsg)
                onError?.invoke(errorMsg)
                return
            }

            val confirmResult = clickManager.clickAreaFast(confirmArea, FAST_CLICK_DELAY)
            if (confirmResult !is GameResult.Success) {
                onError?.invoke("–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏")
                return
            }

            onBetPlaced?.invoke(gameState.currentWindow, gameState.currentColor, gameState.currentBet)

            // 4. –ñ–¥–µ–º –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫—É–±–∏–∫–æ–≤
            val detectedResult = withTimeoutOrNull(15000L) { // –°–æ–∫—Ä–∞—â–∞–µ–º –¥–æ 15 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
                waitForStableResult(gameState.currentWindow)
            }

            if (detectedResult != null) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–∏ —ç—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if (shouldIgnoreResult(detectedResult)) {
                    Log.w(TAG, "‚ö†Ô∏è –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ placeBetAndWaitResult –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω")
                    return
                }

                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º RoundResult –≤ GameResultType
                val gameResult = convertRoundResultToGameResult(detectedResult)

                // 5. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                processResult(gameResult)

                // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –¥–µ—Ç–µ–∫—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                onResultDetected?.invoke(detectedResult)
                lastDetectedRound = detectedResult
            } else {
                Log.w(TAG, "‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è")

                // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –æ–∂–∏–¥–∞–Ω–∏–µ–º
                Log.d(TAG, "üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
                // –ë–ï–ó –ó–ê–î–ï–†–ñ–ö–ò! –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞

                val retryResult = withTimeoutOrNull(8000L) { // –ë—ã—Å—Ç—Ä–∞—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞
                    waitForStableResult(gameState.currentWindow, maxAttempts = 30) // –ú–µ–Ω—å—à–µ –ø–æ–ø—ã—Ç–æ–∫
                }

                if (retryResult != null) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–∏ —ç—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    if (shouldIgnoreResult(retryResult)) {
                        Log.w(TAG, "‚ö†Ô∏è –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ retry –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω")
                        return
                    }

                    val gameResult = convertRoundResultToGameResult(retryResult)
                    processResult(gameResult)
                    onResultDetected?.invoke(retryResult)
                    lastDetectedRound = retryResult
                } else {
                    Log.e(TAG, "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")
                    onError?.invoke("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫—É–±–∏–∫–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –æ–±–ª–∞—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (BET_RESULT/DICE_AREA) –¥–ª—è –æ–∫–Ω–∞ ${gameState.currentWindow}")
                    return
                }
            }

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏", e)
            onError?.invoke("–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏: ${e.message}")
        }
    }

    /**
     * –†–∞–∑–º–µ—â–∞–µ—Ç —Å—Ç–∞–≤–∫—É –ë–ï–ó –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–¥–ª—è –Ω–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞)
     */
    private suspend fun placeBetOnly() {
        if (!gameState.isRunning) return

        try {
            // –ü–æ–ª—É—á–∞–µ–º –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –æ–∫–Ω–∞
            val targetWindow = gameState.currentWindow
            Log.d(TAG, "ü™ü –°—Ç–∞–≤–∫–∞ –±—É–¥–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∞ –≤ –æ–∫–Ω–µ: ${targetWindow}, —Ü–≤–µ—Ç=${gameState.currentColor}, —Å—É–º–º–∞=${gameState.currentBet}")

            // 1. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å—Ç–∞–≤–∫–∏ —á–µ—Ä–µ–∑ BetCalculator
            val strategy = BetCalculator.calculateBetStrategy(gameState.currentBet)
            BetCalculator.logStrategy(strategy, TAG)
            placeBetBaseAmount(targetWindow, strategy.buttonAmount)

            // 2. –ö–ª–∏–∫–∞–µ–º –ø–æ —Ü–≤–µ—Ç—É –∫—É–±–∏–∫–∞ –≤ –Ω—É–∂–Ω–æ–º –æ–∫–Ω–µ
            val colorButtonType = getColorButtonType(gameState.currentColor)
            val colorArea = areaManager.getAreaForWindow(targetWindow, colorButtonType)

            if (colorArea == null) {
                val colorName = if (gameState.currentColor == BetChoice.RED) "–ö—Ä–∞—Å–Ω—ã–π –∫—É–±–∏–∫" else "–û—Ä–∞–Ω–∂–µ–≤—ã–π –∫—É–±–∏–∫"
                val errorMsg = "‚ùå –û–±–ª–∞—Å—Ç—å —Ü–≤–µ—Ç–∞ '$colorName' –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è –æ–∫–Ω–∞ $targetWindow"
                onError?.invoke(errorMsg)
                return
            }

            val colorResult = clickManager.clickAreaFast(colorArea, FAST_CLICK_DELAY)
            if (colorResult !is GameResult.Success) {
                onError?.invoke("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞ –∫—É–±–∏–∫–∞")
                return
            }

            // 2.1. –ü—Ä–∏–º–µ–Ω—è–µ–º —É–¥–≤–æ–µ–Ω–∏—è, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
            if (strategy.doublingClicks > 0) {
                applyDoublingClicks(targetWindow, strategy.doublingClicks)
            }

            // 3. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Å—Ç–∞–≤–∫—É –≤ –Ω—É–∂–Ω–æ–º –æ–∫–Ω–µ
            val confirmArea = areaManager.getAreaForWindow(targetWindow, AreaType.CONFIRM_BET)

            if (confirmArea == null) {
                val errorMsg = "‚ùå –û–±–ª–∞—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è –æ–∫–Ω–∞ $targetWindow"
                Log.e(TAG, errorMsg)
                onError?.invoke(errorMsg)
                return
            }

            val confirmResult = clickManager.clickAreaFast(confirmArea, FAST_CLICK_DELAY)
            if (confirmResult !is GameResult.Success) {
                onError?.invoke("–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏")
                return
            }

            onBetPlaced?.invoke(gameState.currentWindow, gameState.currentColor, gameState.currentBet)
            // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –æ–∫–Ω–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π —Å—Ç–∞–≤–∫–∏ –¥–ª—è —Å—Ç—Ä–æ–≥–æ–≥–æ —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏—è
            lastBetWindow = targetWindow
            Log.d(TAG, "‚úÖ –°—Ç–∞–≤–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∞: ${gameState.currentBet} –Ω–∞ ${gameState.currentColor} –≤ –æ–∫–Ω–µ ${gameState.currentWindow}")

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏", e)
            onError?.invoke("–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏: ${e.message}")
        }
    }

    // === –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–∂–∏–¥–∞–Ω–∏—è —ç—Ç–∞–ø–æ–≤ —Ä–∞—É–Ω–¥–∞ ===

    // –ì–æ—Ç–æ–≤–∏–º/–ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞
    private fun ensureScreenCaptureReady(): Boolean {
        return try {
            if (screenCaptureManager == null) {
                Log.d(TAG, "–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π ScreenCaptureManager —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è")
                screenCaptureManager = ScreenCaptureManager(context)
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∞–ª–∏–¥–µ–Ω –ª–∏ —Ç–µ–∫—É—â–∏–π MediaProjection
            if (screenCaptureManager?.isCapturing() == true && screenCaptureManager?.validateMediaProjection() == true) {
                Log.d(TAG, "ScreenCaptureManager —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                return true
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è (—á–µ—Ä–µ–∑ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä)
            val permissionManager = MediaProjectionPermissionManager.getInstance(context)
            if (!permissionManager.hasPermission()) {
                Log.d(TAG, "üîë –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
                requestPermissionAndStop("–ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∑–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞")
                return false
            }

            Log.d(TAG, "–ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π ScreenCaptureManager —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º")
            val res = screenCaptureManager!!.startCapture()

            if (res is GameResult.Error) {
                Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ä—Ç–∞ –∑–∞—Ö–≤–∞—Ç–∞: ${res.message}")

                // –ï—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º
                if (res.message.contains("—Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ") || res.message.contains("Permission") ||
                    res.message.contains("—É—Å—Ç–∞—Ä–µ–ª–æ") || res.message.contains("–Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω")) {
                    Log.d(TAG, "üîë –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ")
                    requestPermissionAndStop("–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∑–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞ —É—Å—Ç–∞—Ä–µ–ª–æ")
                } else {
                    // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –ø—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º
                    stopDualMode("–û—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ —ç–∫—Ä–∞–Ω–∞: ${res.message}")
                }

                return false
            }

            true
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∑–∞—Ö–≤–∞—Ç–∞", e)
            false
        }
    }

    // –ñ–¥—ë–º –ø–µ—Ä–≤—ã–π –≤–∞–ª–∏–¥–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è)
    private suspend fun waitForFirstResult(window: WindowType, maxAttempts: Int = 60): RoundResult? {
        var attempts = 0

        Log.d(TAG, "üîç –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –æ–∫–Ω–∞ $window")

        while (attempts < maxAttempts && gameState.isRunning) {
            try {
                val result = captureAndAnalyze(window)

                // –ü—Ä–∏–Ω–∏–º–∞–µ–º –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–æ–±–∞ —Ü–≤–µ—Ç–∞ > 0)
                if (result != null && result.redDots > 0 && result.orangeDots > 0) {
                    Log.d(TAG, "üìù –ü–µ—Ä–≤—ã–π –≤–∞–ª–∏–¥–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${result.redDots}:${result.orangeDots}")
                    return result
                } else {
                    // –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (0:0 –∏–ª–∏ null) - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                    if (result != null) {
                        Log.d(TAG, "‚è≥ –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π: ${result.redDots}:${result.orangeDots}")
                    }
                }

            } catch (e: Exception) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
            }

            attempts++
        }

        Log.w(TAG, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã–π –≤–∞–ª–∏–¥–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞ $maxAttempts –ø–æ–ø—ã—Ç–æ–∫")
        return null
    }

    // –ñ–¥—ë–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –Ω–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ —Å—Ç–∞–≤–∫–∏
    private suspend fun waitForStableResult(window: WindowType, maxAttempts: Int = 60): RoundResult? {
        var attempts = 0
        val currentResult = lastDetectedRound // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–æ–º–Ω–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç

        Log.d(TAG, "üîç –ü–†–û–°–¢–ê–Ø –¥–µ—Ç–µ–∫—Ü–∏—è —Å–º–µ–Ω—ã –∫—É–±–∏–∫–æ–≤ –¥–ª—è –æ–∫–Ω–∞ $window")
        Log.d(TAG, "üìã –¢–µ–∫—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${currentResult?.redDots}:${currentResult?.orangeDots}")

        // –ü–†–û–°–¢–ê–Ø –õ–û–ì–ò–ö–ê: –∂–¥–µ–º –í–ê–õ–ò–î–ù–û–ì–û –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç –∑–∞–ø–æ–º–Ω–µ–Ω–Ω–æ–≥–æ
        while (attempts < maxAttempts && gameState.isRunning) {
            try {
                val newResult = captureAndAnalyze(window)

                // –ü—Ä–∏–Ω–∏–º–∞–µ–º –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–æ–±–∞ —Ü–≤–µ—Ç–∞ > 0)
                if (newResult != null && newResult.redDots > 0 && newResult.orangeDots > 0) {

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç –∑–∞–ø–æ–º–Ω–µ–Ω–Ω–æ–≥–æ
                    if (currentResult != null &&
                        (newResult.redDots != currentResult.redDots ||
                                newResult.orangeDots != currentResult.orangeDots)) {
                        // –ò–ó–ú–ï–ù–ï–ù–ò–ï! –ö Gemini!
                        Log.d(TAG, "‚ö° –°–ú–ï–ù–ê: ${currentResult.redDots}:${currentResult.orangeDots} ‚Üí ${newResult.redDots}:${newResult.orangeDots} ‚Üí –í—ã–∑—ã–≤–∞–µ–º Gemini!")

                        // –í–†–ï–ú–ï–ù–ù–û: –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º OpenCV —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∫–∞ –Ω–µ –∏—Å–ø—Ä–∞–≤–∏–º Gemini
                        // TODO: –ò—Å–ø—Ä–∞–≤–∏—Ç—å –≤—ã–∑–æ–≤ Gemini
                        Log.w(TAG, "‚ö†Ô∏è –í–†–ï–ú–ï–ù–ù–û: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º OpenCV —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–º–µ—Å—Ç–æ Gemini")
                        return newResult
                    }
                } else {
                    // –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (0:0 –∏–ª–∏ null) - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                    if (newResult != null) {
                        Log.d(TAG, "‚è≥ –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π: ${newResult.redDots}:${newResult.orangeDots}")
                    }
                }

            } catch (e: Exception) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
            }

            attempts++
            // –ë–ï–ó –ó–ê–î–ï–†–ñ–ö–ò! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –¥–µ—Ç–µ–∫—Ü–∏–∏
        }


        Log.w(TAG, "‚ö†Ô∏è –°–º–µ–Ω–∞ –∫—É–±–∏–∫–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è")
        return null
    }

    /**
     * –ñ–¥–µ–º, –ø–æ–∫–∞ –∫—É–±–∏–∫–∏ –∏—Å—á–µ–∑–Ω—É—Ç –∏–∑ –æ–±–ª–∞—Å—Ç–∏ (0:0 –∏–ª–∏ null –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø–æ–¥—Ä—è–¥),
     * –∑–∞—Ç–µ–º –∂–¥—ë–º –∏—Ö –ü–û–í–¢–û–†–ù–û–ï –ø–æ—è–≤–ª–µ–Ω–∏–µ (–≤–∞–ª–∏–¥–Ω–æ–µ >0:>0) –∏ –≤ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç
     * –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–æ–ø –∫—É–±–∏–∫–æ–≤ –≤ Gemini, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π RoundResult.
     * –ò—Å–∫–ª—é—á–∞–µ–º –ª–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è: –æ–¥–∏–Ω–æ—á–Ω—ã–µ –Ω—É–ª–∏ –Ω–µ —Å—á–∏—Ç–∞–µ–º –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ–º.
     */
    private suspend fun waitForReappearanceAndGemini(window: WindowType, maxAttempts: Int = 120): RoundResult? {
        var attempts = 0
        var consecutiveBlanks = 0
        val blankThreshold = 3 // –Ω—É–∂–Ω–æ –∫–∞–∫ –º–∏–Ω–∏–º—É–º 3 –ø–æ–¥—Ä—è–¥ –ø—É—Å—Ç—ã—Ö –∫–∞–¥—Ä–∞, —á—Ç–æ–±—ã —Å—á–∏—Ç–∞—Ç—å ¬´–∏—Å—á–µ–∑–ª–∏¬ª
        var disappeared = false
        val fallbackStart = System.currentTimeMillis()
        val fallbackTimeoutMs = 6000L // –µ—Å–ª–∏ –¥–æ–ª–≥–æ –Ω–µ "–∏—Å—á–µ–∑–∞—é—Ç", –¥–æ–ø—É—Å–∫–∞–µ–º –ø—Ä—è–º–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ —Å–º–µ–Ω—É

        Log.d(TAG, "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –∫—É–±–∏–∫–æ–≤ –≤ –æ–∫–Ω–µ $window...")

        // –ï—Å–ª–∏ –±–∞–∑–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –µ—â—ë –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π –≤–∞–ª–∏–¥–Ω—ã–π (–±–µ–∑ Gemini, –∫–∞–∫ –∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
        if (lastDetectedRound == null) {
            var baselineAttempts = 0
            while (baselineAttempts < 60 && gameState.isRunning && lastDetectedRound == null) {
                val r0 = captureAndAnalyze(window)
                if (r0 != null && r0.redDots > 0 && r0.orangeDots > 0) {
                    lastDetectedRound = r0
                    onResultDetected?.invoke(r0)
                    Log.d(TAG, "üìù –ë–∞–∑–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${r0.redDots}:${r0.orangeDots}")
                    break
                }
                baselineAttempts++
            }
        }

        // –§–∞–∑–∞ 1: –∂–¥—ë–º —É—Å—Ç–æ–π—á–∏–≤–æ–≥–æ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
        while (attempts < maxAttempts && gameState.isRunning && !disappeared) {
            val r = captureAndAnalyze(window)
            if (r == null || r.redDots == 0 || r.orangeDots == 0) {
                consecutiveBlanks++
            } else {
                consecutiveBlanks = 0
            }
            if (consecutiveBlanks >= blankThreshold) {
                disappeared = true
                Log.d(TAG, "‚úÖ –ö—É–±–∏–∫–∏ –∏—Å—á–µ–∑–ª–∏ (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ $consecutiveBlanks –∫–∞–¥—Ä–æ–≤)")
                break
            }
            // Fallback: –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –Ω–µ—Ç –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è, –Ω–æ –µ—Å—Ç—å –≤–∞–ª–∏–¥–Ω–∞—è —Å–º–µ–Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ lastDetectedRound ‚Äî —Å—á–∏—Ç–∞–µ–º –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏–µ–º –Ω–æ–≤–æ–π —Ñ–∞–∑—ã
            if (System.currentTimeMillis() - fallbackStart > fallbackTimeoutMs && lastDetectedRound != null && r != null && r.redDots > 0 && r.orangeDots > 0) {
                if (r.redDots != lastDetectedRound!!.redDots || r.orangeDots != lastDetectedRound!!.orangeDots) {
                    Log.w(TAG, "‚ö†Ô∏è Fallback: —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Å–º–µ–Ω—É –±–µ–∑ —è–≤–Ω–æ–≥–æ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è ‚Üí –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ Gemini")
                    disappeared = true // —Ñ–æ—Ä—Å–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ñ—Ä–∞–∑–µ –ø–æ—è–≤–ª–µ–Ω–∏—è —Å —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                    break
                }
            }
            attempts++
        }
        if (!disappeared) {
            Log.w(TAG, "‚ö†Ô∏è –ö—É–±–∏–∫–∏ –Ω–µ –∏—Å—á–µ–∑–ª–∏ –∑–∞ –æ—Ç–≤–µ–¥—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è")
            return null
        }

        // –§–∞–∑–∞ 2: –∂–¥—ë–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Gemini
        Log.d(TAG, "üëÄ –ñ–¥–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è –∫—É–±–∏–∫–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Gemini...")
        attempts = 0
        // –¢—Ä–µ–±—É–µ–º —É—Å—Ç–æ–π—á–∏–≤–æ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è: –¥–≤–∞ –ø–æ–¥—Ä—è–¥ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã—Ö (–∏–ª–∏ –ø–æ—á—Ç–∏) –∫–∞–¥—Ä–∞
        var stableCount = 0
        var lastLeft = -1
        var lastRight = -1
        while (attempts < maxAttempts && gameState.isRunning) {
            // –ë–µ—Ä—ë–º –∫—Ä–æ–ø –æ–±–ª–∞—Å—Ç–∏ –∫—É–±–∏–∫–æ–≤
            val crop = captureDiceCrop(window)
            if (crop != null) {
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ OpenCV: >0:>0 => –ø–æ—è–≤–∏–ª–∏—Å—å
                val quick = analyzeWithEconomicAI(crop, window)
                if (quick != null && quick.leftDots in 1..6 && quick.rightDots in 1..6 && quick.confidence >= 0.25f) { // –°–Ω–∏–∂–µ–Ω –ø–æ—Ä–æ–≥ —Å 0.55f –¥–æ 0.25f
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    if (quick.leftDots == lastLeft && quick.rightDots == lastRight) {
                        stableCount++
                    } else {
                        stableCount = 1
                        lastLeft = quick.leftDots
                        lastRight = quick.rightDots
                    }

                    if (stableCount >= 2) {
                        // –¢–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å—Ç–æ–π—á–∏–≤–æ–º –ø–æ—è–≤–ª–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Gemini
                        Log.d(TAG, "üíé –£—Å—Ç–æ–π—á–∏–≤–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ (${quick.leftDots}:${quick.rightDots}, conf=${String.format("%.2f", quick.confidence)}) ‚Üí –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Gemini")
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Gemini
                        saveGeminiCropImage(crop, window, quick)
                        val aiRes = try { analyzeWithGeminiDirect(crop, quick) } catch (_: Exception) { null }
                        crop.recycle()
                        if (aiRes != null) {
                            val rr = RoundResult.fromDotResult(aiRes)
                            if (rr.isValid) {
                                Log.d(TAG, "üíé Gemini –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${rr.redDots}:${rr.orangeDots}")
                                return rr
                            } else {
                                Log.w(TAG, "‚ö†Ô∏è Gemini –≤–µ—Ä–Ω—É–ª –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ")
                            }
                        } else {
                            Log.w(TAG, "‚ö†Ô∏è Gemini –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª/–æ—à–∏–±–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 400) ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞–≤–∫—É –∏ –∂–¥—ë–º —Å–ª–µ–¥—É—é—â–∏–π –≤–∞–ª–∏–¥–Ω—ã–π –∫–∞–¥—Ä")
                        }
                        // –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫ –Ω–∞ –æ–¥–Ω–æ–º –∫–∞–¥—Ä–µ
                        stableCount = 0
                        lastLeft = -1
                        lastRight = -1
                    } else {
                        // –ï—â—ë –Ω–µ —É—Å—Ç–æ–π—á–∏–≤–æ ‚Äî –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º, –∂–¥—ë–º —Å–ª–µ–¥—É—é—â–∏–π –∫–∞–¥—Ä
                        crop.recycle()
                    }
                } else {
                    // –µ—â—ë –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                    crop.recycle()
                }
            }
            attempts++
            // –±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        }
        Log.w(TAG, "‚ö†Ô∏è –ù–µ –¥–æ–∂–¥–∞–ª–∏—Å—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è –∫—É–±–∏–∫–æ–≤")
        return null
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ Gemini –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–∂–∏–º–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.
     */
    private suspend fun analyzeWithGeminiDirect(image: Bitmap, openCvResult: DotCounter.Result? = null): DotCounter.Result? {
        return withContext(Dispatchers.IO) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ AI
            if (!preferencesManager.isAIConfigured()) {
                Log.w(TAG, "‚ö†Ô∏è AI –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º OpenCV –∫–∞–∫ —Ñ–æ–ª–±—ç–∫")
                return@withContext null
            }
            try {
                val recognitionMode = preferencesManager.getRecognitionMode()
                val aiProvider = preferencesManager.getAIProvider()
                val selectedModel = preferencesManager.getOpenRouterModel()
                
                Log.d(TAG, "üîë AI –∞–Ω–∞–ª–∏–∑: mode=$recognitionMode, provider=$aiProvider, model=${selectedModel.displayName}")
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º HybridDiceRecognizer, –∫–æ—Ç–æ—Ä—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–µ—Ä–µ—Ç –Ω—É–∂–Ω—ã–π –º–µ—Ç–æ–¥
                val recognizer = HybridDiceRecognizer(preferencesManager)
                
                // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ (OpenRouter/OpenCV/Hybrid)
                val result = recognizer.analyzeDice(image)
                
                if (result != null) {
                    Log.d(TAG, "‚úÖ AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${result.leftDots}:${result.rightDots} (conf: ${result.confidence})")
                } else {
                    Log.w(TAG, "‚ö†Ô∏è AI –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null")
                }
                
                result
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞: ${e.message}", e)
                null
            }
        }
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç Bitmap-–∫—Ä–æ–ø –æ–±–ª–∞—Å—Ç–∏ –∫—É–±–∏–∫–æ–≤ –¥–ª—è –æ–∫–Ω–∞ (—É—á–∏—Ç—ã–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –∏ –∏–Ω—Å–µ—Ç —Å—Ç–∞—Ç—É—Å–∞).
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç null –ø—Ä–∏ –æ—à–∏–±–∫–µ. –í—ã–∑—ã–≤–∞—Ç—å –≤ —Ñ–æ–Ω–µ.
     */
    private suspend fun captureDiceCrop(window: WindowType): Bitmap? {
        return withContext(Dispatchers.Default) {
            try {
                val scm = screenCaptureManager ?: return@withContext null
                val shot = scm.captureScreen()
                if (shot !is GameResult.Success) return@withContext null
                val bmp = shot.data

                // –í—Å–µ–≥–¥–∞ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º TOP –æ–∫–Ω–æ –¥–ª—è –∫—Ä–æ–ø–∞, –∫–∞–∫ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ
                val preferredWindows = listOf(WindowType.TOP, WindowType.LEFT, window)
                var chosenWindow: WindowType? = null
                var resultArea: ScreenArea? = null
                for (w in preferredWindows) {
                    val area = areaManager.getAreaForWindow(w, AreaType.DICE_AREA)
                        ?: areaManager.getAreaForWindow(w, AreaType.BET_RESULT)
                    if (area != null) {
                        chosenWindow = w
                        resultArea = area
                        break
                    }
                }
                if (resultArea == null || chosenWindow == null) return@withContext null
                Log.d(TAG, "üéØ –ö—Ä–æ–ø –¥–ª—è Gemini –±–µ—Ä—ë–º –∏–∑ –æ–∫–Ω–∞ ${chosenWindow}: ${resultArea.rect}")

                // –ü–æ–¥—Å—Ç—Ä–∞—Ö—É–µ–º—Å—è: —Ä–∞—Å—à–∏—Ä–∏–º —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–µ –æ–±–ª–∞—Å—Ç–∏
                val originalRect = resultArea.rect
                val minWidth = 200
                val minHeight = 150
                val expandedRect = if (originalRect.width() < minWidth || originalRect.height() < minHeight) {
                    val newWidth = maxOf(originalRect.width(), minWidth)
                    val newHeight = maxOf(originalRect.height(), minHeight)
                    val upwardShift = 30
                    Rect(
                        originalRect.centerX() - newWidth / 2,
                        originalRect.bottom - newHeight - upwardShift,
                        originalRect.centerX() + newWidth / 2,
                        originalRect.bottom - upwardShift
                    )
                } else originalRect

                var abs = areaManager.getAbsoluteCoordinates(chosenWindow, AreaType.DICE_AREA)
                    ?: areaManager.getAbsoluteCoordinates(chosenWindow, AreaType.BET_RESULT)
                    ?: expandedRect
                Log.d(TAG, "üìê –ê–±—Å–æ–ª—é—Ç–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –∏—Å—Ö–æ–¥–Ω–æ: ${abs} (${abs.width()}x${abs.height()})")

                // –§–æ—Ä—Å–∏—Ä—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —É–∂–µ –ü–û–°–õ–ï –ø–æ–ª—É—á–µ–Ω–∏—è –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                if (abs.width() < minWidth || abs.height() < minHeight) {
                    val newWidth = maxOf(abs.width(), minWidth)
                    val newHeight = maxOf(abs.height(), minHeight)
                    val newLeft = (abs.centerX() - newWidth / 2).coerceAtLeast(0)
                    val newTop = (abs.bottom - newHeight - 20).coerceAtLeast(0) // —Å–ª–µ–≥–∫–∞ –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –≤–≤–µ—Ä—Ö
                    val newRight = (newLeft + newWidth).coerceAtMost(bmp.width)
                    val newBottom = (newTop + newHeight).coerceAtMost(bmp.height)
                    abs = Rect(newLeft, newTop, newRight, newBottom)
                    Log.d(TAG, "üîß –†–∞—Å—à–∏—Ä–∏–ª–∏ –º–∞–ª—É—é –æ–±–ª–∞—Å—Ç—å –¥–æ –º–∏–Ω–∏–º—É–º–∞: ${abs} (${abs.width()}x${abs.height()})")
                }

                // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ –æ–±–ª–∞—Å—Ç–∏ (—É–±–∏—Ä–∞–µ–º –Ω–∏–∂–Ω—é—é —á—ë—Ä–Ω—É—é –ø–æ–¥–ª–æ–∂–∫—É)
                val keepTopRatio = 0.65f
                val trimmedBottom = (abs.top + abs.height() * keepTopRatio).toInt()
                var focused = Rect(abs.left, abs.top, abs.right, trimmedBottom)
                Log.d(TAG, "üéØ –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å –æ–±–ª–∞—Å—Ç–∏ –¥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —à–∏—Ä–∏–Ω—ã: ${focused} (${focused.width()}x${focused.height()})")

                // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Ç–∞–∫, —á—Ç–æ–±—ã –ø–æ–ø–∞–¥–∞–ª–∏ —Ç–æ–ª—å–∫–æ 2 —Ç–µ–∫—É—â–∏—Ö –∫—É–±–∏–∫–∞
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞—Ö–≤–∞—Ç–∞ —Å—Ç–∞—Ä—ã—Ö –∫—É–±–∏–∫–æ–≤
                val dicePairWidthRatio = 1.5f // —É–º–µ–Ω—å—à–µ–Ω–æ —Å 1.75f –¥–ª—è –±–æ–ª—å—à–µ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
                val targetWidth = (focused.height() * dicePairWidthRatio).toInt().coerceAtLeast(minWidth)
                if (focused.width() > targetWidth) {
                    var newRight = (focused.left + targetWidth).coerceAtMost(bmp.width)
                    // –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –ø–æ–¥—Ä–µ–∑–∫–∞ –ø—Ä–∞–≤–æ–≥–æ –∫—Ä–∞—è –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
                    val rightTrimPx = (focused.height() * 0.18f).toInt().coerceAtLeast(6) // —É–≤–µ–ª–∏—á–µ–Ω–æ —Å 0.12f
                    newRight = (newRight - rightTrimPx).coerceAtLeast(focused.left + minWidth)
                    focused = Rect(focused.left, focused.top, newRight, focused.bottom)
                    Log.d(TAG, "‚úÇÔ∏è –û–±—Ä–µ–∑–∞–ª–∏ —Å–ø—Ä–∞–≤–∞ –¥–æ –¥–≤—É—Ö –∫—É–±–∏–∫–æ–≤ (+—É—Å–∏–ª–µ–Ω–Ω–∞—è –ø–æ–¥—Ä–µ–∑–∫–∞): ${focused} (${focused.width()}x${focused.height()})")
                } else {
                    Log.d(TAG, "‚úÖ –¢–µ–∫—É—â–∞—è —à–∏—Ä–∏–Ω–∞ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ü–µ–ª–µ–≤—É—é (${targetWidth}px), –æ–±—Ä–µ–∑–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
                }

                // –ü—ã—Ç–∞–µ–º—Å—è —Ç–æ—á–Ω–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∞–≤—ã–π –∫—Ä–∞–π –≤—Ç–æ—Ä–æ–π –∫–æ—Å—Ç–∏ –ø–æ —è—Ä–∫–æ—Å—Ç–Ω—ã–º —Å–µ–≥–º–µ–Ω—Ç–∞–º
                findSecondDiceRightEdge(bmp, focused)?.let { edgeX ->
                    if (edgeX in (focused.left + minWidth)..focused.right && edgeX < focused.right) {
                        val pad = (focused.height() * 0.015f).toInt()
                        val cutX = (edgeX - pad).coerceAtLeast(focused.left + minWidth)
                        focused = Rect(focused.left, focused.top, cutX, focused.bottom)
                        Log.d(TAG, "üéØ –ü—Ä–∞–≤—ã–π –∫—Ä–∞–π –ø–æ–¥–æ–≥–Ω–∞–Ω –ø–æ –≤—Ç–æ—Ä–æ–π –∫–æ—Å—Ç–∏: ${focused}")
                    }
                }

                // –ö–æ–Ω—Ç–µ–Ω—Ç-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–¥—Ä–µ–∑–∫–∞: –∏—â–µ–º —Ç—ë–º–Ω—É—é –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é —â–µ–ª—å –º–µ–∂–¥—É 2-–π –∏ 3-–π –∫–æ—Å—Ç—å—é
                // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–π —à–∏—Ä–∏–Ω—ã (–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)
                findDarkGutterRight(bmp, focused)?.let { gutterX ->
                    val maxReduction = focused.width() * 0.25f // —É–º–µ–Ω—å—à–µ–Ω–æ —Å 0.3f –¥–ª—è –±–æ–ª—å—à–µ–π –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    val minAllowedRight = (focused.right - maxReduction).toInt()
                    if (gutterX > focused.left + minWidth && gutterX >= minAllowedRight) {
                        focused = Rect(focused.left, focused.top, gutterX, focused.bottom)
                        Log.d(TAG, "üßπ –ü—Ä–∞–≤—ã–π –∫—Ä–∞–π –ø–æ–¥–æ–≥–Ω–∞–Ω –ø–æ —Ç—ë–º–Ω–æ–π —â–µ–ª–∏: ${focused}")
                    } else if (gutterX < minAllowedRight) {
                        Log.d(TAG, "‚ö†Ô∏è –¢—ë–º–Ω–∞—è —â–µ–ª—å –Ω–∞–π–¥–µ–Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ —Å–ª–µ–≤–∞ (${gutterX}), –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
                    }
                }

                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Å—Ç–∞—Ç–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∫—É–±–∏–∫–æ–≤ —Å–ø—Ä–∞–≤–∞
                val rightEdgeCheck = checkForOldDiceArtifacts(bmp, focused)
                if (rightEdgeCheck != null && rightEdgeCheck < focused.right) {
                    val safeMargin = (focused.height() * 0.05f).toInt()
                    val newRight = (rightEdgeCheck - safeMargin).coerceAtLeast(focused.left + minWidth)
                    if (newRight < focused.right) {
                        focused = Rect(focused.left, focused.top, newRight, focused.bottom)
                        Log.d(TAG, "üõ°Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—Å—Ç–∞—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∫—É–±–∏–∫–æ–≤, –∫—Ä–∞–π –ø–æ–¥–≤–∏–Ω—É—Ç: ${focused}")
                    }
                }

                val insets = com.example.diceautobet.utils.CoordinateUtils.getSystemInsets(context)
                val shifted = Rect(focused.left, focused.top + insets.statusBarHeight, focused.right, focused.bottom + insets.statusBarHeight)
                val safe = safeRect(shifted, bmp.width, bmp.height, silent = true) // –¢–∏—Ö–∏–π –≤—ã–∑–æ–≤ –¥–ª—è —á–∞—Å—Ç–æ–≥–æ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
                if (safe.width() <= 1 || safe.height() <= 1) return@withContext null
                Bitmap.createBitmap(bmp, safe.left, safe.top, safe.width(), safe.height())
            } catch (_: Exception) {
                null
            }
        }
    }

    // –î–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç, –≤—ã—Ä–µ–∑–∞–µ—Ç –Ω—É–∂–Ω—É—é –æ–±–ª–∞—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏ —Å—á–∏—Ç–∞–µ—Ç —Ç–æ—á–∫–∏
    private suspend fun captureAndAnalyze(window: WindowType): RoundResult? {
        try {
            Log.d(TAG, "üîç captureAndAnalyze –Ω–∞—á–∞—Ç –¥–ª—è –æ–∫–Ω–∞ $window")

            val scm = screenCaptureManager
            if (scm == null) {
                Log.e(TAG, "‚ùå screenCaptureManager —Ä–∞–≤–µ–Ω null")
                return null
            }
            Log.d(TAG, "‚úÖ screenCaptureManager –Ω–∞–π–¥–µ–Ω")

            // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ–±–ª–∞—Å—Ç–µ–π –¥–ª—è –æ–∫–Ω–∞
            Log.d(TAG, "üîç –ü–æ–∏—Å–∫ –æ–±–ª–∞—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –æ–∫–Ω–∞ $window...")

            // ‚ú® –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç DICE_AREA: –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–ª–∞—Å—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –æ–∫–Ω–∞
            val diceArea = areaManager.getAreaForWindow(window, AreaType.DICE_AREA)
            val betResultArea = areaManager.getAreaForWindow(window, AreaType.BET_RESULT)
            Log.d(TAG, "   DICE_AREA –æ–±–ª–∞—Å—Ç—å: ${diceArea?.rect ?: "–ù–ï–¢"}")
            Log.d(TAG, "   BET_RESULT –æ–±–ª–∞—Å—Ç—å: ${betResultArea?.rect ?: "–ù–ï–¢"}")
            val resultArea = diceArea ?: betResultArea
            if (resultArea == null) {
                Log.e(TAG, "‚ùå –ù–ò –û–î–ù–ê –æ–±–ª–∞—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –æ–∫–Ω–∞ $window")
                Log.e(TAG, "üîç –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–±–ª–∞—Å—Ç–µ–π –¥–ª—è –æ–∫–Ω–∞ $window:")
                val allAreas = areaManager.getAreasForWindow(window)
                allAreas.forEach { (areaType, screenArea) ->
                    Log.e(TAG, "   - $areaType: ${screenArea.rect}")
                }
                return null
            }

            Log.d(TAG, "‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–ª–∞—Å—Ç—å: ${resultArea.rect}")
            Log.d(TAG, "üîç –†–∞–∑–º–µ—Ä –∏—Å—Ö–æ–¥–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ resultArea: ${resultArea.rect.width()}x${resultArea.rect.height()}")

            // üîß –ü–†–û–í–ï–†–ö–ê –†–ê–ó–ú–ï–†–ê: –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–µ –æ–±–ª–∞—Å—Ç–∏
            val originalRect = resultArea.rect
            val minWidth = 200  // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫—É–±–∏–∫–æ–≤
            val minHeight = 150 // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫—É–±–∏–∫–æ–≤

            val expandedRect = if (originalRect.width() < minWidth || originalRect.height() < minHeight) {
                Log.w(TAG, "‚ö†Ô∏è –û–±–ª–∞—Å—Ç—å —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∞—è (${originalRect.width()}x${originalRect.height()}), —Ä–∞—Å—à–∏—Ä—è–µ–º...")

                val newWidth = maxOf(originalRect.width(), minWidth)
                val newHeight = maxOf(originalRect.height(), minHeight)

                // üéØ –£–ú–ù–û–ï –†–ê–°–®–ò–†–ï–ù–ò–ï: —Ä–∞—Å—à–∏—Ä—è–µ–º –≤–≤–µ—Ä—Ö –∏ –≤ —Å—Ç–æ—Ä–æ–Ω—ã, —Å–æ—Ö—Ä–∞–Ω—è—è –Ω–∏–∂–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É
                val upwardShift = 30  // –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–¥–≤–∏–≥ –≤–≤–µ—Ä—Ö –≤ –ø–∏–∫—Å–µ–ª—è—Ö
                val expandedRect = Rect(
                    originalRect.centerX() - newWidth / 2,     // —Ä–∞—Å—à–∏—Ä—è–µ–º –≤–ª–µ–≤–æ –∏ –≤–ø—Ä–∞–≤–æ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞
                    originalRect.bottom - newHeight - upwardShift,  // —Ä–∞—Å—à–∏—Ä—è–µ–º –≤–≤–µ—Ä—Ö –æ—Ç –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã + –¥–æ–ø. —Å–¥–≤–∏–≥
                    originalRect.centerX() + newWidth / 2,     // —Ä–∞—Å—à–∏—Ä—è–µ–º –≤–ª–µ–≤–æ –∏ –≤–ø—Ä–∞–≤–æ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞
                    originalRect.bottom - upwardShift          // —Å–¥–≤–∏–≥–∞–µ–º –Ω–∏–∂–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É –≤–≤–µ—Ä—Ö
                )

                Log.d(TAG, "üîß –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –æ–±–ª–∞—Å—Ç—å: ${expandedRect} (${expandedRect.width()}x${expandedRect.height()})")
                Log.d(TAG, "üìç –°–¥–≤–∏–≥: –∏—Å—Ö–æ–¥–Ω–∞—è=${originalRect.centerY()}, –Ω–æ–≤–∞—è=${expandedRect.centerY()}, —Ä–∞–∑–Ω–∏—Ü–∞=${originalRect.centerY() - expandedRect.centerY()}px –≤–≤–µ—Ä—Ö")
                expandedRect
            } else {
                Log.d(TAG, "‚úÖ –†–∞–∑–º–µ—Ä –æ–±–ª–∞—Å—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π: ${originalRect.width()}x${originalRect.height()}")
                originalRect
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º resultArea —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–º
            val finalResultArea = ScreenArea(resultArea.name, expandedRect)

            // –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä (—Å –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏–µ–π)
            val absoluteRect = if (originalRect == expandedRect) {
                // –û–±–ª–∞—Å—Ç—å –Ω–µ —Ä–∞—Å—à–∏—Ä—è–ª–∏ ‚Äî –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞
                areaManager.getAbsoluteCoordinates(window, AreaType.DICE_AREA)
                    ?: areaManager.getAbsoluteCoordinates(window, AreaType.BET_RESULT)
                    ?: expandedRect
            } else {
                // –û–±–ª–∞—Å—Ç—å —Ä–∞—Å—à–∏—Ä—è–ª–∏ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë –ø—Ä—è–º–æ
                Log.d(TAG, "üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –æ–±–ª–∞—Å—Ç—å –≤–º–µ—Å—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
                expandedRect
            }
            if (absoluteRect == null) {
                Log.e(TAG, "‚ùå absoluteRect —Ä–∞–≤–µ–Ω null –¥–ª—è –æ–∫–Ω–∞ $window")
                return null
            }

            Log.d(TAG, "üîç absoluteRect –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞: $absoluteRect")
            Log.d(TAG, "üîç –†–∞–∑–º–µ—Ä absoluteRect: ${absoluteRect.width()}x${absoluteRect.height()}")

            // ‚úÖ FIX: getAbsoluteCoordinates —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –æ–∫–Ω–∞
            // –£–¥–∞–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã–∑—ã–≤–∞–ª–æ –¥–≤–æ–π–Ω—É—é —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é
            val windowRelativeRect = absoluteRect
            Log.d(TAG, "‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ getAbsoluteCoordinates (—É–∂–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ): $windowRelativeRect")

            Log.d(TAG, "‚úÖ resultArea –Ω–∞–π–¥–µ–Ω: ${finalResultArea.rect} -> –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: $windowRelativeRect")

            Log.d(TAG, "üì∏ –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç...")
            var shot = scm.captureScreen()
            if (shot !is GameResult.Success) {
                val errorMsg = (shot as? GameResult.Error)?.message ?: "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
                Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: $errorMsg")

                // –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ScreenCaptureManager
                if (errorMsg.contains("–ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ") || errorMsg.contains("MediaProjection –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω")) {
                    Log.w(TAG, "üîÑ –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è ScreenCaptureManager...")

                    // –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å MediaProjection, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
                    if (errorMsg.contains("MediaProjection –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω")) {
                        Log.w(TAG, "üîÑ MediaProjection –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å...")

                        // –ù–ï –û–ß–ò–©–ê–ï–ú —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å—Ä–∞–∑—É! –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å

                        // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º ScreenCaptureManager (–Ω–æ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è)
                        try {
                            screenCaptureManager?.destroy()
                            screenCaptureManager = null
                        } catch (e: Exception) {
                            Log.w(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ ScreenCaptureManager", e)
                        }

                        // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ScreenCaptureManager —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
                        val hasValidPermission = try {
                            ensureScreenCaptureReady()
                        } catch (e: Exception) {
                            Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ ScreenCaptureManager", e)
                            false
                        }

                        // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å - –æ—á–∏—â–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ
                        if (!hasValidPermission) {
                            Log.w(TAG, "üßπ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—á–∏—â–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ...")
                            try {
                                preferencesManager.clearMediaProjectionPermission()
                                com.example.diceautobet.utils.MediaProjectionTokenStore.clear()
                            } catch (_: Exception) {}
                        }

                        if (!hasValidPermission) {
                            Log.e(TAG, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π ScreenCaptureManager")
                            return null
                        }
                    }

                    if (ensureScreenCaptureReady()) {
                        Log.d(TAG, "‚úÖ ScreenCaptureManager –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞...")
                        shot = scm.captureScreen()
                        if (shot is GameResult.Success) {
                            Log.d(TAG, "‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç —É—Å–ø–µ—à–µ–Ω")
                        } else {
                            Log.e(TAG, "‚ùå –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –Ω–µ—É–¥–∞—á–Ω–∞")
                            return null
                        }
                    } else {
                        Log.e(TAG, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ScreenCaptureManager")
                        return null
                    }
                } else {
                    return null
                }
            } else {
                Log.d(TAG, "‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω")
            }

            val bmp = shot.data
            Log.d(TAG, "üì∏ captureAndAnalyze: window=$window, resultArea=$windowRelativeRect, screenshot=${bmp.width}x${bmp.height}")
            Log.d(TAG, "üîç –ò–°–•–û–î–ù–ê–Ø –æ–±–ª–∞—Å—Ç—å –¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏: $windowRelativeRect")
            Log.d(TAG, "üîç –†–∞–∑–º–µ—Ä –∏—Å—Ö–æ–¥–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏: ${windowRelativeRect.width()}x${windowRelativeRect.height()}")

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–ª–∞—Å—Ç—å –∫—É–±–∏–∫–æ–≤ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
            if (windowRelativeRect.top >= bmp.height || windowRelativeRect.left >= bmp.width) {
                Log.w(TAG, "‚ö†Ô∏è –û–±–ª–∞—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: $windowRelativeRect vs ${bmp.width}x${bmp.height}")
                return null
            }

            if (windowRelativeRect.bottom > bmp.height || windowRelativeRect.right > bmp.width) {
                Log.w(TAG, "‚ö†Ô∏è –û–±–ª–∞—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: $windowRelativeRect vs ${bmp.width}x${bmp.height}")
            }

            // –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–∞: —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç–∞—Ç—É—Å-–±–∞—Ä, –∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∑–∞–¥–∞–≤–∞–ª–∏—Å—å –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
            val insets = com.example.diceautobet.utils.CoordinateUtils.getSystemInsets(context)
            Log.d(TAG, "üîç –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–∞: –≤—ã—Å–æ—Ç–∞=${insets.statusBarHeight}px")
            val shiftedRect = Rect(
                windowRelativeRect.left,
                windowRelativeRect.top + insets.statusBarHeight,
                windowRelativeRect.right,
                windowRelativeRect.bottom + insets.statusBarHeight
            )
            Log.d(TAG, "üîç –ü–û–°–õ–ï –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–∞: $shiftedRect")
            Log.d(TAG, "üîç –†–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏: ${shiftedRect.width()}x${shiftedRect.height()}")
            var area = safeRect(shiftedRect, bmp.width, bmp.height, silent = true) // –¢–∏—Ö–∏–π –≤—ã–∑–æ–≤ –¥–ª—è —á–∞—Å—Ç–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            Log.d(TAG, "üîß –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å: $area")
            Log.d(TAG, "üîß –†–∞–∑–º–µ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏: ${area.width()}x${area.height()}")

            // –ê–≤—Ç–æ–∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ —Å–º–µ—â–µ–Ω–∏—è (–æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ –Ω–∞ –æ–∫–Ω–æ –∑–∞ —Å–µ—Å—Å–∏—é –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞)
            var yOffset = roiYOffsetMap[window] ?: 0
            if (yOffset == 0) {
                yOffset = calibrateVerticalOffset(bmp, area, window)
                roiYOffsetMap[window] = yOffset
                if (yOffset != 0) {
                    Log.d(TAG, "üß≠ –ê–≤—Ç–æ–∫–∞–ª–∏–±—Ä–æ–≤–∫–∞[$window]: –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ ROI = ${yOffset}px")
                } else {
                    Log.d(TAG, "üß≠ –ê–≤—Ç–æ–∫–∞–ª–∏–±—Ä–æ–≤–∫–∞[$window]: –¥–æ–ø. —Å–º–µ—â–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
                }
            }
            if (yOffset != 0) {
                val calibrated = Rect(
                    area.left,
                    (area.top + yOffset).coerceAtMost(bmp.height - 1),
                    area.right,
                    (area.bottom + yOffset).coerceAtMost(bmp.height)
                )
                area = safeRect(calibrated, bmp.width, bmp.height, silent = true) // –¢–∏—Ö–∏–π –≤—ã–∑–æ–≤ –¥–ª—è —á–∞—Å—Ç–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                Log.d(TAG, "üîß –û–±–ª–∞—Å—Ç—å –ø–æ—Å–ª–µ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏[$window]: $area")
            }

            try {
                Log.d(TAG, "üñºÔ∏è –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
                Log.d(TAG, "üìã –î–ï–¢–ê–õ–ò –û–ë–õ–ê–°–¢–ò –ö–£–ë–ò–ö–û–í:")
                Log.d(TAG, "   üéØ –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${bmp.width}x${bmp.height}")
                Log.d(TAG, "   üìç –û–±–ª–∞—Å—Ç—å –∫—É–±–∏–∫–æ–≤: left=${area.left}, top=${area.top}, right=${area.right}, bottom=${area.bottom}")
                Log.d(TAG, "   üìê –†–∞–∑–º–µ—Ä –æ–±–ª–∞—Å—Ç–∏: width=${area.width()}, height=${area.height()}")
                Log.d(TAG, "   üé® –¢–∏–ø –æ–±–ª–∞—Å—Ç–∏: ${if (area.top < bmp.height/2) "–í–ï–†–•–ù–Ø–Ø" else "–ù–ò–ñ–ù–Ø–Ø"} —á–∞—Å—Ç—å —ç–∫—Ä–∞–Ω–∞")

                // üì∏ –û–¢–ö–õ–Æ–ß–ï–ù–û: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
                // –ö–∞–∂–¥–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–Ω–∏–º–∞–µ—Ç —Å–æ—Ç–Ω–∏ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥!
                if (preferencesManager.isDebugImagesEnabled() && debugFolder != null) {
                    val fullScreenFilename = createDebugFilename("fullscreen", window)
                    saveDebugImage(bmp, fullScreenFilename, "–ü–æ–ª–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç")
                }

                val sub = Bitmap.createBitmap(bmp, area.left, area.top, area.width(), area.height())
                Log.d(TAG, "‚úÖ –ü–æ–¥–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: ${sub.width}x${sub.height}")
                Log.d(TAG, "üìä –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω: ${String.format("%.2f", sub.width.toFloat() / sub.height.toFloat())}")

                Log.d(TAG, "üîç –ó–∞–ø—É—Å–∫–∞–µ–º –≠–ö–û–ù–û–ú–ù–û–ï —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ...")
                Log.d(TAG, "üéõÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:")
                val prefsManager = PreferencesManager(context)
                Log.d(TAG, "   - –†–µ–∂–∏–º: ${prefsManager.getRecognitionMode()}")
                Log.d(TAG, "   - AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä: ${prefsManager.getAIProvider()}")
                Log.d(TAG, "   - AI –Ω–∞—Å—Ç—Ä–æ–µ–Ω: ${prefsManager.isAIConfigured()}")

                // üí∞ –≠–ö–û–ù–û–ú–ù–´–ô –ê–ù–ê–õ–ò–ó: –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É
                val dots = analyzeWithEconomicAI(sub, window)
                if (dots == null) {
                    Log.e(TAG, "‚ùå –≠–∫–æ–Ω–æ–º–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –Ω–µ —Å–º–æ–≥–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                    return null
                }
                Log.d(TAG, "‚úÖ –≠–∫–æ–Ω–æ–º–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: leftDots=${dots.leftDots}, rightDots=${dots.rightDots}, confidence=${dots.confidence}")

                // üì∏ –û–¢–ö–õ–Æ–ß–ï–ù–û: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã—Ä–µ–∑–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
                // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—Ä–æ–ø–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                if (preferencesManager.isDebugImagesEnabled() && debugFolder != null) {
                    val croppedFilename = createDebugFilename("cropped", window, dots)
                    saveDebugImage(sub, croppedFilename, "–û–±–ª–∞—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞ –∫—É–±–∏–∫–æ–≤")
                }

                Log.d(TAG, "üé≤ –°–æ–∑–¥–∞–µ–º RoundResult...")
                val result = RoundResult.fromDotResult(dots)
                Log.d(TAG, "‚úÖ RoundResult —Å–æ–∑–¥–∞–Ω: redDots=${result.redDots}, orangeDots=${result.orangeDots}, winner=${result.winner}, valid=${result.isValid}")

                sub.recycle()
                return result
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –∞–Ω–∞–ª–∏–∑–∞: ${e.message}", e)
                Log.e(TAG, "üîß –û–±–ª–∞—Å—Ç—å: $area, —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${bmp.width}x${bmp.height}")
                return null
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ captureAndAnalyze: ${e.message}", e)
            return null
        }
    }

    private fun safeRect(r: Rect, w: Int, h: Int, silent: Boolean = false): Rect {
        val left = r.left.coerceIn(0, w - 1)
        val top = r.top.coerceIn(0, h - 1)
        val right = r.right.coerceIn(left + 1, w)
        val bottom = r.bottom.coerceIn(top + 1, h)

        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ (–Ω–µ –ø—Ä–∏ —á–∞—Å—Ç—ã—Ö –≤—ã–∑–æ–≤–∞—Ö —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è)
        if (!silent) {
            Log.d(TAG, "safeRect: –∏—Å—Ö–æ–¥–Ω–∞—è –æ–±–ª–∞—Å—Ç—å $r, —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${w}x${h}")
            Log.d(TAG, "safeRect: –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å Rect($left, $top - $right, $bottom)")
        }

        return Rect(left, top, right, bottom)
    }

    // –ò—â–µ—Ç ¬´—Ç—ë–º–Ω—É—é —â–µ–ª—å¬ª —Å–ø—Ä–∞–≤–∞ –æ—Ç –≤—Ç–æ—Ä–æ–π –∫–æ—Å—Ç–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç x-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É –¥–ª—è –æ–±—Ä–µ–∑–∫–∏
    private fun findDarkGutterRight(bmp: Bitmap, area: Rect): Int? {
        return try {
            val scanTop = (area.top + area.height() * 0.35f).toInt()
            val scanBottom = (area.top + area.height() * 0.75f).toInt()
            val stepX = 2 // –ø—Ä–æ–ø—É—Å–∫ –ø–æ x –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
            val minGutterWidth = (area.height() * 0.1f).toInt().coerceAtLeast(4)

            // –°–∫–∞–Ω–∏—Ä—É–µ–º —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ, –Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –æ–±–ª–∞—Å—Ç—å—é —Ç–µ–∫—É—â–∏—Ö –∫—É–±–∏–∫–æ–≤
            // –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –Ω–µ —Å —Å–∞–º–æ–≥–æ –ø—Ä–∞–≤–æ–≥–æ –∫—Ä–∞—è, –∞ —Å –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
            val safeMargin = (area.height() * 0.15f).toInt() // –æ—Ç—Å—Ç—É–ø –æ—Ç –ø—Ä–∞–≤–æ–≥–æ –∫—Ä–∞—è
            val startX = (area.right - safeMargin).coerceAtLeast(area.left + area.width() / 2)
            val endX = (area.left + area.width() * 0.55f).toInt()

            var bestX: Int? = null
            var bestScore = Float.MAX_VALUE

            fun pixelLuma(x: Int, y: Int): Float {
                val c = bmp.getPixel(x, y)
                val r = ((c shr 16) and 0xFF) / 255f
                val g = ((c shr 8) and 0xFF) / 255f
                val b = (c and 0xFF) / 255f
                return 0.2126f * r + 0.7152f * g + 0.0722f * b
            }

            var x = startX
            while (x > endX) {
                // —É—Å—Ä–µ–¥–Ω—è–µ–º —è—Ä–∫–æ—Å—Ç—å –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π –ø–æ–ª–æ—Å—ã —à–∏—Ä–∏–Ω–æ–π minGutterWidth
                val leftX = (x - minGutterWidth).coerceAtLeast(area.left)
                var sum = 0f
                var cnt = 0
                var y = scanTop
                while (y < scanBottom) {
                    var xx = leftX
                    while (xx <= x) {
                        sum += pixelLuma(xx, y)
                        cnt++
                        xx += minOf(2, x - xx + 1)
                    }
                    y += 3
                }
                if (cnt > 0) {
                    val avg = sum / cnt
                    if (avg < bestScore) {
                        bestScore = avg
                        bestX = x
                    }
                }
                x -= stepX
            }

            // –ü–æ—Ä–æ–≥ –ø–æ —è—Ä–∫–æ—Å—Ç–∏: –µ—Å–ª–∏ —è–≤–Ω–æ —Ç—ë–º–Ω–µ–µ 0.20 ‚Äî —Å—á–∏—Ç–∞–µ–º —â–µ–ª—å—é (—É–º–µ–Ω—å—à–µ–Ω–æ —Å 0.26f)
            if (bestX != null && bestScore < 0.20f) bestX else null
        } catch (_: Exception) {
            null
        }
    }

    // –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –ø—Ä–∞–≤—ã–π –∫—Ä–∞–π –≤—Ç–æ—Ä–æ–π –∫–æ—Å—Ç–∏ –ø–æ –ø—Ä–æ—Ñ–∏–ª—é —è—Ä–∫–æ—Å—Ç–∏: –∏—â–µ–º –æ–±–ª–∞—Å—Ç—å –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π —è—Ä–∫–æ—Å—Ç–∏ (–∫—Ä–∞—Å–Ω–æ-–æ—Ä–∞–Ω–∂–µ–≤—ã–µ –∫–æ—Å—Ç–∏), –∑–∞—Ç–µ–º –ø–∞–¥–µ–Ω–∏–µ —è—Ä–∫–æ—Å—Ç–∏
    private fun findSecondDiceRightEdge(bmp: Bitmap, area: Rect): Int? {
        return try {
            val scanTop = (area.top + area.height() * 0.28f).toInt()
            val scanBottom = (area.top + area.height() * 0.78f).toInt()
            val stepX = 2
            val minDiceWidth = (area.height() * 0.7f).toInt().coerceAtLeast(20)
            val maxDiceWidth = (area.height() * 1.2f).toInt().coerceAtLeast(minDiceWidth + 10)

            fun luma(x: Int, y: Int): Float {
                val c = bmp.getPixel(x, y)
                val r = ((c shr 16) and 0xFF) / 255f
                val g = ((c shr 8) and 0xFF) / 255f
                val b = (c and 0xFF) / 255f
                return 0.2126f * r + 0.7152f * g + 0.0722f * b
            }

            // –ü—Ä–æ—Ñ–∏–ª—å —Å—Ä–µ–¥–Ω–µ–π —è—Ä–∫–æ—Å—Ç–∏ –ø–æ x
            val xs = mutableListOf<Int>()
            val profile = mutableListOf<Float>()
            var x = area.left
            while (x < area.right) {
                var sum = 0f
                var cnt = 0
                var y = scanTop
                while (y < scanBottom) {
                    sum += luma(x, y)
                    cnt++
                    y += 3
                }
                xs += x
                profile += if (cnt > 0) sum / cnt else 1f
                x += stepX
            }

            if (profile.isEmpty()) return null

            // –ù–∞—Ö–æ–¥–∏–º –¥–≤–∞ ¬´—Å–≤–µ—Ç–ª—ã—Ö¬ª —Å–µ–≥–º–µ–Ω—Ç–∞ –ø–æ–¥—Ä—è–¥ (–¥–≤–µ –∫–æ—Å—Ç–∏), —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ —Ç—ë–º–Ω–æ–π —â–µ–ª—å—é
            val brightThresh = 0.38f
            val darkThresh = 0.26f

            data class Segment(val startIdx: Int, val endIdx: Int)

            fun segments(isBright: Boolean): List<Segment> {
                val res = mutableListOf<Segment>()
                var start = -1
                for (i in profile.indices) {
                    val ok = if (isBright) profile[i] >= brightThresh else profile[i] <= darkThresh
                    if (ok) {
                        if (start == -1) start = i
                    } else if (start != -1) {
                        res += Segment(start, i - 1)
                        start = -1
                    }
                }
                if (start != -1) res += Segment(start, profile.size - 1)
                return res
            }

            val brightSegs = segments(true)
            val darkSegs = segments(false)

            // –ò—â–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—é: bright (dice1) -> dark (gap) -> bright (dice2)
            for (i in 0 until brightSegs.size - 1) {
                val seg1 = brightSegs[i]
                val seg2 = brightSegs[i + 1]
                // –º–µ–∂–¥—É –Ω–∏–º–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å dark —Å–µ–≥–º–µ–Ω—Ç
                val gap = darkSegs.firstOrNull { it.startIdx > seg1.endIdx && it.endIdx < seg2.startIdx }
                if (gap != null) {
                    val w1 = (seg1.endIdx - seg1.startIdx + 1) * stepX
                    val w2 = (seg2.endIdx - seg2.startIdx + 1) * stepX
                    if (w1 in minDiceWidth..maxDiceWidth && w2 in minDiceWidth..maxDiceWidth) {
                        // –ü—Ä–∞–≤—ã–π –∫—Ä–∞–π –≤—Ç–æ—Ä–æ–π –∫–æ—Å—Ç–∏ ‚Äî –∫–æ–Ω–µ—Ü –≤—Ç–æ—Ä–æ–≥–æ —Å–≤–µ—Ç–ª–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
                        val idx = seg2.endIdx
                        val xEdge = xs.getOrNull(idx)?.coerceIn(area.left + 1, area.right - 1)
                        if (xEdge != null) return xEdge
                    }
                }
            }
            null
        } catch (_: Exception) {
            null
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∫—É–±–∏–∫–æ–≤ —Å–ø—Ä–∞–≤–∞ –æ—Ç —Ç–µ–∫—É—â–µ–π –æ–±–ª–∞—Å—Ç–∏
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç X-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É, –≥–¥–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã, –∏–ª–∏ null –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
     */
    private fun checkForOldDiceArtifacts(bmp: Bitmap, area: Rect): Int? {
        return try {
            val scanTop = (area.top + area.height() * 0.3f).toInt()
            val scanBottom = (area.top + area.height() * 0.8f).toInt()
            val stepX = 3

            // –°–∫–∞–Ω–∏—Ä—É–µ–º —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ, –Ω–∞—á–∏–Ω–∞—è –æ—Ç –ø—Ä–∞–≤–æ–≥–æ –∫—Ä–∞—è –æ–±–ª–∞—Å—Ç–∏
            val startX = area.right - 5 // –Ω–∞—á–∏–Ω–∞–µ–º —á—É—Ç—å –ª–µ–≤–µ–µ –ø—Ä–∞–≤–æ–≥–æ –∫—Ä–∞—è
            val endX = (area.left + area.width() * 0.7f).toInt() // –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ–º –Ω–∞ 70% —à–∏—Ä–∏–Ω—ã

            var artifactStart: Int? = null
            var consecutiveBrightPixels = 0
            val minConsecutive = 8 // –º–∏–Ω–∏–º—É–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —è—Ä–∫–∏—Ö –ø–∏–∫—Å–µ–ª–µ–π

            fun isBrightPixel(x: Int, y: Int): Boolean {
                val c = bmp.getPixel(x, y)
                val r = ((c shr 16) and 0xFF) / 255f
                val g = ((c shr 8) and 0xFF) / 255f
                val b = (c and 0xFF) / 255f
                val luma = 0.2126f * r + 0.7152f * g + 0.0722f * b
                return luma > 0.35f // –ø–æ—Ä–æ–≥ –¥–ª—è —è—Ä–∫–∏—Ö –ø–∏–∫—Å–µ–ª–µ–π (—Ç–æ—á–∫–∏ –Ω–∞ –∫—É–±–∏–∫–∞—Ö)
            }

            var x = startX
            while (x > endX) {
                var brightCount = 0
                var y = scanTop
                while (y < scanBottom) {
                    if (isBrightPixel(x, y)) {
                        brightCount++
                    }
                    y += 2
                }

                // –ï—Å–ª–∏ –≤ —ç—Ç–æ–π –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏ –º–Ω–æ–≥–æ —è—Ä–∫–∏—Ö –ø–∏–∫—Å–µ–ª–µ–π - —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫—É–±–∏–∫
                if (brightCount >= 3) { // –º–∏–Ω–∏–º—É–º 3 —è—Ä–∫–∏—Ö –ø–∏–∫—Å–µ–ª—è –≤ –ª–∏–Ω–∏–∏
                    consecutiveBrightPixels++
                    if (artifactStart == null) {
                        artifactStart = x
                    }
                } else {
                    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ —Ç–µ–º–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
                    if (consecutiveBrightPixels >= minConsecutive) {
                        // –ù–∞—à–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —è—Ä–∫–∏—Ö –ø–∏–∫—Å–µ–ª–µ–π
                        Log.d(TAG, "üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—Å—Ç–∞—Ç–∫–∏ –∫—É–±–∏–∫–æ–≤ –Ω–∞ X=${artifactStart}")
                        return artifactStart
                    }
                    consecutiveBrightPixels = 0
                    artifactStart = null
                }

                x -= stepX
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —è—Ä–∫–∏–µ –ø–∏–∫—Å–µ–ª–∏ –¥–æ—Ö–æ–¥—è—Ç –¥–æ –ª–µ–≤–æ–≥–æ –∫—Ä–∞—è –æ–±–ª–∞—Å—Ç–∏
            if (consecutiveBrightPixels >= minConsecutive) {
                Log.d(TAG, "üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—Å—Ç–∞—Ç–∫–∏ –∫—É–±–∏–∫–æ–≤ —É –ª–µ–≤–æ–≥–æ –∫—Ä–∞—è: X=${artifactStart}")
                return artifactStart
            }

            null
        } catch (_: Exception) {
            null
        }
    }

    // –ü–æ–¥–±–∏—Ä–∞–µ—Ç –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ, —É–≤–µ–ª–∏—á–∏–≤–∞—é—â–µ–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–æ—á–µ–∫
    private fun calibrateVerticalOffset(screenshot: Bitmap, rect: Rect, window: WindowType): Int {
        return try {
            val range = (rect.height() / 3).coerceAtMost(120)
            val step = 6
            var bestOffset = 0
            var bestScore = -1f
            var bestSub: Bitmap? = null
            var bestDots: DotCounter.Result? = null

            Log.d(TAG, "üß≠ –ù–∞—á–∏–Ω–∞–µ–º –∫–∞–ª–∏–±—Ä–æ–≤–∫—É: –¥–∏–∞–ø–∞–∑–æ–Ω ¬±${range}px, —à–∞–≥ ${step}px")

            for (dy in -range..range step step) {
                val testTop = (rect.top + dy).coerceIn(0, screenshot.height - 2)
                val testBottom = (rect.bottom + dy).coerceIn(testTop + 1, screenshot.height)
                val testRect = Rect(rect.left, testTop, rect.right, testBottom)
                val safe = safeRect(testRect, screenshot.width, screenshot.height)
                try {
                    val sub = Bitmap.createBitmap(screenshot, safe.left, safe.top, safe.width(), safe.height())
                    val dots = kotlinx.coroutines.runBlocking { analyzeWithEconomicAI(sub, window) } ?: continue
                    val nonZero = (dots.leftDots + dots.rightDots) > 0
                    val score = if (nonZero) dots.confidence + 0.5f else dots.confidence

                    if (score > bestScore) {
                        bestScore = score
                        bestOffset = dy
                        bestSub?.recycle() // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        bestSub = sub.copy(sub.config ?: Bitmap.Config.ARGB_8888, false) // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ø–∏—é –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                        bestDots = dots
                    } else {
                        sub.recycle()
                    }
                } catch (_: Exception) {
                    // –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–≤–µ—Ä–Ω—ã–µ –∫—Ä–æ–ø—ã
                }
            }

            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if (preferencesManager.isDebugImagesEnabled() && debugFolder != null && bestSub != null && bestDots != null) {
                val calibrationFilename = "calibration_best_offset${bestOffset}_${createDebugFilename("", window, bestDots!!).substring(1)}"
                saveDebugImage(bestSub!!, calibrationFilename, "–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ (—Å–º–µ—â–µ–Ω–∏–µ: ${bestOffset}px)")
                Log.d(TAG, "üß≠ –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –ª—É—á—à–µ–µ —Å–º–µ—â–µ–Ω–∏–µ = ${bestOffset}px, –æ—Ü–µ–Ω–∫–∞ = ${bestScore}")
            }

            bestSub?.recycle()
            bestOffset
        } catch (_: Exception) {
            0
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫—É–±–∏–∫–æ–≤ –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –∫—É–±–∏–∫–æ–≤
     */
    private suspend fun getCurrentDiceResult(): RoundResult? {
        return withContext(Dispatchers.IO) {
            try {
                // –ü–æ–ª—É—á–∞–µ–º –æ–±–ª–∞—Å—Ç—å –∫—É–±–∏–∫–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –æ–∫–Ω–∞
                val currentWindow = gameState.currentWindow
                val areaForLog = areaManager.getAreaForWindow(currentWindow, AreaType.BET_RESULT)
                    ?: areaManager.getAreaForWindow(currentWindow, AreaType.DICE_AREA)

                if (areaForLog == null) {
                    Log.v(TAG, "‚ùå –û–±–ª–∞—Å—Ç—å –∫—É–±–∏–∫–æ–≤ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è –æ–∫–Ω–∞ $currentWindow")
                    return@withContext null
                }

                Log.v(TAG, "üé≤ –ê–Ω–∞–ª–∏–∑ –∫—É–±–∏–∫–æ–≤ –≤ –æ–±–ª–∞—Å—Ç–∏: ${areaForLog.rect}")

                // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —ç–∫—Ä–∞–Ω–∞
                // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Å–∏–º—É–ª—è—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                val redDots = (1..6).random()
                val orangeDots = (1..6).random()

                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
                val isDraw = redDots == orangeDots
                val winner = when {
                    isDraw -> null
                    redDots > orangeDots -> BetChoice.RED
                    else -> BetChoice.ORANGE
                }

                Log.v(TAG, "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: –ö—Ä–∞—Å–Ω—ã–π=$redDots, –û—Ä–∞–Ω–∂–µ–≤—ã–π=$orangeDots, –ü–æ–±–µ–¥–∏—Ç–µ–ª—å=$winner")

                val result = RoundResult(
                    redDots = redDots,
                    orangeDots = orangeDots,
                    winner = winner,
                    isDraw = isDraw,
                    confidence = 0.95f
                )

                return@withContext result

            } catch (e: Exception) {
                Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫—É–±–∏–∫–æ–≤", e)
                return@withContext null
            }
        }
    }

    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç RoundResult –≤ GameResultType –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
     */
    private fun convertRoundResultToGameResult(roundResult: RoundResult): GameResultType {
        val result = when {
            roundResult.winner == null -> {
                Log.d(TAG, "üéØ –ù–ò–ß–¨–Ø = –ü–†–û–ò–ì–†–´–®: –∫—Ä–∞—Å–Ω—ã–π=${roundResult.redDots}, –æ—Ä–∞–Ω–∂–µ–≤—ã–π=${roundResult.orangeDots}")
                GameResultType.LOSS
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
            gameState.currentColor == BetChoice.RED -> {
                if (roundResult.winner == BetChoice.RED) {
                    Log.d(TAG, "‚úÖ –í–´–ò–ì–†–´–®: —Å—Ç–∞–≤–∏–ª–∏ –Ω–∞ –ö–†–ê–°–ù–´–ô (${roundResult.redDots}) vs –æ—Ä–∞–Ω–∂–µ–≤—ã–π (${roundResult.orangeDots}) - –ö–†–ê–°–ù–´–ô –ü–û–ë–ï–î–ò–õ!")
                    GameResultType.WIN
                } else {
                    Log.d(TAG, "‚ùå –ü–†–û–ò–ì–†–´–®: —Å—Ç–∞–≤–∏–ª–∏ –Ω–∞ –ö–†–ê–°–ù–´–ô (${roundResult.redDots}) vs –æ—Ä–∞–Ω–∂–µ–≤—ã–π (${roundResult.orangeDots}) - –û–†–ê–ù–ñ–ï–í–´–ô –ü–û–ë–ï–î–ò–õ!")
                    GameResultType.LOSS
                }
            }

            gameState.currentColor == BetChoice.ORANGE -> {
                if (roundResult.winner == BetChoice.ORANGE) {
                    Log.d(TAG, "‚úÖ –í–´–ò–ì–†–´–®: —Å—Ç–∞–≤–∏–ª–∏ –Ω–∞ –û–†–ê–ù–ñ–ï–í–´–ô (${roundResult.orangeDots}) vs –∫—Ä–∞—Å–Ω—ã–π (${roundResult.redDots}) - –û–†–ê–ù–ñ–ï–í–´–ô –ü–û–ë–ï–î–ò–õ!")
                    GameResultType.WIN
                } else {
                    Log.d(TAG, "‚ùå –ü–†–û–ò–ì–†–´–®: —Å—Ç–∞–≤–∏–ª–∏ –Ω–∞ –û–†–ê–ù–ñ–ï–í–´–ô (${roundResult.orangeDots}) vs –∫—Ä–∞—Å–Ω—ã–π (${roundResult.redDots}) - –ö–†–ê–°–ù–´–ô –ü–û–ë–ï–î–ò–õ!")
                    GameResultType.LOSS
                }
            }

            else -> {
                Log.d(TAG, "‚ùì –ù–ï–ò–ó–í–ï–°–¢–ù–´–ô —Ä–µ–∑—É–ª—å—Ç–∞—Ç: —Å—Ç–∞–≤–∏–ª–∏ –Ω–∞ ${gameState.currentColor}, –ø–æ–±–µ–¥–∏—Ç–µ–ª—å=${roundResult.winner}")
                GameResultType.UNKNOWN
            }
        }

        Log.d(TAG, "üéÆ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: $result")
        return result
    }

    /**
     * –†–∞–∑–º–µ—â–∞–µ—Ç –±–∞–∑–æ–≤—É—é —Å—Ç–∞–≤–∫—É –ë–ï–ó —É–¥–≤–æ–µ–Ω–∏—è
     */
    private suspend fun placeBetBaseAmount(targetWindow: WindowType, baseAmount: Int) {
        Log.d(TAG, "üé≤ –†–∞–∑–º–µ—â–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Å—Ç–∞–≤–∫–∏ $baseAmount –≤ –æ–∫–Ω–µ $targetWindow")

        // –ö–ª–∏–∫–∞–µ–º –ø–æ –±–∞–∑–æ–≤–æ–π —Å—Ç–∞–≤–∫–µ
        val baseBetArea = areaManager.getAreaForWindow(targetWindow, getAreaTypeForAmount(baseAmount))
        if (baseBetArea == null) {
            val errorMsg = "‚ùå –û–±–ª–∞—Å—Ç—å –±–∞–∑–æ–≤–æ–π —Å—Ç–∞–≤–∫–∏ $baseAmount –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è –æ–∫–Ω–∞ $targetWindow"
            Log.e(TAG, errorMsg)
            onError?.invoke(errorMsg)
            return
        }

        Log.d(TAG, "  üéØ –ö–ª–∏–∫ –ø–æ –±–∞–∑–æ–≤–æ–π —Å—Ç–∞–≤–∫–µ $baseAmount")
        val baseResult = clickManager.clickAreaFast(baseBetArea, FAST_CLICK_DELAY)
        if (baseResult !is GameResult.Success) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –±–∞–∑–æ–≤–æ–π —Å—Ç–∞–≤–∫–µ")
            onError?.invoke("–û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –±–∞–∑–æ–≤–æ–π —Å—Ç–∞–≤–∫–µ")
            return
        }

        Log.d(TAG, "‚úÖ –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ $baseAmount —Ä–∞–∑–º–µ—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    }

    /**
     * –ü—Ä–∏–º–µ–Ω—è–µ—Ç —É–¥–≤–æ–µ–Ω–∏—è –ü–û–°–õ–ï –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞
     */
    private suspend fun applyDoublingClicks(targetWindow: WindowType, doublingClicks: Int) {
        Log.d(TAG, "üî¢ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ $doublingClicks —É–¥–≤–æ–µ–Ω–∏–π –≤ –æ–∫–Ω–µ $targetWindow")

        val doubleArea = areaManager.getAreaForWindow(targetWindow, AreaType.DOUBLE_BUTTON)
        if (doubleArea == null) {
            val errorMsg = "‚ùå –û–±–ª–∞—Å—Ç—å –∫–Ω–æ–ø–∫–∏ —É–¥–≤–æ–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è –æ–∫–Ω–∞ $targetWindow"
            Log.e(TAG, errorMsg)
            onError?.invoke(errorMsg)
            return
        }

        repeat(doublingClicks) { i ->
            val doubleResult = clickManager.clickAreaFast(doubleArea, FAST_CLICK_DELAY)
            if (doubleResult !is GameResult.Success) {
                Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ —É–¥–≤–æ–µ–Ω–∏—è ${i + 1}")
                onError?.invoke("–û—à–∏–±–∫–∞ —É–¥–≤–æ–µ–Ω–∏—è ${i + 1}")
                return
            }

            Log.d(TAG, "    ‚úÖ –£–¥–≤–æ–µ–Ω–∏–µ ${i + 1}/$doublingClicks –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")

            if (i < doublingClicks - 1) {
                delay(FAST_CLICK_DELAY)
            }
        }

        Log.d(TAG, "‚úÖ –í—Å–µ $doublingClicks —É–¥–≤–æ–µ–Ω–∏–π –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    }

    // –£–î–ê–õ–ï–ù: –°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ getBetStrategy –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ BetCalculator.calculateBetStrategy()

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ç–∏–ø –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—É–º–º—ã —Å—Ç–∞–≤–∫–∏ (DEPRECATED: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ BetCalculator)
     */
    private fun getAreaTypeForAmount(amount: Int): AreaType {
        return when (amount) {
            10 -> AreaType.BET_10
            50 -> AreaType.BET_50
            100 -> AreaType.BET_100
            500 -> AreaType.BET_500
            2500 -> AreaType.BET_2500
            else -> {
                // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à—É—é –º–µ–Ω—å—à—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é —Å—Ç–∞–≤–∫—É
                when {
                    amount <= 10 -> AreaType.BET_10
                    amount <= 50 -> AreaType.BET_50
                    amount <= 100 -> AreaType.BET_100
                    amount <= 500 -> AreaType.BET_500
                    else -> AreaType.BET_2500
                }
            }
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ç–∏–ø –∫–Ω–æ–ø–∫–∏ —Ü–≤–µ—Ç–∞
     */
    private fun getColorButtonType(color: BetChoice): AreaType {
        return when (color) {
            BetChoice.RED -> AreaType.RED_BUTTON
            BetChoice.ORANGE -> AreaType.ORANGE_BUTTON
            else -> AreaType.RED_BUTTON // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫—Ä–∞—Å–Ω—ã–π
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ –æ–∫–Ω–æ –¥–ª—è —Å—Ç–∞–≤–∫–∏
     */
    private fun getNextWindow(currentWindow: WindowType): WindowType {
        val settings = preferencesManager.getDualModeSettings()
        return when (settings.splitScreenType) {
            SplitScreenType.HORIZONTAL -> when (currentWindow) {
                WindowType.LEFT -> WindowType.RIGHT
                WindowType.RIGHT -> WindowType.LEFT
                WindowType.TOP, WindowType.BOTTOM -> WindowType.LEFT
            }
            SplitScreenType.VERTICAL -> when (currentWindow) {
                WindowType.TOP -> WindowType.BOTTOM
                WindowType.BOTTOM -> WindowType.TOP
                WindowType.LEFT, WindowType.RIGHT -> WindowType.TOP
            }
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –æ–±–ª–∞—Å—Ç–µ–π –¥–ª—è –¥–≤–æ–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
     */
    private fun checkAreasConfigured(): Boolean {
        Log.d(TAG, "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π –¥–ª—è –¥–≤–æ–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞")
        Log.d(TAG, "–í—ã–∑—ã–≤–∞–µ–º areaManager.loadAreas()...")

        areaManager.loadAreas()

        Log.d(TAG, "areaManager.loadAreas() –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")

        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–≤–æ–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        val dualModeSettings = preferencesManager.getDualModeSettings()
        val splitScreenType = dualModeSettings.splitScreenType
        Log.d(TAG, "–¢–∏–ø —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞: $splitScreenType")

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∫–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        val (firstWindowType, secondWindowType) = when (splitScreenType) {
            SplitScreenType.HORIZONTAL -> {
                Log.d(TAG, "–ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫–Ω–∞: LEFT –∏ RIGHT")
                Pair(WindowType.LEFT, WindowType.RIGHT)
            }
            SplitScreenType.VERTICAL -> {
                Log.d(TAG, "–ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫–Ω–∞: TOP –∏ BOTTOM")
                Pair(WindowType.TOP, WindowType.BOTTOM)
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–µ—Ä–≤–æ–≥–æ –æ–∫–Ω–∞
        val firstWindowAreas = areaManager.getAreasForWindow(firstWindowType)
        Log.d(TAG, "$firstWindowType –æ–∫–Ω–æ - –Ω–∞–π–¥–µ–Ω–æ –æ–±–ª–∞—Å—Ç–µ–π: ${firstWindowAreas.size}")
        firstWindowAreas.forEach { (areaType, screenArea) ->
            Log.d(TAG, "  $firstWindowType: $areaType -> ${screenArea.rect}")
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤—Ç–æ—Ä–æ–≥–æ –æ–∫–Ω–∞
        val secondWindowAreas = areaManager.getAreasForWindow(secondWindowType)
        Log.d(TAG, "$secondWindowType –æ–∫–Ω–æ - –Ω–∞–π–¥–µ–Ω–æ –æ–±–ª–∞—Å—Ç–µ–π: ${secondWindowAreas.size}")
        secondWindowAreas.forEach { (areaType, screenArea) ->
            Log.d(TAG, "  $secondWindowType: $areaType -> ${screenArea.rect}")
        }

        // –ü—Ä–æ–≤–µ—Ä–∏–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –Ω—É–∂–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏
        val requiredAreas = listOf(AreaType.BET_10, AreaType.RED_BUTTON, AreaType.ORANGE_BUTTON, AreaType.CONFIRM_BET, AreaType.DOUBLE_BUTTON)

        Log.d(TAG, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π:")
        requiredAreas.forEach { areaType ->
            val firstArea = areaManager.getAreaForWindow(firstWindowType, areaType)
            val secondArea = areaManager.getAreaForWindow(secondWindowType, areaType)
            Log.d(TAG, "  $areaType: $firstWindowType=${firstArea != null}, $secondWindowType=${secondArea != null}")
        }

        Log.d(TAG, "–°—Ç–∞—Ç—É—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–ª–∞—Å—Ç–µ–π:")
        Log.d(TAG, "  $firstWindowType –æ–∫–Ω–æ: ${if (areaManager.isWindowConfigured(firstWindowType)) "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ" else "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"}")
        Log.d(TAG, "  $secondWindowType –æ–∫–Ω–æ: ${if (areaManager.isWindowConfigured(secondWindowType)) "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ" else "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"}")

        val areBothConfigured = areaManager.isWindowConfigured(firstWindowType) && areaManager.isWindowConfigured(secondWindowType)

        if (!areBothConfigured) {
            val errorMsg = """
                ‚ùå –û–±–ª–∞—Å—Ç–∏ –¥–ª—è –¥–≤–æ–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!
                
                üìã –°—Ç–∞—Ç—É—Å:
                ‚Ä¢ $firstWindowType –æ–∫–Ω–æ: ${if (areaManager.isWindowConfigured(firstWindowType)) "‚úÖ" else "‚ùå"}
                ‚Ä¢ $secondWindowType –æ–∫–Ω–æ: ${if (areaManager.isWindowConfigured(secondWindowType)) "‚úÖ" else "‚ùå"}
                
                üîß –†–µ—à–µ–Ω–∏–µ:
                1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–ª–∞—Å—Ç–µ–π –¥–≤–æ–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"
                2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è –æ–±–æ–∏—Ö –æ–∫–æ–Ω
                3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –æ–±–ª–∞—Å—Ç–∏
                
                üìù –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –æ–±–ª–∞—Å—Ç–∏:
                ‚Ä¢ –°—Ç–∞–≤–∫–∞ 10
                ‚Ä¢ –ö—Ä–∞—Å–Ω—ã–π –∫—É–±–∏–∫  
                ‚Ä¢ –û—Ä–∞–Ω–∂–µ–≤—ã–π –∫—É–±–∏–∫
                ‚Ä¢ –ó–∞–∫–ª—é—á–∏—Ç—å –ø–∞—Ä–∏
                ‚Ä¢ –£–¥–≤–æ–∏—Ç—å —Å—Ç–∞–≤–∫—É
                
                ‚ö†Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —Ç–∏–ø —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞: $splitScreenType
            """.trimIndent()

            Log.e(TAG, errorMsg)
            onError?.invoke(errorMsg)
            return false
        }

        Log.d(TAG, "‚úÖ –í—Å–µ –æ–±–ª–∞—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return true
    }

    /**
     * –£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    private fun notifyStateChanged() {
        onStateChanged?.invoke(gameState)
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
     */
    fun getCurrentState(): SimpleDualModeState = gameState

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ
     */
    fun getStatistics(): String {
        return """
            üéÆ –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–≤–æ–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            
            üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
            ‚Ä¢ –¢–µ–∫—É—â–µ–µ –æ–∫–Ω–æ: ${gameState.currentWindow}
            ‚Ä¢ –¢–µ–∫—É—â–∏–π —Ü–≤–µ—Ç: ${gameState.currentColor}
            ‚Ä¢ –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: ${gameState.currentBet}
            ‚Ä¢ –í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫: ${gameState.totalBets}
            ‚Ä¢ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${gameState.totalProfit}
            ‚Ä¢ –ü—Ä–æ–∏–≥—Ä—ã—à–∏ –ø–æ–¥—Ä—è–¥: ${gameState.consecutiveLosses}
            ‚Ä¢ –ü—Ä–æ–∏–≥—Ä—ã—à–∏ –Ω–∞ —Ü–≤–µ—Ç–µ: ${gameState.consecutiveLossesOnCurrentColor}
            
            üìà –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${when (gameState.lastResult) {
            GameResultType.WIN -> "–í—ã–∏–≥—Ä—ã—à"
            GameResultType.LOSS -> "–ü—Ä–æ–∏–≥—Ä—ã—à"
            GameResultType.DRAW -> "–ü—Ä–æ–∏–≥—Ä—ã—à (–Ω–∏—á—å—è)"
            GameResultType.UNKNOWN -> "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        }}
        """.trimIndent()
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ MediaProjection –¥–ª—è ScreenCaptureManager
     */
    fun updateMediaProjection(resultCode: Int, data: Intent) {
        Log.d(TAG, "updateMediaProjection –≤—ã–∑–≤–∞–Ω —Å resultCode=$resultCode")
        try {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ MediaProjectionPermissionManager
            val permissionManager = MediaProjectionPermissionManager.getInstance(context)
            permissionManager.savePermission(resultCode, data)
            Log.d(TAG, "MediaProjection –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ PermissionManager")

            // –ï—Å–ª–∏ ScreenCaptureManager —É–∂–µ —Å–æ–∑–¥–∞–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
            screenCaptureManager?.let { scm ->
                Log.d(TAG, "–û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ScreenCaptureManager")
                // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞—Ö–≤–∞—Ç —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                scm.stopCapture()
                val startResult = scm.startCapture()
                if (startResult is GameResult.Error) {
                    Log.e(TAG, "–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ ScreenCaptureManager: ${startResult.message}")
                } else {
                    Log.d(TAG, "ScreenCaptureManager —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
                }
            }
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ MediaProjection –¥–∞–Ω–Ω—ã—Ö", e)
        }
    }

    /**
     * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–≤–æ–π–Ω–æ–π —Ä–µ–∂–∏–º —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ
     */
    private fun stopDualMode(reason: String) {
        Log.w(TAG, "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–≤–æ–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞: $reason")

        gameState = gameState.copy(isRunning = false)
        gameJob?.cancel()
        gameJob = null

        // TODO: –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∏—á–∏–Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        // –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å broadcast –∏–ª–∏ callback

        notifyStateChanged()
        Log.d(TAG, "‚úÖ –î–≤–æ–π–Ω–æ–π —Ä–µ–∂–∏–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ –ø—Ä–∏—á–∏–Ω–µ: $reason")
    }

    /**
     * –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–∂–∏–º
     */
    private fun requestPermissionAndStop(reason: String) {
        Log.w(TAG, "üîë –ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: $reason")

        try {
            // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
            val intent = Intent(context, MediaProjectionRequestActivity::class.java)
            intent.putExtra(MediaProjectionRequestActivity.EXTRA_TARGET_SERVICE, MediaProjectionRequestActivity.SERVICE_DUAL_MODE)
            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
            context.startActivity(intent)
            Log.d(TAG, "üîë –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω–∞")

            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º
            stopDualMode(reason)

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: ${e.message}")
            stopDualMode("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: ${e.message}")
        }
    }

    /**
     * üéØ –ü–†–û–°–¢–û–ï –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–ï –ë–ï–ó –ü–†–û–í–ï–†–ö–ò –ò–ó–ú–ï–ù–ï–ù–ò–ô (–ª–æ–≥–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ waitForStableResult)
     */
    private suspend fun analyzeWithEconomicAI(image: Bitmap, window: WindowType): DotCounter.Result? {
        try {
            Log.d(TAG, "üéØ [SimpleDice] –ü—Ä–æ—Å—Ç–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ (–±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π)...")

            // ‚ú® –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ OpenCV –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
            val openCVResult = DotCounter.count(image)

            Log.d(TAG, "üéØ [SimpleDice] OpenCV —Ä–µ–∑—É–ª—å—Ç–∞—Ç: L=${openCVResult.leftDots}, R=${openCVResult.rightDots}")

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ë–ï–ó –≤—Å—è–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            return openCVResult

        } catch (e: Exception) {
            Log.e(TAG, "üéØ [SimpleDice] ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ${e.message}", e)
            return null
        }
    }

    // === –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê –î–ï–¢–ï–ö–¶–ò–ò –ò–ó–ú–ï–ù–ï–ù–ò–ô ===

    /**
     * –ë—ã—Å—Ç—Ä–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ö–µ—à–∞ –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π (–ë–ï–ó –æ–±—Ä–µ–∑–∫–∏)
     */
    private suspend fun getAreaHashFast(window: WindowType): String? {
        return withContext(Dispatchers.IO) {
            try {
                val scm = screenCaptureManager ?: return@withContext null
                val shot = scm.captureScreen()
                if (shot !is GameResult.Success) return@withContext null

                // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –æ–±–ª–∞—Å—Ç—å –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è (–±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –æ–±—Ä–µ–∑–∫–∏)
                val areas = areaManager.getAreasForWindow(window)
                val area = areas[AreaType.DICE_AREA] ?: areas[AreaType.BET_RESULT] ?: return@withContext null

                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –æ–±–ª–∞—Å—Ç—å –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏ –æ–±—Ä–µ–∑–∫–∏
                val rect = area.rect
                val insets = com.example.diceautobet.utils.CoordinateUtils.getSystemInsets(context)
                val simpleRect = Rect(
                    rect.left.coerceAtLeast(0),
                    (rect.top + insets.statusBarHeight).coerceAtLeast(0),
                    rect.right.coerceAtMost(shot.data.width),
                    (rect.bottom + insets.statusBarHeight).coerceAtMost(shot.data.height)
                )

                if (simpleRect.width() <= 1 || simpleRect.height() <= 1) return@withContext null

                // –ü—Ä–æ—Å—Ç–æ–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ bitmap
                val hash = calculateSimpleAreaHash(shot.data, simpleRect)
                hash
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è: ${e.message}")
                null
            }
        }
    }

    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ—Å—Ç–æ–π —Ö–µ—à –æ–±–ª–∞—Å—Ç–∏ –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ bitmap
     */
    private fun calculateSimpleAreaHash(bitmap: Bitmap, rect: Rect): String {
        try {
            val step = 4 // –ë–µ—Ä–µ–º –∫–∞–∂–¥—ã–π 4-–π –ø–∏–∫—Å–µ–ª—å –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
            val pixels = mutableListOf<Int>()

            var y = rect.top
            while (y < rect.bottom) {
                var x = rect.left
                while (x < rect.right) {
                    if (x < bitmap.width && y < bitmap.height) {
                        pixels.add(bitmap.getPixel(x, y))
                    }
                    x += step
                }
                y += step
            }

            // –ü—Ä–æ—Å—Ç–æ–π —Ö–µ—à –∏–∑ –ø–∏–∫—Å–µ–ª–µ–π
            return pixels.hashCode().toString()
        } catch (e: Exception) {
            return System.currentTimeMillis().toString()
        }
    }

    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç MD5 —Ö–µ—à –æ–±–ª–∞—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
     */
    private suspend fun getAreaHash(window: WindowType): String? {
        return withContext(Dispatchers.IO) {
            try {
                val crop = captureDiceCrop(window) ?: return@withContext null
                val hash = calculateImageHash(crop)
                crop.recycle()
                hash
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ö–µ—à–∞: ${e.message}")
                null
            }
        }
    }

    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç MD5 —Ö–µ—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    private fun calculateImageHash(bitmap: Bitmap): String {
        try {
            // –°–∂–∏–º–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±–∞–π—Ç—ã
            val buffer = ByteBuffer.allocate(bitmap.byteCount)
            bitmap.copyPixelsToBuffer(buffer)
            val bytes = buffer.array()

            // –í—ã—á–∏—Å–ª—è–µ–º MD5
            val md = MessageDigest.getInstance("MD5")
            val hashBytes = md.digest(bytes)

            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ hex —Å—Ç—Ä–æ–∫—É
            return hashBytes.joinToString("") { "%02x".format(it) }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è MD5: ${e.message}")
            return System.currentTimeMillis().toString() // Fallback
        }
    }

    /**
     * –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ OpenCV –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–æ–∫
     */
    private suspend fun quickAnalyzeOpenCV(crop: Bitmap): RoundResult? {
        return withContext(Dispatchers.Default) {
            try {
                val dots = DotCounter.count(crop)
                RoundResult.fromDotResult(dots)
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ OpenCV: ${e.message}")
                null
            }
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫—É–±–∏–∫–æ–≤
     */
    private fun isValidDiceResult(result: RoundResult): Boolean {
        return result.redDots in 1..6 &&
                result.orangeDots in 1..6 &&
                result.confidence >= 0.25f // –°–Ω–∏–∂–µ–Ω –ø–æ—Ä–æ–≥ —Å 0.4f –¥–æ 0.25f –¥–ª—è –ª—É—á—à–µ–π —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    }

    /**
     * –î–µ—Ç–µ–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ —Ö–µ—à—É –∏ –æ–∂–∏–¥–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
     * –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: —Å–Ω–∞—á–∞–ª–∞ –¥–µ—Ç–µ–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π, –ø–æ—Ç–æ–º –æ–∂–∏–¥–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
     */
    private suspend fun detectDiceChangeAndStabilize(window: WindowType): RoundResult? {
        Log.d(TAG, "üîç –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–π –¥–µ—Ç–µ–∫—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –æ–∫–Ω–∞ $window")

        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Ö–µ—à (–±—ã—Å—Ç—Ä—ã–π)
        val initialHash = getAreaHashFast(window)
        if (initialHash == null) {
            Log.e(TAG, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–π —Ö–µ—à")
            return null
        }

        Log.d(TAG, "üìã –ù–∞—á–∞–ª—å–Ω—ã–π —Ö–µ—à: ${initialHash.take(8)}...")

        // –§–∞–∑–∞ 1: –ñ–¥–µ–º –Ω–∞—á–∞–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π (–∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∫—É–±–∏–∫–æ–≤)
        var currentHash = initialHash
        var changeDetected = false
        val maxWaitForChange = 30000L // 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        val changeStartTime = System.currentTimeMillis()

        Log.d(TAG, "‚è≥ –§–∞–∑–∞ 1: –û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π...")

        while (!changeDetected &&
            (System.currentTimeMillis() - changeStartTime) < maxWaitForChange &&
            gameState.isRunning) {

            delay(20) // –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê–Ø —á–∞—Å—Ç–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ - –∫–∞–∂–¥—ã–µ 20–º—Å!
            val newHash = getAreaHashFast(window) // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—ã—Å—Ç—Ä—ã–π –º–µ—Ç–æ–¥

            if (newHash != null && newHash != currentHash) {
                changeDetected = true
                Log.d(TAG, "üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã! ${currentHash.take(8)}... ‚Üí ${newHash.take(8)}...")
                break
            }
        }

        if (!changeDetected) {
            Log.w(TAG, "‚ö†Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞ ${maxWaitForChange}–º—Å")
            return null
        }

        // –§–∞–∑–∞ 2: –û–∂–∏–¥–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ (–æ–∫–æ–Ω—á–∞–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏)
        Log.d(TAG, "‚è≥ –§–∞–∑–∞ 2: –û–∂–∏–¥–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏...")

        var stabilizationHash = ""
        var stableStartTime = 0L
        val requiredStableTime = 300L // –°–æ–∫—Ä–∞—â–∞–µ–º –¥–æ 0.3 —Å–µ–∫—É–Ω–¥—ã!
        val maxWaitForStable = 12000L // –£–º–µ–Ω—å—à–∞–µ–º –¥–æ 12 —Å–µ–∫—É–Ω–¥
        val stableStartWaitTime = System.currentTimeMillis()

        while ((System.currentTimeMillis() - stableStartWaitTime) < maxWaitForStable &&
            gameState.isRunning) {

            delay(80) // –£—Å–∫–æ—Ä—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
            val newHash = getAreaHashFast(window) // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—ã—Å—Ç—Ä—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏

            if (newHash == null) continue

            if (newHash == stabilizationHash) {
                // –•–µ—à —Å—Ç–∞–±–∏–ª–µ–Ω
                if (stableStartTime == 0L) {
                    stableStartTime = System.currentTimeMillis()
                    Log.d(TAG, "üìå –ù–∞—á–∞–ª–æ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏: ${newHash.take(8)}...")
                } else {
                    val stableTime = System.currentTimeMillis() - stableStartTime
                    if (stableTime >= requiredStableTime) {
                        Log.d(TAG, "‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–ª–æ—Å—å (${stableTime}–º—Å)")
                        break
                    }
                }
            } else {
                // –•–µ—à –∏–∑–º–µ–Ω–∏–ª—Å—è - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—é
                if (stabilizationHash.isNotEmpty()) {
                    Log.d(TAG, "üîÑ –°—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞: ${stabilizationHash.take(8)}... ‚Üí ${newHash.take(8)}...")
                }
                stabilizationHash = newHash
                stableStartTime = 0L
            }
        }

        if (stableStartTime == 0L) {
            Log.w(TAG, "‚ö†Ô∏è –ù–µ –¥–æ–∂–¥–∞–ª–∏—Å—å —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ –∑–∞ ${maxWaitForStable}–º—Å")
            return null
        }

        // –§–∞–∑–∞ 3: –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        Log.d(TAG, "üéØ –§–∞–∑–∞ 3: –ê–Ω–∞–ª–∏–∑ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")

        return waitForDiceStabilization(window)
    }

    /**
     * –£–º–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫—É–±–∏–∫–æ–≤
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å OpenCV —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —á–µ—Ä–µ–∑ Gemini
     */
    private suspend fun waitForDiceStabilization(window: WindowType): RoundResult? {
        Log.d(TAG, "üéØ –ó–∞–ø—É—Å–∫ —É–º–Ω–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –æ–∫–Ω–∞ $window")

        var stableFrameCount = 0
        var lastValidResult: RoundResult? = null
        val maxWaitTime = 5000L // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ 5 —Å–µ–∫—É–Ω–¥
        val startTime = System.currentTimeMillis()
        val requiredStableFrames = 1 // –ú–ì–ù–û–í–ï–ù–ù–û: —Ç–æ–ª—å–∫–æ 1 –∫–∞–¥—Ä!
        
        // üéØ –£–ü–†–û–©–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –≤–∞–ª–∏–¥–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ö–æ—Ä–æ—à–µ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é
        val minConfidenceForInstantAccept = 0.6f // –°–Ω–∏–∂–∞–µ–º —Å 0.8 –¥–æ 0.6

        while ((System.currentTimeMillis() - startTime) < maxWaitTime && gameState.isRunning) {
            val crop = captureDiceCrop(window)
            if (crop == null) {
                delay(100)
                continue
            }

            // –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫—É–±–∏–∫–∏ —á–µ—Ä–µ–∑ OpenCV
            val currentResult = quickAnalyzeOpenCV(crop)

            if (currentResult != null && isValidDiceResult(currentResult)) {
                // –ü–æ–ª—É—á–∏–ª–∏ –≤–∞–ª–∏–¥–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫—É–±–∏–∫–æ–≤
                Log.d(TAG, "üìä –í–∞–ª–∏–¥–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${currentResult.redDots}:${currentResult.orangeDots} (conf: ${String.format("%.2f", currentResult.confidence)})")

                // üöÄ –£–ü–†–û–©–ï–ù–ò–ï: –µ—Å–ª–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤—ã—Å–æ–∫–∞—è, –ø—Ä–∏–Ω–∏–º–∞–µ–º —Å—Ä–∞–∑—É
                if (currentResult.confidence >= minConfidenceForInstantAccept) {
                    Log.d(TAG, "‚ö° –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å ${String.format("%.2f", currentResult.confidence)} - –ø—Ä–∏–Ω–∏–º–∞–µ–º —Å—Ä–∞–∑—É!")
                    
                    // –í–ê–ñ–ù–û: –°—Ä–∞–∑—É –ø–µ—Ä–µ–¥–∞–µ–º –≤ Gemini –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
                    val confirmedResult = confirmWithGemini(crop, currentResult)
                    crop.recycle()
                    
                    if (confirmedResult == null) {
                        Log.e(TAG, "üõë –†–µ–∂–∏–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Gemini")
                        return null
                    }
                    
                    return confirmedResult
                }

                // –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –Ω–∏–∑–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                if (lastValidResult != null &&
                    currentResult.redDots == lastValidResult.redDots &&
                    currentResult.orangeDots == lastValidResult.orangeDots) {

                    stableFrameCount++
                    Log.d(TAG, "üìå –°—Ç–∞–±–∏–ª—å–Ω—ã–π –∫–∞–¥—Ä ${stableFrameCount}/${requiredStableFrames}")

                    // –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç–∞–±–∏–ª–µ–Ω –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–ª–≥–æ
                    if (stableFrameCount >= requiredStableFrames) {
                        Log.d(TAG, "‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–ª—Å—è: ${currentResult.redDots}:${currentResult.orangeDots}")

                        // –í–ê–ñ–ù–û: –°—Ä–∞–∑—É –ø–µ—Ä–µ–¥–∞–µ–º –≤ Gemini –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
                        val confirmedResult = confirmWithGemini(crop, currentResult)
                        crop.recycle()
                        
                        // –ï—Å–ª–∏ Gemini –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–≤–µ—Ä–Ω—É–ª null), —Ñ—É–Ω–∫—Ü–∏—è —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∞ —Ä–µ–∂–∏–º
                        if (confirmedResult == null) {
                            Log.e(TAG, "üõë –†–µ–∂–∏–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Gemini")
                            return null
                        }
                        
                        return confirmedResult
                    }
                } else {
                    // –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è - –æ–±–Ω–æ–≤–ª—è–µ–º –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                    if (lastValidResult != null) {
                        Log.d(TAG, "üîÑ –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è: ${lastValidResult.redDots}:${lastValidResult.orangeDots} ‚Üí ${currentResult.redDots}:${currentResult.orangeDots}")
                    }
                    stableFrameCount = 1
                    lastValidResult = currentResult
                }
            } else {
                // –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–≤–æ–∑–º–æ–∂–Ω–æ, –∞–Ω–∏–º–∞—Ü–∏—è –µ—â–µ –∏–¥–µ—Ç)
                if (currentResult != null) {
                    Log.d(TAG, "‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${currentResult.redDots}:${currentResult.orangeDots} (conf: ${String.format("%.2f", currentResult.confidence)})")
                } else {
                    Log.d(TAG, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                }
                stableFrameCount = 0
                lastValidResult = null
            }

            crop.recycle()
            delay(30) // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ OpenCV!
        }

        Log.w(TAG, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞ ${maxWaitTime}–º—Å")
        return null
    }

    /**
     * –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —á–µ—Ä–µ–∑ Gemini API (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç Gemini)
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç null –µ—Å–ª–∏ Gemini –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—á—Ç–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–µ–∂–∏–º–∞)
     */
    private suspend fun confirmWithGemini(crop: Bitmap, openCVResult: RoundResult): RoundResult? {
        val aiProvider = preferencesManager.getAIProvider()
        val modelName = when (aiProvider) {
            PreferencesManager.AIProvider.OPENROUTER -> preferencesManager.getOpenRouterModel().displayName
            else -> "OpenCV"
        }
        
        Log.d(TAG, "üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ—á–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —á–µ—Ä–µ–∑ AI ($modelName): ${openCVResult.redDots}:${openCVResult.orangeDots}")

        try {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—Ä–æ–ø –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            saveGeminiCropImage(crop, gameState.currentWindow,
                DotCounter.Result(openCVResult.redDots, openCVResult.orangeDots, openCVResult.confidence))

            // –ü–æ–ª—É—á–∞–µ–º —Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç AI (—á–µ—Ä–µ–∑ HybridDiceRecognizer)
            val aiResult = analyzeWithGeminiDirect(crop)

            if (aiResult != null) {
                val aiRoundResult = RoundResult.fromDotResult(aiResult)

                if (isValidDiceResult(aiRoundResult)) {
                    Log.d(TAG, "‚úÖ AI ($modelName) –¥–∞–ª —Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${aiRoundResult.redDots}:${aiRoundResult.orangeDots}")
                    return aiRoundResult
                } else {
                    Log.w(TAG, "‚ö†Ô∏è AI –≤–µ—Ä–Ω—É–ª –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${aiRoundResult.redDots}:${aiRoundResult.orangeDots}")
                    // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å —Ç–µ–º –∂–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
                    delay(200)
                    val retryResult = analyzeWithGeminiDirect(crop)
                    if (retryResult != null) {
                        val retryRoundResult = RoundResult.fromDotResult(retryResult)
                        if (isValidDiceResult(retryRoundResult)) {
                            Log.d(TAG, "‚úÖ AI –ø–æ–≤—Ç–æ—Ä–Ω–æ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${retryRoundResult.redDots}:${retryRoundResult.orangeDots}")
                            return retryRoundResult
                        }
                    }
                }
            } else {
                Log.w(TAG, "‚ö†Ô∏è AI –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞...")
                delay(300)
                val retryResult = analyzeWithGeminiDirect(crop)
                if (retryResult != null) {
                    val retryRoundResult = RoundResult.fromDotResult(retryResult)
                    if (isValidDiceResult(retryRoundResult)) {
                        Log.d(TAG, "‚úÖ AI –æ—Ç–≤–µ—Ç–∏–ª –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ: ${retryRoundResult.redDots}:${retryRoundResult.orangeDots}")
                        return retryRoundResult
                    }
                }
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI: ${e.message}")
        }

        // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø: AI –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é
        Log.e(TAG, "üõë AI –ù–ï–î–û–°–¢–£–ü–ï–ù: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–≤–æ–π–Ω–æ–π —Ä–µ–∂–∏–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.")
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —Ä–µ–∂–∏–º
        stopDualMode("AI API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–∫—Å–∏.")
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –≤–º–µ—Å—Ç–æ fallback —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        return null
    }

}
