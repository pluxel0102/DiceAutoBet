package com.example.diceautobet.controllers

import android.content.Context
import android.graphics.Bitmap
import android.graphics.Canvas
import android.graphics.ColorMatrix
import android.graphics.ColorMatrixColorFilter
import android.graphics.Paint
import android.graphics.Rect
import android.util.Log
import android.widget.Toast
import com.example.diceautobet.game.ClickManager
import com.example.diceautobet.game.ScreenCaptureManager
import com.example.diceautobet.models.*
import com.example.diceautobet.recognition.HybridDiceRecognizer
import com.example.diceautobet.utils.PreferencesManager
import com.example.diceautobet.utils.FileLogger
import kotlinx.coroutines.*
import java.io.File
import java.security.MessageDigest
import java.text.SimpleDateFormat
import java.util.*

// Extension —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤ FileLogger
private fun logD(tag: String, message: String) {
    Log.d(tag, message)
    FileLogger.d(tag, message)
}

private fun logI(tag: String, message: String) {
    Log.i(tag, message)
    FileLogger.i(tag, message)
}

private fun logW(tag: String, message: String) {
    Log.w(tag, message)
    FileLogger.w(tag, message)
}

private fun logE(tag: String, message: String) {
    Log.e(tag, message)
    FileLogger.e(tag, message)
}

private fun logE(tag: String, message: String, throwable: Throwable) {
    Log.e(tag, message, throwable)
    FileLogger.e(tag, "$message: ${throwable.message}")
}

/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∏–≥—Ä—ã –≤ –Ω–∞—Ä–¥—ã
 *
 * –õ–æ–≥–∏–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞:
 * 1. –°—Ç–∞—Ä—Ç: –≤—ã–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —Ü–≤–µ—Ç –∏ –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É
 * 2. –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã —á–µ—Ä–µ–∑ –¥–µ—Ç–µ–∫—Ü–∏—é –æ–±–ª–∞—Å—Ç–∏ –∫—É–±–∏–∫–æ–≤
 * 3. –ü—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ: —É–¥–≤–∞–∏–≤–∞–µ–º —Å—Ç–∞–≤–∫—É (–Ω–∞–∂–∏–º–∞–µ–º —Ü–≤–µ—Ç + N —Ä–∞–∑ X2)
 * 4. –ü–æ—Å–ª–µ 2 –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π –Ω–∞ –æ–¥–Ω–æ–º —Ü–≤–µ—Ç–µ: –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –¥—Ä—É–≥–æ–π —Ü–≤–µ—Ç + –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —É–¥–≤–∞–∏–≤–∞—Ç—å
 * 5. –ü—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–µ: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –±–∞–∑–æ–≤–æ–π —Å—Ç–∞–≤–∫–µ
 * 6. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–∏ (200,000)
 */
class SingleModeController(
    private val context: Context,
    private val takeScreenshot: (callback: (Bitmap?) -> Unit) -> Unit,
    private val performClick: (x: Int, y: Int, callback: (Boolean) -> Unit) -> Unit,
    private val preferencesManager: PreferencesManager
) {
    companion object {
        private const val TAG = "SingleModeController"

        // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–µ—Ç–µ–∫—Ü–∏–∏
        private const val DETECTION_INTERVAL_MS = 50L
        private const val STABLE_HASH_DURATION_MS = 1500L
        private const val MAX_DETECTION_TIME_MS = 300000L // –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ 5 –º–∏–Ω—É—Ç (300 —Å–µ–∫—É–Ω–¥)
        private const val GAME_RESTART_TIMEOUT_MS = 60000L

        // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∫–ª–∏–∫–æ–≤
        private const val CLICK_DELAY_MS = 500L
        private const val BETWEEN_CLICKS_DELAY_MS = 300L
    }

    private var isActive = false
    private var gameJob: Job? = null
    private var detectionJob: Job? = null

    // –ò–≥—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    private var gameState = SingleModeGameState()
    private var settings = SingleModeSettings()

    // –û–±–ª–∞—Å—Ç–∏ –∫–ª–∏–∫–æ–≤
    private val areas = mutableMapOf<SingleModeAreaType, Rect>()

    // –°–∏—Å—Ç–µ–º–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    private var lastDiceAreaHash: String? = null
    private var stableHashStartTime: Long = 0
    private var isInStablePhase = false
    
    // –°—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –¥–µ—Ç–µ–∫—Ü–∏–∏
    private var consecutiveFailedDetections = 0
    private val maxFailedDetections = 3 // –ú–∞–∫—Å–∏–º—É–º 3 –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥—Ä—è–¥

    // –ö–æ–ª–ª–±—ç–∫–∏ –¥–ª—è UI
    var onGameStateChanged: ((SingleModeGameState) -> Unit)? = null
    var onGameStopped: ((String) -> Unit)? = null
    var onError: ((String, Throwable?) -> Unit)? = null
    var onDebugMessage: ((String) -> Unit)? = null

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
     */
    fun initialize() {
        try {
            Log.d(TAG, "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SingleModeController")
            FileLogger.d(TAG, "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SingleModeController")

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            loadSettings()

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–ª–∞—Å—Ç–∏
            loadAreas()

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
            gameState = gameState.copy(
                baseBet = settings.baseBet,
                currentBet = settings.baseBet,
                currentColor = settings.preferredColor,
                maxBet = settings.maxBet,
                maxLossesBeforeColorSwitch = settings.maxLossesBeforeColorSwitch
            )

            Log.d(TAG, "SingleModeController –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏: $settings")
            FileLogger.i(TAG, "SingleModeController –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: baseBet=${settings.baseBet}, —Ü–≤–µ—Ç=${settings.preferredColor}")

        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏", e)
            onError?.invoke("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${e.message}", e)
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
     */
    fun startGame() {
        if (isActive) {
            Log.w(TAG, "–ò–≥—Ä–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
            return
        }

        try {
            Log.d(TAG, "–ó–∞–ø—É—Å–∫ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞")

            isActive = true
            consecutiveFailedDetections = 0 // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
            gameState = gameState.copy(
                isGameActive = true,
                gameStartTime = System.currentTimeMillis()
            )

            onGameStateChanged?.invoke(gameState)
            onDebugMessage?.invoke("üéÆ –û–¥–∏–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º –∑–∞–ø—É—â–µ–Ω")

            // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
            gameJob = CoroutineScope(Dispatchers.IO).launch {
                try {
                    runGameLoop()
                } catch (e: CancellationException) {
                    Log.d(TAG, "–ò–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª –æ—Ç–º–µ–Ω–µ–Ω")
                } catch (e: Exception) {
                    Log.e(TAG, "–û—à–∏–±–∫–∞ –≤ –∏–≥—Ä–æ–≤–æ–º —Ü–∏–∫–ª–µ", e)
                    onError?.invoke("–û—à–∏–±–∫–∞ –≤ –∏–≥—Ä–µ: ${e.message}", e)
                }
            }

        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã", e)
            onError?.invoke("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: ${e.message}", e)
            stopGame()
        }
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–≥—Ä—ã
     */
    fun stopGame() {
        try {
            Log.d(TAG, "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞")

            isActive = false
            gameJob?.cancel()
            detectionJob?.cancel()

            val duration = gameState.getGameDuration()
            val durationText = formatDuration(duration)

            gameState = gameState.copy(
                isGameActive = false,
                isPaused = false
            )

            onGameStateChanged?.invoke(gameState)
            onGameStopped?.invoke("–ò–≥—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: $durationText")

            Log.d(TAG, "–ò–≥—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${gameState.totalGames} –∏–≥—Ä, ${gameState.totalWins} –ø–æ–±–µ–¥, ${gameState.getWinRate()}% –ø–æ–±–µ–¥")

        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–≥—Ä—ã", e)
        }
    }

    /**
     * –ü–∞—É–∑–∞/–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä—ã
     */
    fun togglePause() {
        try {
            val newPausedState = !gameState.isPaused
            gameState = gameState.copy(isPaused = newPausedState)

            Log.d(TAG, "–ò–≥—Ä–∞ ${if (newPausedState) "–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–∞—É–∑—É" else "–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞"}")
            onGameStateChanged?.invoke(gameState)
            onDebugMessage?.invoke(if (newPausedState) "‚è∏Ô∏è –ü–∞—É–∑–∞" else "‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")

        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–∞—É–∑—ã", e)
        }
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
     */
    private suspend fun runGameLoop() {
        while (isActive) {
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—É–∑—É
                if (gameState.isPaused) {
                    delay(1000)
                    continue
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                if (gameState.shouldStopGame()) {
                    withContext(Dispatchers.Main) {
                        onDebugMessage?.invoke("üõë –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ${gameState.maxBet}")
                        stopGame()
                    }
                    break
                }

                Log.d(TAG, "–ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥ –∏–≥—Ä—ã")
                logD(TAG, "üé≤ –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥: —Å—Ç–∞–≤–∫–∞=${gameState.currentBet}, —Ü–≤–µ—Ç=${gameState.currentColor.displayName}")
                onDebugMessage?.invoke("üéØ –î–µ–ª–∞–µ–º —Å—Ç–∞–≤–∫—É: ${gameState.currentColor.displayName} ${gameState.currentBet}")

                // –≠—Ç–∞–ø 1: –î–µ–ª–∞–µ–º —Å—Ç–∞–≤–∫—É
                logD(TAG, "–≠—Ç–∞–ø 1: –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏")
                placeBet()

                // –≠—Ç–∞–ø 2: –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                logD(TAG, "–≠—Ç–∞–ø 2: –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä—ã")
                val result = waitForGameResult()

                if (result != null) {
                    // –≠—Ç–∞–ø 3: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    consecutiveFailedDetections = 0 // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
                    logI(TAG, "‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω: –ª–µ–≤—ã–π=${result.leftDots}, –ø—Ä–∞–≤—ã–π=${result.rightDots}")
                    processGameResult(result)
                } else {
                    consecutiveFailedDetections++
                    Log.w(TAG, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–∞—É–Ω–¥ (–ø–æ–ø—ã—Ç–∫–∞ $consecutiveFailedDetections/$maxFailedDetections)")
                    logW(TAG, "‚ùå –¢–∞–π–º–∞—É—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏! –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–∞—É–Ω–¥ ($consecutiveFailedDetections/$maxFailedDetections)")
                    onDebugMessage?.invoke("‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –ø–æ–ø—ã—Ç–∫–∞ $consecutiveFailedDetections/$maxFailedDetections")
                    
                    if (consecutiveFailedDetections >= maxFailedDetections) {
                        Log.e(TAG, "üö® –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –¥–µ—Ç–µ–∫—Ü–∏–π ($maxFailedDetections), –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä—É")
                        onDebugMessage?.invoke("üö® –û—Å—Ç–∞–Ω–æ–≤–∫–∞: —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –¥–µ—Ç–µ–∫—Ü–∏–π")
                        withContext(Dispatchers.Main) {
                            stopGame()
                        }
                        break
                    }
                    
                    delay(5000) // –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                }

            } catch (e: CancellationException) {
                throw e
            } catch (e: Exception) {
                Log.e(TAG, "–û—à–∏–±–∫–∞ –≤ –∏–≥—Ä–æ–≤–æ–º —Ü–∏–∫–ª–µ", e)
                onError?.invoke("–û—à–∏–±–∫–∞ –≤ —Ä–∞—É–Ω–¥–µ: ${e.message}", e)
                delay(5000) // –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
            }
        }
    }

    /**
     * –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏
     */
    private suspend fun placeBet() {
        try {
            logI(TAG, "üí∞ placeBet() START: —Å—Ç–∞–≤–∫–∞=${gameState.currentBet}, —Ü–≤–µ—Ç=${gameState.currentColor}")
            
            // –ü–†–û–í–ï–†–ö–ê –ü–ê–£–ó–´ –ø–µ—Ä–µ–¥ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ–º —Å—Ç–∞–≤–∫–∏
            if (gameState.isPaused) {
                Log.d(TAG, "üõë –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ –æ—Ç–ª–æ–∂–µ–Ω–æ - –∏–≥—Ä–∞ –Ω–∞ –ø–∞—É–∑–µ")
                logW(TAG, "üõë –ü–∞—É–∑–∞ - —Å—Ç–∞–≤–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–∞")
                return
            }

            Log.d(TAG, "–†–∞–∑–º–µ—â–∞–µ–º —Å—Ç–∞–≤–∫—É: ${gameState.currentColor.displayName} ${gameState.currentBet}")

            // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–Ω–æ–ø–∫—É 10 + x2 –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª—é–±–æ–π —Å—Ç–∞–≤–∫–∏
            if (gameState.baseBet == 20) {
                // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –±–∞–∑–æ–≤–æ–π —Å—Ç–∞–≤–∫–∏ 20
                val multiplierClicks = calculateMultiplierClicks(gameState.currentBet)
                
                Log.d(TAG, "–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–Ω–æ–ø–∫—É 10 + x2 ($multiplierClicks —Ä–∞–∑) –¥–ª—è —Å—Ç–∞–≤–∫–∏ ${gameState.currentBet}")
                
                // –ü–†–û–í–ï–†–ö–ê –ü–ê–£–ó–´ –ø–µ—Ä–µ–¥ –∫–ª–∏–∫–æ–º –±–∞–∑–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ 10
                if (gameState.isPaused) {
                    Log.d(TAG, "üõë –ü–∞—É–∑–∞ –≤–æ –≤—Ä–µ–º—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ 10")
                    return
                }
                
                // –í—Å–µ–≥–¥–∞ –Ω–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É 10
                if (areas.containsKey(SingleModeAreaType.BET_10)) {
                    clickArea(SingleModeAreaType.BET_10)
                    delay(CLICK_DELAY_MS)
                } else {
                    Log.e(TAG, "‚ùå –û–±–ª–∞—Å—Ç—å –∫–Ω–æ–ø–∫–∏ BET_10 –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!")
                    throw IllegalStateException("–û–±–ª–∞—Å—Ç—å –∫–Ω–æ–ø–∫–∏ BET_10 –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
                }
                
                // –ü–†–û–í–ï–†–ö–ê –ü–ê–£–ó–´ –ø–µ—Ä–µ–¥ –∫–ª–∏–∫–æ–º —Ü–≤–µ—Ç–∞
                if (gameState.isPaused) {
                    Log.d(TAG, "üõë –ü–∞—É–∑–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞")
                    return
                }

                // –ù–∞–∂–∏–º–∞–µ–º —Ü–≤–µ—Ç —Å—Ç–∞–≤–∫–∏
                val colorArea = when (gameState.currentColor) {
                    BetColor.BLUE -> SingleModeAreaType.BET_BLUE
                    BetColor.RED -> SingleModeAreaType.BET_RED
                }

                if (areas.containsKey(colorArea)) {
                    clickArea(colorArea)
                    delay(CLICK_DELAY_MS)
                } else {
                    Log.e(TAG, "‚ùå –û–±–ª–∞—Å—Ç—å —Ü–≤–µ—Ç–∞ $colorArea –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!")
                    throw IllegalStateException("–û–±–ª–∞—Å—Ç—å —Ü–≤–µ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
                }

                // –ü–†–û–í–ï–†–ö–ê –ü–ê–£–ó–´ –ø–µ—Ä–µ–¥ —É–º–Ω–æ–∂–µ–Ω–∏–µ–º
                if (gameState.isPaused) {
                    Log.d(TAG, "üõë –ü–∞—É–∑–∞ –≤–æ –≤—Ä–µ–º—è —É–º–Ω–æ–∂–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏")
                    return
                }

                // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É x2 –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑
                if (multiplierClicks > 0) {
                    if (!areas.containsKey(SingleModeAreaType.DOUBLE_BUTTON)) {
                        Log.e(TAG, "‚ùå –û–±–ª–∞—Å—Ç—å –∫–Ω–æ–ø–∫–∏ —É–¥–≤–æ–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!")
                        throw IllegalStateException("–û–±–ª–∞—Å—Ç—å –∫–Ω–æ–ø–∫–∏ —É–¥–≤–æ–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
                    }
                    
                    Log.d(TAG, "–ù–∞–∂–∏–º–∞–µ–º X2 $multiplierClicks —Ä–∞–∑ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏ ${gameState.currentBet}")

                    repeat(multiplierClicks) { i ->
                        // –ü–†–û–í–ï–†–ö–ê –ü–ê–£–ó–´ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –∫–ª–∏–∫–æ–º —É–¥–≤–æ–µ–Ω–∏—è
                        if (gameState.isPaused) {
                            Log.d(TAG, "üõë –ü–∞—É–∑–∞ –≤–æ –≤—Ä–µ–º—è –∫–ª–∏–∫–∞ —É–¥–≤–æ–µ–Ω–∏—è ${i + 1}")
                            return
                        }
                        
                        clickArea(SingleModeAreaType.DOUBLE_BUTTON)
                        Log.d(TAG, "  ‚úÖ –ö–ª–∏–∫ x2 ${i + 1}/$multiplierClicks –≤—ã–ø–æ–ª–Ω–µ–Ω")
                        
                        if (i < multiplierClicks - 1) {
                            delay(BETWEEN_CLICKS_DELAY_MS)
                        }
                    }
                }
                
            } else {
                // –°–¢–ê–†–ê–Ø –õ–û–ì–ò–ö–ê: –¥–ª—è –¥—Ä—É–≥–∏—Ö –±–∞–∑–æ–≤—ã—Ö —Å—Ç–∞–≤–æ–∫
                // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç–∞–≤–∫–∞ –∏–ª–∏ –º—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –±–∞–∑–æ–≤–æ–π —Å—Ç–∞–≤–∫–µ
                if (gameState.currentBet == gameState.baseBet) {
                    // –ü–†–û–í–ï–†–ö–ê –ü–ê–£–ó–´ –ø–µ—Ä–µ–¥ –∫–ª–∏–∫–æ–º –±–∞–∑–æ–≤–æ–π —Å—Ç–∞–≤–∫–∏
                    if (gameState.isPaused) {
                        Log.d(TAG, "üõë –ü–∞—É–∑–∞ –≤–æ –≤—Ä–µ–º—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–π —Å—Ç–∞–≤–∫–∏")
                        return
                    }
                    
                    // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –±–∞–∑–æ–≤–æ–π —Å—Ç–∞–≤–∫–∏
                    val baseBetArea = SingleModeAreaType.getBetAreaByAmount(gameState.baseBet)
                    if (baseBetArea != null && areas.containsKey(baseBetArea)) {
                        clickArea(baseBetArea)
                        delay(CLICK_DELAY_MS)
                    }
                }

                // –ü–†–û–í–ï–†–ö–ê –ü–ê–£–ó–´ –ø–µ—Ä–µ–¥ –∫–ª–∏–∫–æ–º —Ü–≤–µ—Ç–∞
                if (gameState.isPaused) {
                    Log.d(TAG, "üõë –ü–∞—É–∑–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞")
                    return
                }

                // –ù–∞–∂–∏–º–∞–µ–º —Ü–≤–µ—Ç —Å—Ç–∞–≤–∫–∏
                val colorArea = when (gameState.currentColor) {
                    BetColor.BLUE -> SingleModeAreaType.BET_BLUE
                    BetColor.RED -> SingleModeAreaType.BET_RED
                }

                if (areas.containsKey(colorArea)) {
                    clickArea(colorArea)
                    delay(CLICK_DELAY_MS)
                }

                // –ü–†–û–í–ï–†–ö–ê –ü–ê–£–ó–´ –ø–µ—Ä–µ–¥ —É–¥–≤–æ–µ–Ω–∏–µ–º
                if (gameState.isPaused) {
                    Log.d(TAG, "üõë –ü–∞—É–∑–∞ –≤–æ –≤—Ä–µ–º—è —É–¥–≤–æ–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏")
                    return
                }

                // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É —É–¥–≤–æ–µ–Ω–∏—è –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑ (–°–¢–ê–†–ê–Ø –õ–û–ì–ò–ö–ê)
                val doublingClicks = gameState.getDoublingClicksNeeded()
                if (doublingClicks > 0 && areas.containsKey(SingleModeAreaType.DOUBLE_BUTTON)) {
                    Log.d(TAG, "–ù–∞–∂–∏–º–∞–µ–º X2 $doublingClicks —Ä–∞–∑ –¥–ª—è —Å—Ç–∞–≤–∫–∏ ${gameState.currentBet}")

                    repeat(doublingClicks) {
                        // –ü–†–û–í–ï–†–ö–ê –ü–ê–£–ó–´ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –∫–ª–∏–∫–æ–º —É–¥–≤–æ–µ–Ω–∏—è
                        if (gameState.isPaused) {
                            Log.d(TAG, "üõë –ü–∞—É–∑–∞ –≤–æ –≤—Ä–µ–º—è –∫–ª–∏–∫–∞ —É–¥–≤–æ–µ–Ω–∏—è")
                            return
                        }
                        
                        clickArea(SingleModeAreaType.DOUBLE_BUTTON)
                        delay(BETWEEN_CLICKS_DELAY_MS)
                    }
                }
            }

            onDebugMessage?.invoke("‚úÖ –°—Ç–∞–≤–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∞: ${gameState.currentColor.displayName} ${gameState.currentBet}")

        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏", e)
            throw e
        }
    }

    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–∫–∏ x2 –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω—É–∂–Ω–æ–π —Å—Ç–∞–≤–∫–∏ –∏–∑ –±–∞–∑—ã 10
     * –ù–∞–ø—Ä–∏–º–µ—Ä: 20 = 10 * 2^1 ‚Üí 1 –∫–ª–∏–∫, 40 = 10 * 2^2 ‚Üí 2 –∫–ª–∏–∫–∞, –∏ —Ç.–¥.
     */
    private fun calculateMultiplierClicks(targetBet: Int): Int {
        if (targetBet < 10) return 0
        
        // –ù–∞—Ö–æ–¥–∏–º —Å—Ç–µ–ø–µ–Ω—å –¥–≤–æ–π–∫–∏: targetBet = 10 * 2^n
        var current = 10
        var clicks = 0
        
        while (current < targetBet) {
            current *= 2
            clicks++
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∞—Å—å —Ç–æ—á–Ω–æ –Ω—É–∂–Ω–∞—è —Å—É–º–º–∞
        if (current != targetBet) {
            Log.w(TAG, "‚ö†Ô∏è –°—Ç–∞–≤–∫–∞ $targetBet –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª—É—á–µ–Ω–∞ –∏–∑ 10 —á–µ—Ä–µ–∑ —É–¥–≤–æ–µ–Ω–∏—è. –ë–ª–∏–∂–∞–π—à–∞—è: $current")
        }
        
        Log.d(TAG, "üí∞ –î–ª—è —Å—Ç–∞–≤–∫–∏ $targetBet –Ω—É–∂–Ω–æ $clicks –Ω–∞–∂–∞—Ç–∏–π x2 (10 ‚Üí $current)")
        return clicks
    }

    /**
     * –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä—ã
     */
    private suspend fun waitForGameResult(): com.example.diceautobet.models.DiceResult? {
        return try {
            Log.d(TAG, "–û–∂–∏–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã...")
            onDebugMessage?.invoke("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")

            Log.d(TAG, "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±–ª–∞—Å—Ç–∏ –∫—É–±–∏–∫–æ–≤...")
            Log.d(TAG, "üîç –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –æ–±–ª–∞—Å—Ç–µ–π: ${areas.size}")
            areas.forEach { (areaType, rect) ->
                Log.d(TAG, "üîç   ${areaType.displayName} -> $rect")
            }

            val diceArea = areas[SingleModeAreaType.DICE_AREA]
            if (diceArea == null) {
                Log.e(TAG, "üö® –û–±–ª–∞—Å—Ç—å –∫—É–±–∏–∫–æ–≤ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
                Log.e(TAG, "üö® –ö–ª—é—á DICE_AREA: ${SingleModeAreaType.DICE_AREA}")
                Log.e(TAG, "üö® –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏: ${areas.keys}")
                return null
            }

            Log.d(TAG, "‚úÖ –û–±–ª–∞—Å—Ç—å –∫—É–±–∏–∫–æ–≤ –Ω–∞–π–¥–µ–Ω–∞: $diceArea")
            detectGameResult(diceArea)

        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞", e)
            null
        }
    }

    /**
     * –î–µ—Ç–µ–∫—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä—ã —á–µ—Ä–µ–∑ –∞–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
     */
    private suspend fun detectGameResult(diceArea: Rect): com.example.diceautobet.models.DiceResult? {
        val startTime = System.currentTimeMillis()
        lastDiceAreaHash = null
        stableHashStartTime = 0
        isInStablePhase = false

        while (System.currentTimeMillis() - startTime < MAX_DETECTION_TIME_MS) {
            try {
                // –ü–†–û–í–ï–†–ö–ê –ü–ê–£–ó–´: –µ—Å–ª–∏ –∏–≥—Ä–∞ –Ω–∞ –ø–∞—É–∑–µ, –∂–¥–µ–º
                if (gameState.isPaused) {
                    Log.d(TAG, "üõë –î–µ—Ç–µ–∫—Ü–∏—è –Ω–∞ –ø–∞—É–∑–µ, –æ–∂–∏–¥–∞–Ω–∏–µ...")
                    delay(500)
                    continue
                }

                // –ò—Å–ø–æ–ª—å–∑—É–µ–º callback –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
                var screenshot: Bitmap? = null
                var completed = false

                takeScreenshot { bitmap ->
                    screenshot = bitmap
                    completed = true
                }

                // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è callback (–ø—Ä–æ—Å—Ç–∞—è –±–ª–æ–∫–∏—Ä—É—é—â–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è)
                while (!completed && System.currentTimeMillis() - startTime < MAX_DETECTION_TIME_MS) {
                    // –ü–†–û–í–ï–†–ö–ê –ü–ê–£–ó–´ –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
                    if (gameState.isPaused) {
                        Log.d(TAG, "üõë –î–µ—Ç–µ–∫—Ü–∏—è –Ω–∞ –ø–∞—É–∑–µ –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞")
                        delay(500)
                        break
                    }
                    delay(10)
                }

                // –ï—Å–ª–∏ –∏–≥—Ä–∞ –Ω–∞ –ø–∞—É–∑–µ, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
                if (gameState.isPaused) {
                    continue
                }

                if (screenshot == null) {
                    delay(DETECTION_INTERVAL_MS)
                    continue
                }

                // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±–ª–∞—Å—Ç—å –∫—É–±–∏–∫–æ–≤
                val diceAreaBitmap = Bitmap.createBitmap(
                    screenshot!!,
                    diceArea.left,
                    diceArea.top,
                    diceArea.width(),
                    diceArea.height()
                )

                // –í—ã—á–∏—Å–ª—è–µ–º —Ö–µ—à –æ–±–ª–∞—Å—Ç–∏
                val currentHash = calculateBitmapHash(diceAreaBitmap)

                if (lastDiceAreaHash == null) {
                    lastDiceAreaHash = currentHash
                    delay(DETECTION_INTERVAL_MS)
                    continue
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                if (currentHash != lastDiceAreaHash) {
                    // –û–±–ª–∞—Å—Ç—å –∏–∑–º–µ–Ω–∏–ª–∞—Å—å - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    isInStablePhase = false
                    stableHashStartTime = 0
                    lastDiceAreaHash = currentHash
                } else if (!isInStablePhase) {
                    // –û–±–ª–∞—Å—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–∞ - –Ω–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å—á–µ—Ç
                    if (stableHashStartTime == 0L) {
                        stableHashStartTime = System.currentTimeMillis()
                    } else if (System.currentTimeMillis() - stableHashStartTime >= STABLE_HASH_DURATION_MS) {
                        // –û–±–ª–∞—Å—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–ª–≥–æ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ
                        isInStablePhase = true

                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Ç–∞–π–º–µ—Ä–æ–º (–∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –¥–µ—Ç–µ–∫—Ü–∏—é)
                        if (isTimerInDiceArea(diceAreaBitmap)) {
                            Log.d(TAG, "üü¢üî¥ –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ç–∞–π–º–µ—Ä –≤ –æ–±–ª–∞—Å—Ç–∏ –∫—É–±–∏–∫–æ–≤, –∂–¥–µ–º –∫—É–±–∏–∫–∏...")
                            onDebugMessage?.invoke("üü¢üî¥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞...")

                            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–ª–µ–¥—É—é—â–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
                            isInStablePhase = false
                            stableHashStartTime = 0
                            lastDiceAreaHash = null
                        } else {
                            // –°—Ç–∞–±–∏–ª—å–Ω—ã–µ –∫—É–±–∏–∫–∏ - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                            Log.d(TAG, "üé≤ –û–±–ª–∞—Å—Ç—å –∫—É–±–∏–∫–æ–≤ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∞—Å—å, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")
                            onDebugMessage?.invoke("üîç –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")

                            val result = analyzeGameResult(diceAreaBitmap)
                            if (result != null) {
                                Log.d(TAG, "–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω: ${result}")
                                return result
                            } else {
                                // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏ –∂–¥–µ–º –¥–∞–ª—å—à–µ
                                Log.w(TAG, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∂–¥–µ–º –¥–∞–ª—å—à–µ...")
                                isInStablePhase = false
                                stableHashStartTime = 0
                                lastDiceAreaHash = null
                            }
                        }
                    }
                }

                diceAreaBitmap?.recycle()
                delay(DETECTION_INTERVAL_MS)

            } catch (e: Exception) {
                Log.e(TAG, "–û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞", e)
                delay(DETECTION_INTERVAL_MS)
            }
        }

        Log.w(TAG, "–¢–∞–π–º–∞—É—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
        Log.w(TAG, "üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞:")
        Log.w(TAG, "   –í—Ä–µ–º—è –¥–µ—Ç–µ–∫—Ü–∏–∏: ${(System.currentTimeMillis() - startTime) / 1000}—Å –∏–∑ ${MAX_DETECTION_TIME_MS / 1000}—Å")
        Log.w(TAG, "   –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ö–µ—à –æ–±–ª–∞—Å—Ç–∏: $lastDiceAreaHash")
        Log.w(TAG, "   –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Ñ–∞–∑–∞: $isInStablePhase")
        Log.w(TAG, "   –í—Ä–µ–º—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏: ${if (stableHashStartTime > 0) (System.currentTimeMillis() - stableHashStartTime) else 0}–º—Å")
        return null
    }

    /**
     * –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä—ã —á–µ—Ä–µ–∑ Gemini
     */
    private suspend fun analyzeGameResult(fullScreenshot: Bitmap): com.example.diceautobet.models.DiceResult? {
        return try {
            if (settings.enableTestMode) {
                // –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                val leftDots = (1..6).random()
                val rightDots = (1..6).random()

                Log.d(TAG, "–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –ª–µ–≤—ã–π=$leftDots, –ø—Ä–∞–≤—ã–π=$rightDots")
                
                // üéØ –ü–û–ö–ê–ó–´–í–ê–ï–ú TOAST –î–õ–Ø –¢–ï–°–¢–û–í–û–ì–û –†–ï–ñ–ò–ú–ê
                withContext(Dispatchers.Main) {
                    val resultText = "–†–µ–∑—É–ª—å—Ç–∞—Ç (—Ç–µ—Å—Ç): $leftDots:$rightDots"
                    Toast.makeText(context, resultText, Toast.LENGTH_SHORT).show()
                }

                com.example.diceautobet.models.DiceResult(
                    leftDots = leftDots,
                    rightDots = rightDots,
                    confidence = 1.0f,
                    isDraw = leftDots == rightDots
                )
            } else {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º AI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª–Ω–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
                val aiProvider = preferencesManager.getAIProvider()
                val modelName = when (aiProvider) {
                    PreferencesManager.AIProvider.OPENROUTER -> preferencesManager.getOpenRouterModel().displayName
                    else -> "OpenCV"
                }
                
                Log.d(TAG, "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ AI ($modelName, –ø–æ–ª–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç)...")

                // –û–¢–õ–ê–î–ö–ê: –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                try {
                    val context = preferencesManager.appContext
                    val timestamp = SimpleDateFormat("yyyyMMdd_HHmmss", Locale.getDefault()).format(Date())
                    val fileName = "single_mode_full_${timestamp}.png"
                    val file = File(context.getExternalFilesDir("debug"), fileName)
                    file.parentFile?.mkdirs()

                    val outputStream = file.outputStream()
                    fullScreenshot.compress(Bitmap.CompressFormat.PNG, 100, outputStream)
                    outputStream.close()

                    Log.d(TAG, "üñºÔ∏è –ü–æ–ª–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è AI —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${file.absolutePath}")
                    Log.d(TAG, "üñºÔ∏è –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${fullScreenshot.width}x${fullScreenshot.height}")
                } catch (e: Exception) {
                    Log.w(TAG, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏", e)
                }

                // –ò—Å–ø–æ–ª—å–∑—É–µ–º HybridDiceRecognizer, –∫–æ—Ç–æ—Ä—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–µ—Ä–µ—Ç –Ω—É–∂–Ω—ã–π –º–µ—Ç–æ–¥
                val recognizer = HybridDiceRecognizer(preferencesManager)

                val aiResult = recognizer.analyzeDice(fullScreenshot)
                if (aiResult != null) {
                    Log.d(TAG, "AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –ª–µ–≤—ã–π=${aiResult.leftDots}, –ø—Ä–∞–≤—ã–π=${aiResult.rightDots}")
                    
                    // üéØ –ü–û–ö–ê–ó–´–í–ê–ï–ú TOAST –° –†–ï–ó–£–õ–¨–¢–ê–¢–û–ú –û–¢ –ù–ï–ô–†–û–°–ï–¢–ò
                    withContext(Dispatchers.Main) {
                        val isDraw = aiResult.leftDots == aiResult.rightDots
                        val emoji = when {
                            isDraw -> "üü∞"
                            aiResult.leftDots > aiResult.rightDots -> "üîµ"
                            else -> "üî¥"
                        }
                        val statusText = when {
                            isDraw -> " (–ù–∏—á—å—è)"
                            else -> ""
                        }
                        val resultText = "$emoji –†–µ–∑—É–ª—å—Ç–∞—Ç: ${aiResult.leftDots}:${aiResult.rightDots}$statusText"
                        Toast.makeText(context, resultText, Toast.LENGTH_SHORT).show()
                        Log.d(TAG, "üì¢ –ü–æ–∫–∞–∑–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: $resultText")
                        FileLogger.i(TAG, "üì¢ Toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: $resultText")
                    }

                    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç DiceResult –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
                    com.example.diceautobet.models.DiceResult(
                        leftDots = aiResult.leftDots,
                        rightDots = aiResult.rightDots,
                        confidence = aiResult.confidence,
                        isDraw = aiResult.leftDots == aiResult.rightDots
                    )
                } else {
                    Log.w(TAG, "AI –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                    null
                }
            }

        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞", e)
            null
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä—ã
     */
    private suspend fun processGameResult(result: com.example.diceautobet.models.DiceResult) {
        try {
            Log.d(TAG, "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç: $result")

            val oldGameState = gameState
            val newGameState = gameState.processGameResult(result)
            gameState = newGameState

            withContext(Dispatchers.Main) {
                onGameStateChanged?.invoke(gameState)

                val isWin = !result.isDraw && when (oldGameState.currentColor) {
                    BetColor.BLUE -> result.leftDots > result.rightDots
                    BetColor.RED -> result.rightDots > result.leftDots
                }

                val resultText = when {
                    result.isDraw -> "–ù–∏—á—å—è ${result.leftDots}-${result.rightDots} (–ø—Ä–æ–∏–≥—Ä—ã—à)"
                    isWin -> "–í—ã–∏–≥—Ä—ã—à! ${result.leftDots}-${result.rightDots}"
                    else -> "–ü—Ä–æ–∏–≥—Ä—ã—à ${result.leftDots}-${result.rightDots}"
                }

                onDebugMessage?.invoke("üé≤ $resultText")

                if (isWin) {
                    onDebugMessage?.invoke("üéâ –í–æ–∑–≤—Ä–∞—Ç –∫ –±–∞–∑–æ–≤–æ–π —Å—Ç–∞–≤–∫–µ ${gameState.baseBet}")
                } else {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –ª–∏ —Å–º–µ–Ω–∞ —Ü–≤–µ—Ç–∞
                    if (oldGameState.currentColor != newGameState.currentColor) {
                        onDebugMessage?.invoke("üîÑ –°–º–µ–Ω–∞ —Ü–≤–µ—Ç–∞ —Å ${oldGameState.currentColor.displayName} –Ω–∞ ${newGameState.currentColor.displayName}")
                    }
                    onDebugMessage?.invoke("üìà –°–ª–µ–¥—É—é—â–∞—è —Å—Ç–∞–≤–∫–∞: ${gameState.currentBet}")
                }
            }

            // –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –ó–ê–î–ï–†–ñ–ö–ê –î–õ–Ø –û–î–ò–ù–û–ß–ù–û–ì–û –†–ï–ñ–ò–ú–ê - 7 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è Gemini
            Log.d(TAG, "‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞ 7 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç–∞–≤–∫–æ–π...")
            onDebugMessage?.invoke("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 7 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç–∞–≤–∫–æ–π...")
            
            // –†–∞–∑–±–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –Ω–∞ –º–µ–ª–∫–∏–µ —á–∞—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—É–∑—ã
            var remainingDelay = 7000L
            while (remainingDelay > 0 && !gameState.isPaused) {
                val stepDelay = minOf(500L, remainingDelay)
                delay(stepDelay)
                remainingDelay -= stepDelay
            }
            
            if (gameState.isPaused) {
                Log.d(TAG, "üõë –ü–∞—É–∑–∞ –≤–æ –≤—Ä–µ–º—è 7-—Å–µ–∫—É–Ω–¥–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏")
                return
            }
            
            // –û–±—ã—á–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ä–∞—É–Ω–¥–∞–º–∏ (—Ç–æ–∂–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–∞—É–∑—ã)
            var detectionDelay = settings.detectionDelay
            while (detectionDelay > 0 && !gameState.isPaused) {
                val stepDelay = minOf(500L, detectionDelay)
                delay(stepDelay)
                detectionDelay -= stepDelay
            }

        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞", e)
            throw e
        }
    }

    /**
     * –ö–ª–∏–∫ –ø–æ –æ–±–ª–∞—Å—Ç–∏
     */
    private suspend fun clickArea(areaType: SingleModeAreaType) {
        val rect = areas[areaType]
        if (rect != null) {
            val centerX = rect.centerX()
            val centerY = rect.centerY()

            if (settings.enableTestMode) {
                Log.d(TAG, "–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–∫ –ø–æ ${areaType.displayName} ($centerX, $centerY)")
            } else {
                performClick(centerX, centerY) { success ->
                    Log.d(TAG, "–ö–ª–∏–∫ –ø–æ ${areaType.displayName} ($centerX, $centerY): success=$success")
                }
            }
        } else {
            Log.w(TAG, "–û–±–ª–∞—Å—Ç—å ${areaType.displayName} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–æ–º (–∑–µ–ª–µ–Ω—ã–µ –∏–ª–∏ –∫—Ä–∞—Å–Ω—ã–µ —Ü–∏—Ñ—Ä—ã)
     * –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è: –æ—Ç–ª–∏—á–∞–µ—Ç —Ç–∞–π–º–µ—Ä –æ—Ç –∫—É–±–∏–∫–æ–≤ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
     */
    private fun isTimerImage(bitmap: Bitmap): Boolean {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–µ–ª–µ–Ω—ã—Ö –∏–ª–∏ –∫—Ä–∞—Å–Ω—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π –≤ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
            val centerX = bitmap.width / 2
            val centerY = bitmap.height / 2
            val checkRadius = minOf(bitmap.width, bitmap.height) / 4

            var greenPixelCount = 0  // –ó–µ–ª—ë–Ω—ã–µ –ø–∏–∫—Å–µ–ª–∏ (—Ç–∞–π–º–µ—Ä)
            var redPixelCount = 0    // –ö—Ä–∞—Å–Ω—ã–µ –ø–∏–∫—Å–µ–ª–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–µ–∫)
            var bluePixelCount = 0   // –°–∏–Ω–∏–µ –ø–∏–∫—Å–µ–ª–∏ (–∫—É–±–∏–∫–∏!)
            var totalPixelsChecked = 0

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–ª–∞—Å—Ç—å –≤–æ–∫—Ä—É–≥ —Ü–µ–Ω—Ç—Ä–∞
            for (x in (centerX - checkRadius)..(centerX + checkRadius)) {
                for (y in (centerY - checkRadius)..(centerY + checkRadius)) {
                    if (x >= 0 && x < bitmap.width && y >= 0 && y < bitmap.height) {
                        val pixel = bitmap.getPixel(x, y)
                        val red = (pixel shr 16) and 0xFF
                        val green = (pixel shr 8) and 0xFF
                        val blue = pixel and 0xFF

                        totalPixelsChecked++

                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∏–∫—Å–µ–ª—å –∑–µ–ª–µ–Ω—ã–º (–æ–±—ã—á–Ω—ã–π —Ç–∞–π–º–µ—Ä)
                        val isGreenTimer = green > red + 40 && green > blue + 40 && green > 120

                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∏–∫—Å–µ–ª—å –∫—Ä–∞—Å–Ω—ã–º (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥ –∏–ª–∏ –ö–£–ë–ò–ö!)
                        val isRedPixel = red > green + 40 && red > blue + 40 && red > 100
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∏–∫—Å–µ–ª—å —Å–∏–Ω–∏–º (–ö–£–ë–ò–ö!)
                        val isBluePixel = blue > red + 40 && blue > green + 40 && blue > 100

                        if (isGreenTimer) greenPixelCount++
                        if (isRedPixel) redPixelCount++
                        if (isBluePixel) bluePixelCount++
                    }
                }
            }

            // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∫–∞–∂–¥–æ–≥–æ —Ü–≤–µ—Ç–∞
            val greenPercentage = if (totalPixelsChecked > 0) {
                (greenPixelCount.toFloat() / totalPixelsChecked) * 100
            } else 0f
            
            val redPercentage = if (totalPixelsChecked > 0) {
                (redPixelCount.toFloat() / totalPixelsChecked) * 100
            } else 0f
            
            val bluePercentage = if (totalPixelsChecked > 0) {
                (bluePixelCount.toFloat() / totalPixelsChecked) * 100
            } else 0f

            // –ö–õ–Æ–ß–ï–í–ê–Ø –õ–û–ì–ò–ö–ê: 
            // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–∏–Ω–∏–µ –ø–∏–∫—Å–µ–ª–∏ (>2%) - —ç—Ç–æ –ö–£–ë–ò–ö–ò, –Ω–µ —Ç–∞–π–º–µ—Ä!
            // –¢–∞–π–º–µ—Ä = –∑–µ–ª—ë–Ω—ã–µ/–∫—Ä–∞—Å–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –ë–ï–ó —Å–∏–Ω–∏—Ö –∫—É–±–∏–∫–æ–≤
            val hasBlueDice = bluePercentage > 2.0f
            val hasGreenTimer = greenPercentage > 3.0f
            val hasRedTimer = redPercentage > 3.0f
            
            val isTimer = (hasGreenTimer || hasRedTimer) && !hasBlueDice

            if (hasGreenTimer || hasRedTimer || hasBlueDice) {
                Log.d(TAG, "üé® –ê–Ω–∞–ª–∏–∑ —Ü–≤–µ—Ç–æ–≤: " +
                    "–ó–µ–ª—ë–Ω—ã–π=${greenPercentage.toInt()}%, " +
                    "–ö—Ä–∞—Å–Ω—ã–π=${redPercentage.toInt()}%, " +
                    "–°–∏–Ω–∏–π=${bluePercentage.toInt()}%")
                
                if (isTimer) {
                    Log.d(TAG, "üü¢üî¥ –û–±–Ω–∞—Ä—É–∂–µ–Ω –¢–ê–ô–ú–ï–† (–∑–µ–ª—ë–Ω—ã–µ/–∫—Ä–∞—Å–Ω—ã–µ —Ü–∏—Ñ—Ä—ã)")
                } else if (hasBlueDice) {
                    Log.d(TAG, "üé≤ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ö–£–ë–ò–ö–ò (—Å–∏–Ω–∏–π —Ü–≤–µ—Ç –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç)")
                }
            }

            return isTimer

        } catch (e: Exception) {
            Log.w(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–π–º–µ—Ä–∞: ${e.message}")
            return false
        }
    }
    
    /**
     * –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –≤ –æ–±–ª–∞—Å—Ç–∏ –∫—É–±–∏–∫–æ–≤
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–π –¥–µ—Ç–µ–∫—Ü–∏–∏ –∑–µ–ª–µ–Ω—ã—Ö/–∫—Ä–∞—Å–Ω—ã—Ö —Ü–∏—Ñ—Ä
     */
    private fun isTimerInDiceArea(originalBitmap: Bitmap): Boolean {
        try {
            // –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ —Ç–∞–π–º–µ—Ä–∞
            val processedBitmap = createProcessedBitmapForTimerDetection(originalBitmap)
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
            val result = isTimerImage(processedBitmap)
            
            // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
            if (processedBitmap != originalBitmap) {
                processedBitmap.recycle()
            }
            
            return result
            
        } catch (e: Exception) {
            Log.w(TAG, "–û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–π–º–µ—Ä–∞: ${e.message}")
            // –§–æ–ª–±—ç–∫ –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
            return isTimerImage(originalBitmap)
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–π –¥–µ—Ç–µ–∫—Ü–∏–∏ —Ç–∞–π–º–µ—Ä–∞
     */
    private fun createProcessedBitmapForTimerDetection(bitmap: Bitmap): Bitmap {
        try {
            // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            val result = Bitmap.createBitmap(bitmap.width, bitmap.height, Bitmap.Config.ARGB_8888)
            val canvas = Canvas(result)
            val paint = Paint()
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —É—Å–∏–ª–µ–Ω–∏—è –∑–µ–ª–µ–Ω—ã—Ö –∏ –∫—Ä–∞—Å–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤
            val colorMatrix = ColorMatrix().apply {
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –ª—É—á—à–µ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤ —Ç–∞–π–º–µ—Ä–∞
                setSaturation(2.0f)
                
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å
                val contrast = 1.5f
                val brightness = 10f
                val scale = contrast
                val translate = brightness + (128f * (1f - contrast))
                
                postConcat(ColorMatrix(floatArrayOf(
                    scale, 0f, 0f, 0f, translate,
                    0f, scale, 0f, 0f, translate,
                    0f, 0f, scale, 0f, translate,
                    0f, 0f, 0f, 1f, 0f
                )))
            }
            
            paint.colorFilter = ColorMatrixColorFilter(colorMatrix)
            canvas.drawBitmap(bitmap, 0f, 0f, paint)
            
            Log.d(TAG, "üé® –°–æ–∑–¥–∞–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ —Ç–∞–π–º–µ—Ä–∞: ${result.width}x${result.height}")
            return result
            
        } catch (e: Exception) {
            Log.w(TAG, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${e.message}")
            return bitmap // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        }
    }

    /**
     * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ö–µ—à–∞ –±–∏—Ç–º–∞–ø–∞
     */
    private fun calculateBitmapHash(bitmap: Bitmap): String {
        val bytes = bitmap.rowBytes * bitmap.height
        val buffer = ByteArray(bytes)
        bitmap.copyPixelsToBuffer(java.nio.ByteBuffer.wrap(buffer))

        val md = MessageDigest.getInstance("MD5")
        val hashBytes = md.digest(buffer)

        return hashBytes.joinToString("") { "%02x".format(it) }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    private fun loadSettings() {
        try {
            settings = preferencesManager.getSingleModeSettings()
            Log.d(TAG, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ PreferencesManager: $settings")

        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", e)
            settings = SingleModeSettings()
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±–ª–∞—Å—Ç–µ–π
     */
    private fun loadAreas() {
        try {
            areas.clear()

            Log.d(TAG, "=== –ù–ê–ß–ò–ù–ê–ï–ú –ó–ê–ì–†–£–ó–ö–£ –û–ë–õ–ê–°–¢–ï–ô ===")
            SingleModeAreaType.values().forEach { areaType ->
                val rect = preferencesManager.getSingleModeAreaRect(areaType)
                if (rect != null) {
                    areas[areaType] = rect
                    Log.d(TAG, "‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –æ–±–ª–∞—Å—Ç—å ${areaType.displayName}: $rect")
                } else {
                    Log.w(TAG, "‚ùå –û–±–ª–∞—Å—Ç—å ${areaType.displayName} –ù–ï –Ω–∞–π–¥–µ–Ω–∞")
                }
            }

            Log.d(TAG, "=== –†–ï–ó–£–õ–¨–¢–ê–¢ –ó–ê–ì–†–£–ó–ö–ò ===")
            Log.d(TAG, "–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${areas.size} –æ–±–ª–∞—Å—Ç–µ–π –∏–∑ ${SingleModeAreaType.values().size} —á–µ—Ä–µ–∑ PreferencesManager")

            // –ü–æ–¥—Ä–æ–±–Ω—ã–π –ª–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            areas.forEach { (areaType, rect) ->
                Log.d(TAG, "  ${areaType.displayName} -> $rect")
            }

            // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–ª–∞—Å—Ç–∏ –∫—É–±–∏–∫–æ–≤
            val diceArea = areas[SingleModeAreaType.DICE_AREA]
            if (diceArea != null) {
                Log.d(TAG, "üéØ –û–±–ª–∞—Å—Ç—å –∫—É–±–∏–∫–æ–≤ –Ω–∞–π–¥–µ–Ω–∞: $diceArea")
            } else {
                Log.e(TAG, "üö® –ö–†–ò–¢–ò–ß–ù–û: –û–±–ª–∞—Å—Ç—å –∫—É–±–∏–∫–æ–≤ –ù–ï –Ω–∞–π–¥–µ–Ω–∞!")
            }

        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–∞—Å—Ç–µ–π", e)
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    private fun formatDuration(durationMs: Long): String {
        val seconds = durationMs / 1000
        val minutes = seconds / 60
        val hours = minutes / 60

        return when {
            hours > 0 -> "${hours}—á ${minutes % 60}–º ${seconds % 60}—Å"
            minutes > 0 -> "${minutes}–º ${seconds % 60}—Å"
            else -> "${seconds}—Å"
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
     */
    fun getGameState(): SingleModeGameState = gameState

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
     */
    fun getSettings(): SingleModeSettings = settings

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –∏–≥—Ä–∞
     */
    fun isGameActive(): Boolean = isActive

    /**
     * –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    fun destroy() {
        try {
            stopGame()
            Log.d(TAG, "SingleModeController —É–Ω–∏—á—Ç–æ–∂–µ–Ω")
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞", e)
        }
    }
}