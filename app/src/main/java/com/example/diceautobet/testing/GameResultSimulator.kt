package com.example.diceautobet.testing

import android.util.Log
import com.example.diceautobet.models.GameResultType
import kotlinx.coroutines.*
import kotlin.random.Random

/**
 * –°–∏–º—É–ª—è—Ç–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—è–º–∏
 */
class GameResultSimulator {
    
    companion object {
        private const val TAG = "GameResultSimulator"
        
        // –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
        private const val WIN_PROBABILITY = 45.0  // 45% –≤—ã–∏–≥—Ä—ã—à–µ–π
        private const val LOSS_PROBABILITY = 50.0 // 50% –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π
        private const val DRAW_PROBABILITY = 5.0  // 5% –Ω–∏—á—å–∏—Ö
        
        // –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ (–º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã)
        private const val RESULT_INTERVAL = 10000L // 10 —Å–µ–∫—É–Ω–¥
    }
    
    private val simulatorScope = CoroutineScope(Dispatchers.Main + SupervisorJob())
    private var simulationJob: Job? = null
    private var isRunning = false
    
    // –ö–æ–ª–±—ç–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    var onResultGenerated: ((GameResultType) -> Unit)? = null
    
    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏–º—É–ª—è—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
     */
    fun startSimulation() {
        if (isRunning) {
            Log.w(TAG, "–°–∏–º—É–ª—è—Ü–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
            return
        }
        
        Log.d(TAG, "üéØ –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä—ã")
        isRunning = true
        
        simulationJob = simulatorScope.launch {
            while (isRunning) {
                delay(RESULT_INTERVAL)
                
                if (isRunning) {
                    val result = generateRandomResult()
                    Log.d(TAG, "üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç: $result")
                    onResultGenerated?.invoke(result)
                }
            }
        }
        
        Log.d(TAG, "‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞")
    }
    
    /**
     * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–∏–º—É–ª—è—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
     */
    fun stopSimulation() {
        if (!isRunning) {
            Log.w(TAG, "–°–∏–º—É–ª—è—Ü–∏—è –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞")
            return
        }
        
        Log.d(TAG, "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        isRunning = false
        simulationJob?.cancel()
        simulationJob = null
        
        Log.d(TAG, "‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
     */
    private fun generateRandomResult(): GameResultType {
        val random = Random.nextDouble(0.0, 100.0)
        
        return when {
            random < WIN_PROBABILITY -> GameResultType.WIN
            random < WIN_PROBABILITY + LOSS_PROBABILITY -> GameResultType.LOSS
            random < WIN_PROBABILITY + LOSS_PROBABILITY + DRAW_PROBABILITY -> GameResultType.DRAW
            else -> GameResultType.LOSS // –†–µ–∑–µ—Ä–≤–Ω—ã–π —Å–ª—É—á–∞–π
        }
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
     */
    fun startTestSequence(results: List<GameResultType>, intervalMs: Long = 3000L) {
        if (isRunning) {
            Log.w(TAG, "–°–∏–º—É–ª—è—Ü–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
            return
        }
        
        Log.d(TAG, "üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: ${results.joinToString()}")
        isRunning = true
        
        simulationJob = simulatorScope.launch {
            for ((index, result) in results.withIndex()) {
                if (!isRunning) break
                
                delay(intervalMs)
                Log.d(TAG, "üéØ –¢–µ—Å—Ç ${index + 1}/${results.size}: $result")
                onResultGenerated?.invoke(result)
            }
            
            Log.d(TAG, "‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            isRunning = false
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ —Å–∏–º—É–ª—è—Ü–∏—è
     */
    fun isRunning(): Boolean = isRunning
    
    /**
     * –û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã
     */
    fun destroy() {
        Log.d(TAG, "üßπ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞")
        stopSimulation()
        simulatorScope.cancel()
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–º–µ–Ω—ã —Ü–≤–µ—Ç–∞
     */
    fun createColorChangeTestSequence(): List<GameResultType> {
        return listOf(
            GameResultType.LOSS,  // 1-–π –ø—Ä–æ–∏–≥—Ä—ã—à –Ω–∞ –∫—Ä–∞—Å–Ω–æ–º
            GameResultType.LOSS,  // 2-–π –ø—Ä–æ–∏–≥—Ä—ã—à –Ω–∞ –∫—Ä–∞—Å–Ω–æ–º -> —Å–º–µ–Ω–∞ –Ω–∞ –æ—Ä–∞–Ω–∂–µ–≤—ã–π
            GameResultType.WIN,   // –≤—ã–∏–≥—Ä—ã—à –Ω–∞ –æ—Ä–∞–Ω–∂–µ–≤–æ–º
            GameResultType.LOSS,  // 1-–π –ø—Ä–æ–∏–≥—Ä—ã—à –Ω–∞ –æ—Ä–∞–Ω–∂–µ–≤–æ–º
            GameResultType.LOSS,  // 2-–π –ø—Ä–æ–∏–≥—Ä—ã—à –Ω–∞ –æ—Ä–∞–Ω–∂–µ–≤–æ–º -> —Å–º–µ–Ω–∞ –Ω–∞ –∫—Ä–∞—Å–Ω—ã–π
            GameResultType.WIN,   // –≤—ã–∏–≥—Ä—ã—à –Ω–∞ –∫—Ä–∞—Å–Ω–æ–º
            GameResultType.LOSS   // –ø—Ä–æ–∏–≥—Ä—ã—à –Ω–∞ –∫—Ä–∞—Å–Ω–æ–º
        )
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–¥–≤–æ–µ–Ω–∏—è —Å—Ç–∞–≤–æ–∫
     */
    fun createBetDoublingTestSequence(): List<GameResultType> {
        return listOf(
            GameResultType.LOSS,  // —Å—Ç–∞–≤–∫–∞ 10 -> 20
            GameResultType.LOSS,  // —Å—Ç–∞–≤–∫–∞ 20 -> 40
            GameResultType.LOSS,  // —Å—Ç–∞–≤–∫–∞ 40 -> 80
            GameResultType.WIN,   // —Å—Ç–∞–≤–∫–∞ 80 -> –≤—ã–∏–≥—Ä—ã—à, —Å–±—Ä–æ—Å –Ω–∞ 10
            GameResultType.LOSS,  // —Å—Ç–∞–≤–∫–∞ 10 -> 20
            GameResultType.WIN    // —Å—Ç–∞–≤–∫–∞ 20 -> –≤—ã–∏–≥—Ä—ã—à, —Å–±—Ä–æ—Å –Ω–∞ 10
        )
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏–º—É–ª—è—Ü–∏–∏
     */
    fun getSimulationInfo(): String {
        return """
            üéØ –°–∏–º—É–ª—è—Ç–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä—ã:
            
            üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏:
            ‚Ä¢ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–∏–≥—Ä—ã—à–∞: ${WIN_PROBABILITY}%
            ‚Ä¢ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–æ–∏–≥—Ä—ã—à–∞: ${LOSS_PROBABILITY}%
            ‚Ä¢ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–∏—á—å–∏: ${DRAW_PROBABILITY}%
            ‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${RESULT_INTERVAL / 1000} —Å–µ–∫
            
            üìà –°—Ç–∞—Ç—É—Å: ${if (isRunning) "–ó–∞–ø—É—â–µ–Ω" else "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}
        """.trimIndent()
    }
}
