package com.example.diceautobet.demo

import android.util.Log
import com.example.diceautobet.models.*

/**
 * –î–ï–ú–û-–ö–õ–ê–°–° –î–õ–Ø –ü–û–ö–ê–ó–ê –ù–û–í–û–ô –ê–õ–¨–¢–ï–†–ù–ò–†–£–Æ–©–ï–ô –õ–û–ì–ò–ö–ò
 * 
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—à–∞–≥–æ–≤–æ –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å—Ç–∞–≤–æ–∫
 */
class AlternatingStrategyDemo {
    
    companion object {
        private const val TAG = "AlternatingStrategyDemo"
    }
    
    /**
     * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–ª—å—Ç–µ—Ä–Ω–∏—Ä—É—é—â–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
     */
    fun demonstrateStrategy() {
        Log.d(TAG, "\n" + "=".repeat(60))
        Log.d(TAG, "üé≤ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ù–û–í–û–ô –ê–õ–¨–¢–ï–†–ù–ò–†–£–Æ–©–ï–ô –°–¢–†–ê–¢–ï–ì–ò–ò –°–¢–ê–í–û–ö")
        Log.d(TAG, "=".repeat(60))
        
        // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        var gameState = GameState(
            baseBet = 10,
            balance = 1000,
            betChoice = BetChoice.RED,
            firstResultIgnored = false,
            currentTurnNumber = 0,
            lastActiveResult = GameResultType.UNKNOWN
        )
        
        Log.d(TAG, "üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${gameState.balance}")
        Log.d(TAG, "üí≥ –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞: ${gameState.baseBet}")
        Log.d(TAG, "üéØ –¶–≤–µ—Ç —Å—Ç–∞–≤–∫–∏: ${gameState.betChoice}")
        Log.d(TAG, "")
        
        // –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (W = –≤—ã–∏–≥—Ä—ã—à, L = –ø—Ä–æ–∏–≥—Ä—ã—à, D = –Ω–∏—á—å—è)
        val simulatedResults = listOf(
            GameResultType.LOSS,    // –ü–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            GameResultType.WIN,     // –•–æ–¥ 1 (–∞–∫—Ç–∏–≤–Ω—ã–π)
            GameResultType.LOSS,    // –•–æ–¥ 2 (–ø–∞—Å—Å–∏–≤–Ω—ã–π - –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ)
            GameResultType.LOSS,    // –•–æ–¥ 3 (–∞–∫—Ç–∏–≤–Ω—ã–π)
            GameResultType.WIN,     // –•–æ–¥ 4 (–ø–∞—Å—Å–∏–≤–Ω—ã–π - –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ)
            GameResultType.WIN,     // –•–æ–¥ 5 (–∞–∫—Ç–∏–≤–Ω—ã–π)
            GameResultType.DRAW,    // –•–æ–¥ 6 (–ø–∞—Å—Å–∏–≤–Ω—ã–π - –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ)
            GameResultType.LOSS     // –•–æ–¥ 7 (–∞–∫—Ç–∏–≤–Ω—ã–π)
        )
        
        var resultIndex = 0
        
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if (gameState.shouldIgnoreFirstResult()) {
            val firstResult = simulatedResults[resultIndex++]
            Log.d(TAG, "üî• –ò–ì–ù–û–†–ò–†–£–ï–ú –ü–ï–†–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: $firstResult")
            gameState = gameState.markFirstResultIgnored()
            Log.d(TAG, "   –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –∏–≥—Ä—É")
            Log.d(TAG, "")
        }
        
        // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        while (resultIndex < simulatedResults.size && gameState.balance > 0) {
            val currentResult = simulatedResults[resultIndex++]
            val turnType = gameState.getCurrentTurnType()
            val turnNumber = gameState.currentTurnNumber + 1
            
            Log.d(TAG, "üéØ –•–û–î $turnNumber (${turnType})")
            Log.d(TAG, "   –°—Ç–∞—Ç—É—Å: ${gameState.getStatusDescription()}")
            
            when (turnType) {
                TurnType.ACTIVE -> {
                    // –ê–∫—Ç–∏–≤–Ω—ã–π —Ö–æ–¥ - –¥–µ–ª–∞–µ–º —Å—Ç–∞–≤–∫—É
                    val betAmount = gameState.calculateBetAmount()
                    Log.d(TAG, "   üí∞ –î–µ–ª–∞–µ–º —Å—Ç–∞–≤–∫—É: $betAmount")
                    Log.d(TAG, "   üé≤ –†–µ–∑—É–ª—å—Ç–∞—Ç: $currentResult")
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
                    gameState = gameState.updateBalanceAfterActiveTurn(betAmount, currentResult)
                    Log.d(TAG, "   üí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${gameState.balance}")
                    
                    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ö–æ–¥—É
                    gameState = gameState.advanceToNextTurn(currentResult)
                    
                    val resultEmoji = when (currentResult) {
                        GameResultType.WIN -> "üéâ"
                        GameResultType.LOSS -> "üí∏"
                        GameResultType.DRAW -> "ü§ù"
                        else -> "‚ùì"
                    }
                    Log.d(TAG, "   $resultEmoji –ò—Ç–æ–≥ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ö–æ–¥–∞")
                }
                
                TurnType.PASSIVE -> {
                    // –ü–∞—Å—Å–∏–≤–Ω—ã–π —Ö–æ–¥ - —Ç–æ–ª—å–∫–æ –Ω–∞–±–ª—é–¥–∞–µ–º
                    Log.d(TAG, "   üëÅÔ∏è –¢–æ–ª—å–∫–æ –Ω–∞–±–ª—é–¥–∞–µ–º (–Ω–µ —Å—Ç–∞–≤–∏–º)")
                    Log.d(TAG, "   üé≤ –†–µ–∑—É–ª—å—Ç–∞—Ç: $currentResult (–¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)")
                    
                    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ö–æ–¥—É –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
                    gameState = gameState.advanceToNextTurn(currentResult)
                    Log.d(TAG, "   ‚è≠Ô∏è –ü–∞—Å—Å–∏–≤–Ω—ã–π —Ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω")
                }
            }
            
            Log.d(TAG, "")
        }
        
        // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        Log.d(TAG, "üèÅ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò:")
        Log.d(TAG, "   –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${gameState.balance}")
        Log.d(TAG, "   –ü—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫: ${gameState.totalProfit}")
        Log.d(TAG, "   –í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫: ${gameState.totalBetsPlaced}")
        Log.d(TAG, "   –í—Å–µ–≥–æ —Ö–æ–¥–æ–≤: ${gameState.currentTurnNumber}")
        Log.d(TAG, "=".repeat(60))
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ö–µ–º—É —Ä–∞–±–æ—Ç—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
     */
    fun showStrategyScheme() {
        Log.d(TAG, "\n" + "üìã –°–•–ï–ú–ê –†–ê–ë–û–¢–´ –ê–õ–¨–¢–ï–†–ù–ò–†–£–Æ–©–ï–ô –°–¢–†–ê–¢–ï–ì–ò–ò:")
        Log.d(TAG, "")
        Log.d(TAG, "üî• –°–¢–ê–†–¢: –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
        Log.d(TAG, "")
        Log.d(TAG, "üéØ –•–û–î 1 (–ê–ö–¢–ò–í–ù–´–ô): –°—Ç–∞–≤–∏–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞–≤–∫—É ‚Üí —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–æ–º–∏–Ω–∞–µ–º")
        Log.d(TAG, "üëÅÔ∏è –•–û–î 2 (–ü–ê–°–°–ò–í–ù–´–ô): –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, —Ç–æ–ª—å–∫–æ –Ω–∞–±–ª—é–¥–∞–µ–º")
        Log.d(TAG, "üéØ –•–û–î 3 (–ê–ö–¢–ò–í–ù–´–ô): –°–º–æ—Ç—Ä–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ö–æ–¥–∞ 1:")
        Log.d(TAG, "   ‚úÖ –ï—Å–ª–∏ –≤—ã–∏–≥—Ä–∞–ª–∏ ‚Üí —Å—Ç–∞–≤–∏–º –±–∞–∑–æ–≤—É—é")
        Log.d(TAG, "   ‚ùå –ï—Å–ª–∏ –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ ‚Üí —Å—Ç–∞–≤–∏–º —É–¥–≤–æ–µ–Ω–Ω—É—é")
        Log.d(TAG, "üëÅÔ∏è –•–û–î 4 (–ü–ê–°–°–ò–í–ù–´–ô): –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, —Ç–æ–ª—å–∫–æ –Ω–∞–±–ª—é–¥–∞–µ–º")
        Log.d(TAG, "üéØ –•–û–î 5 (–ê–ö–¢–ò–í–ù–´–ô): –°–º–æ—Ç—Ä–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ö–æ–¥–∞ 3:")
        Log.d(TAG, "   ‚úÖ –ï—Å–ª–∏ –≤—ã–∏–≥—Ä–∞–ª–∏ ‚Üí —Å—Ç–∞–≤–∏–º –±–∞–∑–æ–≤—É—é")
        Log.d(TAG, "   ‚ùå –ï—Å–ª–∏ –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ ‚Üí —Å—Ç–∞–≤–∏–º —É–¥–≤–æ–µ–Ω–Ω—É—é")
        Log.d(TAG, "...")
        Log.d(TAG, "–ò —Ç–∞–∫ –¥–∞–ª–µ–µ...")
        Log.d(TAG, "")
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
     */
    fun showAdvantages() {
        Log.d(TAG, "\n" + "‚≠ê –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê –ê–õ–¨–¢–ï–†–ù–ò–†–£–Æ–©–ï–ô –°–¢–†–ê–¢–ï–ì–ò–ò:")
        Log.d(TAG, "")
        Log.d(TAG, "1. üéØ –°–Ω–∏–∂–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã —Å—Ç–∞–≤–æ–∫ –≤ 2 —Ä–∞–∑–∞")
        Log.d(TAG, "2. üí∞ –ú–µ–Ω—å—à–µ —Ä–∏—Å–∫–∞ –ø–æ—Ç–µ—Ä—å –ø—Ä–∏ –¥–ª–∏–Ω–Ω—ã—Ö —Å–µ—Ä–∏—è—Ö")
        Log.d(TAG, "3. üß† –ë–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –∞–Ω–∞–ª–∏–∑ –∏ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π")
        Log.d(TAG, "4. üìä –ë–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –∏–≥—Ä–∞ –±–µ–∑ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π")
        Log.d(TAG, "5. ‚è±Ô∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        Log.d(TAG, "6. üîÑ –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞: –∞–∫—Ç–∏–≤–Ω—ã–π ‚Üí –ø–∞—Å—Å–∏–≤–Ω—ã–π ‚Üí –∞–∫—Ç–∏–≤–Ω—ã–π...")
        Log.d(TAG, "")
    }
}
