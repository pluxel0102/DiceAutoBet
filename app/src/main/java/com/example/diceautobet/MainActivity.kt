package com.example.diceautobet

import android.Manifest
import android.app.Activity
import android.content.Context
import android.content.Intent
import android.content.pm.PackageManager
import android.content.ServiceConnection
import android.content.ComponentName
import android.os.IBinder
import android.graphics.Color
import android.graphics.Rect
import android.media.projection.MediaProjectionManager
import android.net.Uri
import android.os.Build
import android.os.Bundle
import android.provider.Settings
import android.view.View
import android.widget.*
import androidx.activity.result.contract.ActivityResultContracts
import androidx.appcompat.app.AppCompatActivity
import androidx.core.content.ContextCompat
import androidx.core.content.res.ResourcesCompat
import com.example.diceautobet.databinding.ActivityMainBinding
import com.example.diceautobet.models.*
import com.example.diceautobet.demo.AlternatingStrategyDemo
import com.google.android.material.dialog.MaterialAlertDialogBuilder
import com.google.android.material.textfield.TextInputEditText
import com.google.android.material.button.MaterialButton
import com.google.android.material.checkbox.MaterialCheckBox
import android.widget.AutoCompleteTextView
import android.widget.ArrayAdapter
import com.example.diceautobet.services.AreaConfigurationService
import com.example.diceautobet.services.OverlayService
import com.example.diceautobet.managers.MediaProjectionPermissionManager
import com.example.diceautobet.services.DualModeService
import com.example.diceautobet.services.AutoClickService
import com.example.diceautobet.utils.PreferencesManager
import com.example.diceautobet.utils.CoordinateUtils
import com.example.diceautobet.utils.SplitScreenUtils
import com.example.diceautobet.managers.DualWindowAreaManager
import com.example.diceautobet.validation.GameValidator
import com.example.diceautobet.logging.GameLogger
import com.example.diceautobet.error.ErrorHandler
import com.example.diceautobet.utils.FileLogger
import com.example.diceautobet.utils.UpdateManager
import com.example.diceautobet.ui.UpdateDialog
import org.opencv.android.OpenCVLoader
import android.util.Log
import androidx.lifecycle.lifecycleScope
import kotlinx.coroutines.launch
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import com.example.diceautobet.utils.ProxyManager

class MainActivity : AppCompatActivity() {

    companion object {
        private const val REQUEST_MEDIA_PROJECTION = 1001
        const val EXTRA_REQUEST_PROJECTION = "request_projection"
    }

    private lateinit var binding: ActivityMainBinding
    private lateinit var prefsManager: PreferencesManager
    private lateinit var projectionManager: MediaProjectionManager
    private lateinit var permissionManager: MediaProjectionPermissionManager
    private lateinit var gameLogger: GameLogger
    private lateinit var updateManager: UpdateManager
    private var isServiceRunning = false

    // –î–≤–æ–π–Ω–æ–π —Ä–µ–∂–∏–º
    private var dualModeService: DualModeService? = null
    private var dualWindowAreaManager: DualWindowAreaManager? = null
    private var isDualModeServiceBound = false

    private var isRequestFlow = false
    private var projectionLaunched = false
    private var pendingAreaConfig = false

    private val notificationPermissionLauncher = registerForActivityResult(
        ActivityResultContracts.RequestPermission()
    ) { granted -> if (granted) updatePermissionButtons() }
    
    private val storagePermissionLauncher = registerForActivityResult(
        ActivityResultContracts.RequestPermission()
    ) { granted -> 
        if (granted) {
            Log.d("MainActivity", "‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—É—á–µ–Ω–æ")
            Toast.makeText(this, "‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ", Toast.LENGTH_SHORT).show()
        } else {
            Log.w("MainActivity", "‚ö†Ô∏è –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–≤—è–∑—á–∏–≤—ã–π Toast - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º —Ä–µ—à–∏–ª –æ—Ç–∫–∞–∑–∞—Ç—å
        }
    }

    // ServiceConnection –¥–ª—è DualModeService
    private val dualModeServiceConnection = object : ServiceConnection {
        override fun onServiceConnected(name: ComponentName?, service: IBinder?) {
            Log.d("MainActivity", "DualModeService –ø–æ–¥–∫–ª—é—á–µ–Ω")
            val binder = service as DualModeService.LocalBinder
            dualModeService = binder.getService()
            isDualModeServiceBound = true
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ (–≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã, —Ç–∞–∫ –∫–∞–∫ –º–µ—Ç–æ–¥—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å)
            // dualModeService?.setOnGameStateChangedListener { gameState ->
            //     runOnUiThread { updateDualModeUI(gameState) }
            // }
            
            // dualModeService?.setOnWindowSwitchedListener { windowType ->
            //     runOnUiThread { onWindowSwitched(windowType) }
            // }
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –æ–±–ª–∞—Å—Ç–µ–π
            dualWindowAreaManager = DualWindowAreaManager(this@MainActivity)
        }

        override fun onServiceDisconnected(name: ComponentName?) {
            Log.d("MainActivity", "DualModeService –æ—Ç–∫–ª—é—á–µ–Ω")
            dualModeService = null
            isDualModeServiceBound = false
            dualWindowAreaManager = null
        }
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        Log.d("MainActivity", "onCreate: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")

        // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è Android 15
        if (Build.VERSION.SDK_INT >= 35) {
            Log.w("MainActivity", "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω Android 15 (API ${Build.VERSION.SDK_INT})")
            Log.w("MainActivity", "‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ foreground service –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è MediaProjection!")
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º FileLogger –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤—Å–µ—Ö –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª
        FileLogger.initialize(this)
        FileLogger.i("MainActivity", "üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ DiceAutoBet –∑–∞–ø—É—â–µ–Ω–æ")
        
        if (!OpenCVLoader.initDebug()) {
            Log.e("MainActivity", "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OpenCV")
            FileLogger.e("MainActivity", "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OpenCV")
            Toast.makeText(this, "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OpenCV", Toast.LENGTH_LONG).show()
            finish(); return
        }
        Log.d("MainActivity", "OpenCV –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        FileLogger.d("MainActivity", "OpenCV –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏
        ProxyManager.initFromPreferences(this)
        Log.d("MainActivity", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        FileLogger.d("MainActivity", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

        binding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)

        prefsManager = PreferencesManager(this)
        projectionManager = getSystemService(Context.MEDIA_PROJECTION_SERVICE) as MediaProjectionManager
        permissionManager = MediaProjectionPermissionManager.getInstance(this)
        gameLogger = GameLogger(this)
        updateManager = UpdateManager(this)

        setupUI()
        updatePermissionButtons()
        loadSettings()
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é
        updateVersionDisplay()
        
        // ÔøΩ –ó–ê–ü–†–û–° –†–ê–ó–†–ï–®–ï–ù–ò–Ø –ù–ê –•–†–ê–ù–ò–õ–ò–©–ï (–¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π)
        checkStoragePermission()
        
        // ÔøΩüîÑ –ü–†–û–í–ï–†–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–ô –ü–†–ò –ó–ê–ü–£–°–ö–ï
        checkForUpdatesOnStartup()
        
        // ÔøΩ –ü–†–û–ì–†–ï–í –°–û–ï–î–ò–ù–ï–ù–ò–Ø –î–õ–Ø –£–°–ö–û–†–ï–ù–ò–Ø –ò–ì–†–´
        lifecycleScope.launch {
            try {
                Log.d("MainActivity", "üî• –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–µ–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ —Ñ–æ–Ω–µ...")
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ–≤–∞
                runOnUiThread { showWarmupStatus() }
                
                val result = ProxyManager.warmupConnection()
                when (result) {
                    is ProxyManager.WarmupResult.Success -> {
                        Log.d("MainActivity", "‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Ç–æ –∑–∞ ${result.duration}–º—Å —á–µ—Ä–µ–∑ ${result.connectionType}")
                        Log.d("MainActivity", "‚úÖ –£—Å–ø–µ—à–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã: ${result.successfulRequests.joinToString(", ")}")
                        if (result.errors.isNotEmpty()) {
                            Log.w("MainActivity", "‚ö†Ô∏è –û—à–∏–±–∫–∏ –ø—Ä–∏ –ø—Ä–æ–≥—Ä–µ–≤–µ: ${result.errors.joinToString(", ")}")
                        }
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø—Ä–æ–≥—Ä–µ–≤
                        runOnUiThread { 
                            showWarmupSuccess()
                            // –ß–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–±—ã—á–Ω–æ–º—É —Å—Ç–∞—Ç—É—Å—É
                            android.os.Handler(android.os.Looper.getMainLooper()).postDelayed({
                                updateProxyStatus()
                            }, 3000)
                        }
                    }
                    is ProxyManager.WarmupResult.Error -> {
                        Log.e("MainActivity", "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞ ${result.duration}–º—Å: ${result.error}")
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–æ–≥—Ä–µ–≤–∞
                        runOnUiThread { 
                            showWarmupError()
                            // –ß–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–±—ã—á–Ω–æ–º—É —Å—Ç–∞—Ç—É—Å—É
                            android.os.Handler(android.os.Looper.getMainLooper()).postDelayed({
                                updateProxyStatus()
                            }, 3000)
                        }
                    }
                }
            } catch (e: Exception) {
                Log.e("MainActivity", "‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≥—Ä–µ–≤–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${e.message}", e)
                runOnUiThread { 
                    showWarmupError()
                    android.os.Handler(android.os.Looper.getMainLooper()).postDelayed({
                        updateProxyStatus()
                    }, 3000)
                }
            }
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DualModeService
        initializeDualModeService()
        
        intent?.let { handleRequestIntent(it) }

        gameLogger.logSystemEvent("MainActivity —Å–æ–∑–¥–∞–Ω")

        Log.d("MainActivity", "onCreate –∑–∞–≤–µ—Ä—à–µ–Ω")
    }

    override fun onNewIntent(intent: Intent) {
        super.onNewIntent(intent)
        Log.d("MainActivity", "onNewIntent: intent=$intent")
        setIntent(intent)
        handleRequestIntent(intent)
    }

    override fun onResume() {
        super.onResume()
        Log.d("MainActivity", "onResume: –æ–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π")
        gameLogger.logSystemEvent("MainActivity –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω")
        updatePermissionButtons()
    }

    private fun handleRequestIntent(intent: Intent) {
        Log.d("MainActivity", "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å: intent=$intent")
        if (!projectionLaunched && intent.getBooleanExtra(EXTRA_REQUEST_PROJECTION, false)) {
            Log.d("MainActivity", "–ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–ª–æ–≥ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è")
            intent.removeExtra(EXTRA_REQUEST_PROJECTION)
            isRequestFlow = true
            projectionLaunched = true
            startProjectionDialog()
        } else {
            Log.d("MainActivity", "–ó–∞–ø—Ä–æ—Å –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: projectionLaunched=$projectionLaunched, hasExtra=${intent.getBooleanExtra(EXTRA_REQUEST_PROJECTION, false)}")
        }
    }

    private fun startProjectionDialog() {
        Log.d("MainActivity", "–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∑–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞ —á–µ—Ä–µ–∑ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä")
        val captureIntent = permissionManager.createScreenCaptureIntent()
        Log.d("MainActivity", "Intent —Å–æ–∑–¥–∞–Ω: $captureIntent")
        startActivityForResult(captureIntent, REQUEST_MEDIA_PROJECTION)
        Log.d("MainActivity", "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω–∞")
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ —Ö—Ä–∞–Ω–∏–ª–∏—â—É
     */
    private fun checkStoragePermission() {
        // –î–ª—è Android 13+ (API 33+) –∏—Å–ø–æ–ª—å–∑—É–µ–º MANAGE_EXTERNAL_STORAGE –∏–ª–∏ –æ–±—Ö–æ–¥–∏–º—Å—è –±–µ–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
        // –î–ª—è Android 10-12 (API 29-32) –∏—Å–ø–æ–ª—å–∑—É–µ–º WRITE_EXTERNAL_STORAGE
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
            // Android 11+ - DownloadManager —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
            Log.d("MainActivity", "‚úÖ Android 11+ - —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è –¥–ª—è DownloadManager")
            return
        }
        
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            val permission = android.Manifest.permission.WRITE_EXTERNAL_STORAGE
            val granted = ContextCompat.checkSelfPermission(this, permission) == PackageManager.PERMISSION_GRANTED
            
            if (!granted) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º SharedPreferences - –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
                val prefs = getSharedPreferences("app_permissions", MODE_PRIVATE)
                val hasAsked = prefs.getBoolean("storage_permission_asked", false)
                
                if (hasAsked) {
                    // –£–∂–µ —Å–ø—Ä–∞—à–∏–≤–∞–ª–∏ - –Ω–µ –±–µ—Å–ø–æ–∫–æ–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    Log.d("MainActivity", "‚è≠Ô∏è –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —É–∂–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–æ—Å—å —Ä–∞–Ω–µ–µ")
                    return
                }
                
                // –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–ª–∞–≥ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º
                prefs.edit().putBoolean("storage_permission_asked", true).apply()
                Log.d("MainActivity", "üìÅ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (–ø–µ—Ä–≤—ã–π —Ä–∞–∑)")
                storagePermissionLauncher.launch(permission)
            } else {
                Log.d("MainActivity", "‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —É–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ")
            }
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    private fun checkForUpdatesOnStartup() {
        lifecycleScope.launch {
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
                if (!updateManager.shouldCheckForUpdates()) {
                    Log.d("MainActivity", "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–Ω–µ–¥–∞–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–ª–∏)")
                    return@launch
                }

                Log.d("MainActivity", "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
                FileLogger.i("MainActivity", "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ")

                val updateInfo = updateManager.checkForUpdates()

                if (updateInfo != null && updateManager.isUpdateAvailable(updateInfo)) {
                    if (!updateManager.isVersionSkipped(updateInfo)) {
                        withContext(Dispatchers.Main) {
                            showUpdateDialog(updateInfo)
                        }
                    } else {
                        Log.d("MainActivity", "‚è≠Ô∏è –í–µ—Ä—Å–∏—è ${updateInfo.latestVersion} –ø—Ä–æ–ø—É—â–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                    }
                } else {
                    Log.d("MainActivity", "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è")
                    FileLogger.i("MainActivity", "‚úÖ –í–µ—Ä—Å–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–∞: ${updateManager.getCurrentVersionName()}")
                }
            } catch (e: Exception) {
                Log.e("MainActivity", "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π", e)
                FileLogger.e("MainActivity", "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: ${e.message}")
            }
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    private fun showUpdateDialog(updateInfo: com.example.diceautobet.utils.UpdateInfo) {
        UpdateDialog.show(
            context = this,
            updateInfo = updateInfo,
            currentVersion = updateManager.getCurrentVersionName(),
            onUpdate = {
                Log.d("MainActivity", "üì• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –∑–∞–≥—Ä—É–∑–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                FileLogger.i("MainActivity", "üì• –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è v${updateInfo.latestVersion}")
                updateManager.downloadAndInstall(updateInfo)
            },
            onSkip = {
                Log.d("MainActivity", "‚è≠Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–ø—É—Å—Ç–∏–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
                FileLogger.i("MainActivity", "‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ –≤–µ—Ä—Å–∏—è ${updateInfo.latestVersion}")
                updateManager.skipVersion(updateInfo)
            }
        )
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏
     */
    private fun updateVersionDisplay() {
        try {
            val currentVersion = updateManager.getCurrentVersionName()
            binding.tvCurrentVersion?.text = "–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: $currentVersion"
            Log.d("MainActivity", "–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: $currentVersion")
        } catch (e: Exception) {
            Log.e("MainActivity", "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏", e)
        }
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –∏–∑ –º–µ–Ω—é)
     */
    private fun checkForUpdatesManually() {
        lifecycleScope.launch {
            try {
                withContext(Dispatchers.Main) {
                    Toast.makeText(this@MainActivity, "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...", Toast.LENGTH_SHORT).show()
                }

                val updateInfo = updateManager.checkForUpdates()

                withContext(Dispatchers.Main) {
                    if (updateInfo != null && updateManager.isUpdateAvailable(updateInfo)) {
                        showUpdateDialog(updateInfo)
                    } else {
                        val currentVersion = updateManager.getCurrentVersionName()
                        Toast.makeText(
                            this@MainActivity,
                            "‚úÖ –£ –≤–∞—Å –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è ($currentVersion)",
                            Toast.LENGTH_SHORT
                        ).show()
                    }
                }
            } catch (e: Exception) {
                Log.e("MainActivity", "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π", e)
                withContext(Dispatchers.Main) {
                    UpdateDialog.showError(this@MainActivity, e.message ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                }
            }
        }
    }

    private fun setupUI() = with(binding) {
        Log.d("MainActivity", "–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º UI")

        btnOverlayPermission.setOnClickListener {
            Log.d("MainActivity", "–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞–ª–æ–∂–µ–Ω–∏—è")
            if (Settings.canDrawOverlays(this@MainActivity)) {
                Toast.makeText(this@MainActivity, "–†–∞–∑—Ä–µ—à–µ–Ω–æ", Toast.LENGTH_SHORT).show()
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∑–µ–ª—ë–Ω—ã–π
                updatePermissionButtons()
            } else {
                startActivity(Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION)
                    .apply { data = Uri.parse("package:$packageName") })
                Log.d("MainActivity", "–û—Ç–∫—Ä—ã—Ç—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞–ª–æ–∂–µ–Ω–∏—è")
            }
        }
        btnAccessibilityPermission.setOnClickListener {
            Log.d("MainActivity", "–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏")
            val enabledAccessibility = Settings.Secure.getString(
                contentResolver, Settings.Secure.ENABLED_ACCESSIBILITY_SERVICES
            ).orEmpty().contains("$packageName/${AutoClickService::class.java.canonicalName}")
            if (enabledAccessibility) {
                Toast.makeText(this@MainActivity, "–†–∞–∑—Ä–µ—à–µ–Ω–æ", Toast.LENGTH_SHORT).show()
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∑–µ–ª—ë–Ω—ã–π
                updatePermissionButtons()
            } else {
                startActivity(Intent(Settings.ACTION_ACCESSIBILITY_SETTINGS))
                Toast.makeText(this@MainActivity,
                    "–ù–∞–π–¥–∏—Ç–µ 'Dice Auto Bet' –∏ –≤–∫–ª—é—á–∏—Ç–µ —Å–µ—Ä–≤–∏—Å", Toast.LENGTH_LONG).show()
                Log.d("MainActivity", "–û—Ç–∫—Ä—ã—Ç—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏")
            }
        }
        btnNotificationPermission.setOnClickListener {
            Log.d("MainActivity", "–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
                val granted = ContextCompat.checkSelfPermission(
                    this@MainActivity, Manifest.permission.POST_NOTIFICATIONS
                ) == PackageManager.PERMISSION_GRANTED
                if (granted) {
                    Toast.makeText(this@MainActivity, "–†–∞–∑—Ä–µ—à–µ–Ω–æ", Toast.LENGTH_SHORT).show()
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∑–µ–ª—ë–Ω—ã–π
                    updatePermissionButtons()
                } else {
                    Log.d("MainActivity", "–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                    notificationPermissionLauncher.launch(Manifest.permission.POST_NOTIFICATIONS)
                }
            } else {
                Log.d("MainActivity", "–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏ Android")
                Toast.makeText(this@MainActivity, "–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è", Toast.LENGTH_SHORT).show()
            }
        }
        
        btnConfigureAreas.setOnClickListener {
            Log.d("MainActivity", "–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–ª–∞—Å—Ç–µ–π")

            if (!Settings.canDrawOverlays(this@MainActivity)) {
                Log.d("MainActivity", "–ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –Ω–∞–ª–æ–∂–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ")
                Toast.makeText(this@MainActivity,
                    "–°–Ω–∞—á–∞–ª–∞ —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–≤–µ—Ä—Ö –¥—Ä—É–≥–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π", Toast.LENGTH_SHORT).show()
                return@setOnClickListener
            }

            try {
                // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –æ–±–ª–∞—Å—Ç–µ–π
                Log.d("MainActivity", "–ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –æ–±–ª–∞—Å—Ç–µ–π")
                AreaConfigurationService.start(this@MainActivity)

                // –î–∞–µ–º —Å–µ—Ä–≤–∏—Å—É –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø–µ—Ä–µ–¥ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ–º
                binding.root.postDelayed({
                    moveTaskToBack(true)
                }, 500)
            } catch (e: Exception) {
                Log.e("MainActivity", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–ª–∞—Å—Ç–µ–π", e)
                Toast.makeText(this@MainActivity,
                    "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: ${e.message}", Toast.LENGTH_LONG).show()
            }
        }

        // === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–í–û–ô–ù–û–ì–û –†–ï–ñ–ò–ú–ê ===
        
        // –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –¥–≤–æ–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        binding.btnStartDualMode?.setOnClickListener {
            Log.d("MainActivity", "–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –¥–≤–æ–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞")
            startDualModeActivity()
        }
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –¥–≤–æ–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        binding.switchDualMode?.setOnCheckedChangeListener { _, isChecked ->
            Log.d("MainActivity", "–ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –¥–≤–æ–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞: $isChecked")
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            val currentSettings = prefsManager.getDualModeSettings()
            val newSettings = currentSettings.copy(enabled = isChecked)
            prefsManager.saveDualModeSettings(newSettings)
            
            gameLogger.logUserAction(
                "–î–≤–æ–π–Ω–æ–π —Ä–µ–∂–∏–º ${if (isChecked) "–≤–∫–ª—é—á–µ–Ω" else "–≤—ã–∫–ª—é—á–µ–Ω"}", 
                mapOf("enabled" to isChecked)
            )
            
            if (isChecked) {
                Toast.makeText(this@MainActivity, "–î–≤–æ–π–Ω–æ–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–∫–Ω–∞.", Toast.LENGTH_LONG).show()
            }
        }
        
        // –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–≤–æ–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        binding.btnConfigureDualMode?.setOnClickListener {
            Log.d("MainActivity", "–û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–≤–æ–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞")
            openDualModeConfiguration()
        }
        
        // === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–î–ò–ù–û–ß–ù–û–ì–û –†–ï–ñ–ò–ú–ê ===
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        binding.switchSingleMode?.setOnCheckedChangeListener { _, isChecked ->
            Log.d("MainActivity", "–ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞: $isChecked")
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ SharedPreferences
            val prefs = getSharedPreferences("single_mode_prefs", MODE_PRIVATE)
            prefs.edit().putBoolean("single_mode_enabled", isChecked).apply()
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∂–∏–º –∏–≥—Ä—ã –≤ PreferencesManager –¥–ª—è OverlayService
            val preferencesManager = PreferencesManager(this@MainActivity)
            val gameMode = if (isChecked) "single" else "dual"
            preferencesManager.saveGameMode(gameMode)
            Log.d("MainActivity", "–°–æ—Ö—Ä–∞–Ω–µ–Ω —Ä–µ–∂–∏–º –∏–≥—Ä—ã –≤ PreferencesManager: $gameMode")
            
            gameLogger.logUserAction(
                "–û–¥–∏–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º ${if (isChecked) "–≤–∫–ª—é—á–µ–Ω" else "–≤—ã–∫–ª—é—á–µ–Ω"}", 
                mapOf("enabled" to isChecked)
            )
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–Ω–æ–ø–æ–∫
            updateSingleModeButtonsState()
            
            if (isChecked) {
                Toast.makeText(this@MainActivity, "–û–¥–∏–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –æ–±–ª–∞—Å—Ç–∏ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–≥—Ä—ã.", Toast.LENGTH_LONG).show()
            }
        }
        
        // –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        binding.btnConfigureSingleMode?.setOnClickListener {
            Log.d("MainActivity", "–û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞")
            openSingleModeSettings()
        }
        
        // –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–ª–∞—Å—Ç–µ–π –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        binding.btnConfigureSingleAreas?.setOnClickListener {
            Log.d("MainActivity", "–û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –æ–±–ª–∞—Å—Ç–µ–π –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞")
            openSingleModeAreaConfiguration()
        }
        
        // –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        binding.btnStartSingleMode?.setOnClickListener {
            Log.d("MainActivity", "–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞")
            startSingleMode()
        }
        
        // === –û–°–¢–ê–õ–¨–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
        
        // –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ò–ò
        binding.btnConfigureAI?.setOnClickListener {
            Log.d("MainActivity", "–û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò")
            openAIConfiguration()
        }
        
        // –ö–Ω–æ–ø–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏
        binding.btnTestProxy?.setOnClickListener {
            Log.d("MainActivity", "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏")
            testProxyConnection()
        }
        
        // === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–†–û–ö–°–ò ===
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –ø—Ä–æ–∫—Å–∏
        binding.switchProxyEnabled?.setOnCheckedChangeListener { _, isChecked ->
            Log.d("MainActivity", "–ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –ø—Ä–æ–∫—Å–∏: $isChecked")
            ProxyManager.setProxyEnabled(isChecked, this@MainActivity)
            updateProxyStatus()
            toggleProxySettingsVisibility(isChecked)
            
            gameLogger.logUserAction(
                "–ü—Ä–æ–∫—Å–∏ ${if (isChecked) "–≤–∫–ª—é—á–µ–Ω" else "–æ—Ç–∫–ª—é—á–µ–Ω"}",
                mapOf("proxy_enabled" to isChecked)
            )
        }
        
        // === –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ù–ê–°–¢–†–û–ï–ö –ü–†–û–ö–°–ò ===
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–∏–ø–∞ –ø—Ä–æ–∫—Å–∏
        binding.toggleProxyType?.addOnButtonCheckedListener { _, checkedId, isChecked ->
            if (isChecked) {
                when (checkedId) {
                    binding.btnSocks5?.id -> {
                        Log.d("MainActivity", "–í—ã–±—Ä–∞–Ω —Ç–∏–ø –ø—Ä–æ–∫—Å–∏: SOCKS5")
                    }
                    binding.btnHttp?.id -> {
                        Log.d("MainActivity", "–í—ã–±—Ä–∞–Ω —Ç–∏–ø –ø—Ä–æ–∫—Å–∏: HTTP")
                    }
                }
            }
        }
        
        // –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∫—Å–∏
        binding.btnSaveProxy?.setOnClickListener {
            Log.d("MainActivity", "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∫—Å–∏")
            saveProxySettings()
        }
        
        // –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∫—Å–∏
        binding.btnResetProxy?.setOnClickListener {
            Log.d("MainActivity", "–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∫—Å–∏")
            resetProxySettings()
        }
        
        // –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        binding.btnCheckUpdates?.setOnClickListener {
            Log.d("MainActivity", "–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
            checkForUpdatesManually()
        }
    }

    private fun loadSettings() {
        val savedChoice = prefsManager.getBetChoice()

        Log.d("MainActivity", "–ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: betChoice=$savedChoice")

        Log.d("MainActivity", "–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä —Å—Ç–∞–≤–∫–∏: $savedChoice")

        when (savedChoice) {
            BetChoice.RED    -> {
                Log.d("MainActivity", "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—Ä–∞—Å–Ω—ã–π chip")
                binding.chipRed.isChecked = true
                binding.chipOrange.isChecked = false
            }
            BetChoice.ORANGE-> {
                Log.d("MainActivity", "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∞–Ω–∂–µ–≤—ã–π chip")
                binding.chipOrange.isChecked = true
                binding.chipRed.isChecked = false
            }
        }
        updateBetChoiceText(savedChoice)

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–≤–æ–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        val dualModeSettings = prefsManager.getDualModeSettings()
        binding.switchDualMode?.isChecked = dualModeSettings.enabled
        Log.d("MainActivity", "–ó–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–≤–æ–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞: enabled=${dualModeSettings.enabled}")
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        val singleModePrefs = getSharedPreferences("single_mode_prefs", MODE_PRIVATE)
        val singleModeEnabled = singleModePrefs.getBoolean("single_mode_enabled", false)
        binding.switchSingleMode?.isChecked = singleModeEnabled
        Log.d("MainActivity", "–ó–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞: enabled=$singleModeEnabled")
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ä–µ–∂–∏–º –∏–≥—Ä—ã –≤ PreferencesManager
        val gameMode = if (singleModeEnabled) "single" else "dual"
        prefsManager.saveGameMode(gameMode)
        Log.d("MainActivity", "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º –∏–≥—Ä—ã –≤ PreferencesManager: $gameMode")
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏
        binding.switchProxyEnabled?.isChecked = ProxyManager.isProxyEnabled()
        loadProxySettingsToUI()
        updateProxyStatus()
        toggleProxySettingsVisibility(ProxyManager.isProxyEnabled())
        Log.d("MainActivity", "–ó–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏: enabled=${ProxyManager.isProxyEnabled()}")

        Log.d("MainActivity", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: chipRed=${binding.chipRed.isChecked}, chipOrange=${binding.chipOrange.isChecked}")
    }

    private fun updateBetChoiceText(choice: BetChoice) {
        val txt = if (choice == BetChoice.RED) "–ö—Ä–∞—Å–Ω—ã–π" else "–û—Ä–∞–Ω–∂–µ–≤—ã–π"
        Log.d("MainActivity", "–û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–≤–∫–∏: $choice -> $txt")
        binding.tvBetChoice.text = getString(R.string.bet_choice, txt)
        Log.d("MainActivity", "–¢–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: ${binding.tvBetChoice.text}")
    }

    private fun notifyServiceSettingsChanged() {
        Log.d("MainActivity", "–£–≤–µ–¥–æ–º–ª—è–µ–º —Å–µ—Ä–≤–∏—Å –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        Log.d("MainActivity", "–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: betChoice=${prefsManager.getBetChoice()}")

        Intent(this, OverlayService::class.java).also { intent ->
            intent.action = "SETTINGS_CHANGED"
            // –î–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π startService
            startService(intent)
        }
        Log.d("MainActivity", "Intent –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–µ—Ä–≤–∏—Å—É")
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–∫—Å–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
     */
    private fun updateProxyStatus() {
        val isEnabled = ProxyManager.isProxyEnabled()
        val connectionInfo = ProxyManager.getCurrentConnectionInfo()
        
        binding.tvProxyStatus?.apply {
            if (isEnabled) {
                text = getString(R.string.proxy_status_enabled, connectionInfo)
                setTextColor(ContextCompat.getColor(this@MainActivity, android.R.color.holo_green_dark))
            } else {
                text = getString(R.string.proxy_status_disabled)
                setTextColor(ContextCompat.getColor(this@MainActivity, android.R.color.holo_orange_dark))
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        binding.btnTestProxy?.text = if (isEnabled) {
            "üåê –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏"
        } else {
            "üåê –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"
        }
        
        Log.d("MainActivity", "–°—Ç–∞—Ç—É—Å –ø—Ä–æ–∫—Å–∏ –æ–±–Ω–æ–≤–ª–µ–Ω: enabled=$isEnabled, info=$connectionInfo")
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≥—Ä–µ–≤–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
     */
    private fun showWarmupStatus() {
        binding.tvProxyStatus?.apply {
            text = getString(R.string.proxy_status_warming_up)
            setTextColor(ContextCompat.getColor(this@MainActivity, android.R.color.holo_blue_bright))
        }
        binding.btnTestProxy?.isEnabled = false
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≥—Ä–µ—Ç–æ
     */
    private fun showWarmupSuccess() {
        binding.tvProxyStatus?.apply {
            text = getString(R.string.proxy_status_warmed_up)
            setTextColor(ContextCompat.getColor(this@MainActivity, android.R.color.holo_green_light))
        }
        binding.btnTestProxy?.isEnabled = true
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –ø—Ä–æ–≥—Ä–µ–≤–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
     */
    private fun showWarmupError() {
        binding.tvProxyStatus?.apply {
            text = getString(R.string.proxy_status_warmup_error)
            setTextColor(ContextCompat.getColor(this@MainActivity, android.R.color.holo_red_light))
        }
        binding.btnTestProxy?.isEnabled = true
    }

    // === –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –ù–ê–°–¢–†–û–ï–ö –ü–†–û–ö–°–ò ===
    
    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∫—Å–∏
     */
    private fun toggleProxySettingsVisibility(enabled: Boolean) {
        binding.layoutProxySettings?.visibility = if (enabled) View.VISIBLE else View.GONE
    }
    
    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ –≤ UI
     */
    private fun loadProxySettingsToUI() {
        val config = ProxyManager.getCurrentProxyConfig()
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞
        binding.etProxyHost?.setText(config.host)
        binding.etProxyPort?.setText(config.port.toString())
        binding.etProxyUsername?.setText(config.username)
        binding.etProxyPassword?.setText(config.password)
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –ø—Ä–æ–∫—Å–∏
        when (config.type) {
            ProxyManager.ProxyType.SOCKS5 -> {
                binding.toggleProxyType?.check(binding.btnSocks5?.id ?: -1)
            }
            ProxyManager.ProxyType.HTTP -> {
                binding.toggleProxyType?.check(binding.btnHttp?.id ?: -1)
            }
        }
        
        Log.d("MainActivity", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ UI: ${config.type.name} ${config.username}@${config.host}:${config.port}")
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ –∏–∑ UI
     */
    private fun saveProxySettings() {
        val host = binding.etProxyHost?.text?.toString()?.trim() ?: ""
        val port = binding.etProxyPort?.text?.toString()?.trim() ?: ""
        val username = binding.etProxyUsername?.text?.toString()?.trim() ?: ""
        val password = binding.etProxyPassword?.text?.toString()?.trim() ?: ""
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –ø—Ä–æ–∫—Å–∏
        val selectedType = when (binding.toggleProxyType?.checkedButtonId) {
            binding.btnSocks5?.id -> ProxyManager.ProxyType.SOCKS5
            binding.btnHttp?.id -> ProxyManager.ProxyType.HTTP
            else -> ProxyManager.ProxyType.SOCKS5 // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é SOCKS5
        }
        
        // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        val validationError = ProxyManager.validateProxyConfig(host, port, username, password)
        if (validationError != null) {
            showProxyError(validationError)
            return
        }
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        val config = ProxyManager.ProxyConfig(
            host = host,
            port = port.toInt(),
            username = username,
            password = password,
            type = selectedType
        )
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º
        if (ProxyManager.saveProxyConfig(this, config)) {
            updateProxyStatus()
            Toast.makeText(this, getString(R.string.proxy_success_saved), Toast.LENGTH_SHORT).show()
            
            gameLogger.logUserAction(
                "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
                mapOf(
                    "proxy_type" to selectedType.name,
                    "proxy_host" to host,
                    "proxy_port" to port
                )
            )
        } else {
            showProxyError("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        }
    }
    
    /**
     * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
     */
    private fun resetProxySettings() {
        MaterialAlertDialogBuilder(this)
            .setTitle("üîÑ –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∫—Å–∏")
            .setMessage("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é?")
            .setPositiveButton("–°–±—Ä–æ—Å–∏—Ç—å") { _, _ ->
                ProxyManager.resetProxyConfigToDefaults(this)
                loadProxySettingsToUI()
                updateProxyStatus()
                Toast.makeText(this, getString(R.string.proxy_success_reset), Toast.LENGTH_SHORT).show()
                
                gameLogger.logUserAction("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ —É–º–æ–ª—á–∞–Ω–∏—é", emptyMap())
            }
            .setNegativeButton("–û—Ç–º–µ–Ω–∞", null)
            .show()
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∫—Å–∏
     */
    private fun showProxyError(message: String) {
        MaterialAlertDialogBuilder(this)
            .setTitle("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∫—Å–∏")
            .setMessage(message)
            .setPositiveButton("OK", null)
            .show()
    }

    private fun updatePermissionButtons() {
        Log.d("MainActivity", "–û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π")

        val hasOverlay = Settings.canDrawOverlays(this)
        val enabledAccessibility = Settings.Secure.getString(
            contentResolver, Settings.Secure.ENABLED_ACCESSIBILITY_SERVICES
        ).orEmpty().contains("$packageName/${AutoClickService::class.java.canonicalName}")
        val hasNotification = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU)
            ContextCompat.checkSelfPermission(
                this, Manifest.permission.POST_NOTIFICATIONS) == PackageManager.PERMISSION_GRANTED
        else true
        val hasScreenCapture = prefsManager.hasValidMediaProjection()
        val hasAreas = prefsManager.areAllAreasConfigured()

        Log.d("MainActivity", "–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: hasOverlay=$hasOverlay, enabledAccessibility=$enabledAccessibility, hasNotification=$hasNotification, hasScreenCapture=$hasScreenCapture, hasAreas=$hasAreas")

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–æ–≤—É—é –∏–Ω–¥–∏–∫–∞—Ü–∏—é –∫ –∫–Ω–æ–ø–∫–∞–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π —Å –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏
        // –ó–µ–ª—ë–Ω—ã–π —Ü–≤–µ—Ç - –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤—ã–¥–∞–Ω–æ, –∫—Ä–∞—Å–Ω—ã–π - –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Ä–∞–∑—Ä–µ—à–∏—Ç—å
        fun applyPermissionState(button: androidx.appcompat.widget.AppCompatButton, granted: Boolean) {
            if (granted) {
                button.text = "–†–∞–∑—Ä–µ—à–µ–Ω–æ"
                button.isEnabled = true
                button.alpha = 1f
                // üü¢ –ó–ï–õ–Å–ù–´–ô —Ñ–æ–Ω —Å –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏ –¥–ª—è –≤—ã–¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
                button.setBackgroundResource(R.drawable.button_permission_granted)
            } else {
                button.text = getString(R.string.grant_permission)
                button.isEnabled = true
                button.alpha = 1f
                // üî¥ –ö–†–ê–°–ù–´–ô —Ñ–æ–Ω —Å –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏ –¥–ª—è –Ω–µ–≤—ã–¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
                button.setBackgroundResource(R.drawable.button_permission_denied)
            }
        }

        applyPermissionState(binding.btnOverlayPermission, hasOverlay)
        applyPermissionState(binding.btnAccessibilityPermission, enabledAccessibility)
        applyPermissionState(binding.btnNotificationPermission, hasNotification)

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–µ—Ä—Å–∏–∏ Android
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            binding.notificationPermissionLayout.visibility = View.VISIBLE
            Log.d("MainActivity", "–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è Android 13+")
        } else {
            binding.notificationPermissionLayout.visibility = View.GONE
            Log.d("MainActivity", "–°–∫—Ä—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è Android < 13")
        }

        val serviceEnabled = hasOverlay && enabledAccessibility && hasNotification && hasAreas
    binding.btnToggleService.isEnabled = serviceEnabled
        
        // –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–≤–æ–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        binding.btnConfigureDualMode?.isEnabled = hasOverlay && enabledAccessibility

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        updateSingleModeButtonsState()

        Log.d("MainActivity", "–ö–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: btnToggleService=${binding.btnToggleService.isEnabled}, btnConfigureDualMode=${binding.btnConfigureDualMode?.isEnabled}, serviceEnabled=$serviceEnabled")
    }

    private fun hasOverlayPermission(): Boolean {
        return Settings.canDrawOverlays(this)
    }

    private fun requestOverlayPermission() {
        if (!Settings.canDrawOverlays(this)) {
            val intent = Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION)
            intent.data = Uri.parse("package:$packageName")
            startActivity(intent)
        }
    }

    private fun toggleService() {
        Log.d("MainActivity", "–ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–µ—Ä–≤–∏—Å: isServiceRunning=$isServiceRunning")

        try {
            if (!prefsManager.areAllAreasConfigured()) {
                Log.d("MainActivity", "–û–±–ª–∞—Å—Ç–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, —Å–µ—Ä–≤–∏—Å –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è")
                gameLogger.logWarning("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–µ–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π")
                Toast.makeText(this, "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –æ–±–ª–∞—Å—Ç–∏", Toast.LENGTH_SHORT).show()
                return
            }

            Intent(this, OverlayService::class.java).also { svc ->
                if (isServiceRunning) {
                    Log.d("MainActivity", "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å")
                    gameLogger.logUserAction("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞")
                    stopService(svc)
                    binding.btnToggleService.text = getString(R.string.start_service)
                } else {
                    Log.d("MainActivity", "–ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å")
                    gameLogger.logUserAction("–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞")
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O)
                        startForegroundService(svc) else startService(svc)
                    binding.btnToggleService.text = getString(R.string.stop_service)
                }
                isServiceRunning = !isServiceRunning
                Log.d("MainActivity", "–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –∏–∑–º–µ–Ω–µ–Ω–æ: isServiceRunning=$isServiceRunning")
            }
        } catch (e: Exception) {
            val error = ErrorHandler.handleError(e)
            gameLogger.logError(e, "–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞")
            Toast.makeText(this, "–û—à–∏–±–∫–∞: ${error.message}", Toast.LENGTH_LONG).show()
        }
    }

    private fun launchAreaConfigDialog() {
        if (!prefsManager.areAllAreasConfigured()) {
            Log.d("MainActivity", "–û–±–ª–∞—Å—Ç–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            MaterialAlertDialogBuilder(this@MainActivity)
                .setTitle("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–ª–∞—Å—Ç–µ–π")
                .setMessage("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∑–æ–Ω—ã –∞–≤—Ç–æ–∫–ª–∏–∫–∞.")
                .setPositiveButton("–ù–∞—á–∞—Ç—å") { _, _ ->
                    Log.d("MainActivity", "–ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –æ–±–ª–∞—Å—Ç–µ–π")
                    AreaConfigurationService.start(this@MainActivity)
                    moveTaskToBack(true)
                }
                .show()
        } else {
            Log.d("MainActivity", "–û–±–ª–∞—Å—Ç–∏ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–µ—Ä–µ–Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            MaterialAlertDialogBuilder(this@MainActivity)
                .setTitle("–ü–µ—Ä–µ–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–ª–∞—Å—Ç–µ–π")
                .setMessage("–í—Å–µ –æ–±–ª–∞—Å—Ç–∏ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –ü–µ—Ä–µ–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å?")
                .setPositiveButton("–î–∞") { _, _ ->
                    Log.d("MainActivity", "–û—á–∏—â–∞–µ–º –æ–±–ª–∞—Å—Ç–∏ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–Ω–∞—Å—Ç—Ä–æ–π–∫—É")
                    prefsManager.clearAllAreas()
                    AreaConfigurationService.start(this@MainActivity)
                    moveTaskToBack(true)
                }
                .setNegativeButton("–ù–µ—Ç", null)
                .show()
        }
    }

    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)
        if (requestCode == REQUEST_MEDIA_PROJECTION) {
            Log.d("MainActivity", "onActivityResult: requestCode=$requestCode, resultCode=$resultCode, data=$data")
            projectionLaunched = false
            if (resultCode == Activity.RESULT_OK && data != null) {
                Log.d("MainActivity", "‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä")
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
                permissionManager.savePermission(resultCode, data)
                
                // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ç–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                prefsManager.saveMediaProjectionPermission(resultCode, data)
                com.example.diceautobet.utils.MediaProjectionTokenStore.set(data)
                
                if (pendingAreaConfig) {
                    Log.d("MainActivity", "–ó–∞–ø—É—Å–∫–∞–µ–º AreaConfigurationService –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è MediaProjection")
                    AreaConfigurationService.start(this, resultCode, data)
                    pendingAreaConfig = false
                    moveTaskToBack(true)
                } else {
                    Intent(this, OverlayService::class.java).also { svc ->
                        svc.action = OverlayService.ACTION_START_PROJECTION
                        svc.putExtra(OverlayService.EXTRA_RESULT_CODE, resultCode)
                        svc.putExtra(OverlayService.EXTRA_RESULT_DATA, data)
                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O)
                            startForegroundService(svc)
                        else
                            startService(svc)
                    }
                    Toast.makeText(this, "‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –ë–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å—Å—è!", Toast.LENGTH_LONG).show()
                }
            } else {
                Log.d("MainActivity", "‚ùå –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ: resultCode=$resultCode")
                permissionManager.clearPermission()
                prefsManager.clearMediaProjectionPermission()
                com.example.diceautobet.utils.MediaProjectionTokenStore.clear()
                Toast.makeText(this, "–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∑–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ", Toast.LENGTH_SHORT).show()
            }
            if (isRequestFlow) {
                Log.d("MainActivity", "–ó–∞–≤–µ—Ä—à–∞–µ–º –ø–æ—Ç–æ–∫ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è")
                isRequestFlow = false
                OverlayService.isRequestingProjection = false
                updatePermissionButtons()
            }
        }
    }

    override fun onDestroy() {
        Log.d("MainActivity", "MainActivity —É–Ω–∏—á—Ç–æ–∂–∞–µ—Ç—Å—è")
        try {
            // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç DualModeService
            if (isDualModeServiceBound) {
                unbindService(dualModeServiceConnection)
                isDualModeServiceBound = false
            }
            
            gameLogger.logSystemEvent("MainActivity —É–Ω–∏—á—Ç–æ–∂–µ–Ω")
            gameLogger.destroy()
        } catch (e: Exception) {
            Log.e("MainActivity", "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏", e)
        }
        super.onDestroy()
    }

    override fun onPause() {
        super.onPause()
        gameLogger.logSystemEvent("MainActivity –Ω–∞ –ø–∞—É–∑–µ")
    }

    // === –ú–ï–¢–û–î–´ –î–í–û–ô–ù–û–ì–û –†–ï–ñ–ò–ú–ê ===

    /**
     * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–≤–æ–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
     */
    private fun openDualModeConfiguration() {
        Log.d("MainActivity", "–û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–≤–æ–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞")
        
        val currentSettings = prefsManager.getDualModeSettings()
        
        // –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        val dialogView = layoutInflater.inflate(R.layout.dialog_dual_mode_settings, null)
    // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –æ–±–ª–∞—Å—Ç–µ–π –æ–∫–æ–Ω
    val btnOpenAreaConfig = dialogView.findViewById<androidx.appcompat.widget.AppCompatButton?>(R.id.btnOpenAreaConfig)
        
        // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–∏–∞–ª–æ–≥–∞
        val spinnerStrategy = dialogView.findViewById<AutoCompleteTextView>(R.id.spinnerStrategy)
        val spinnerSplitType = dialogView.findViewById<AutoCompleteTextView>(R.id.spinnerSplitType)
        val rgBaseBet = dialogView.findViewById<RadioGroup>(R.id.rgBaseBet)
        val rbBet10 = dialogView.findViewById<RadioButton>(R.id.rbBet10)
        val rbBet20 = dialogView.findViewById<RadioButton>(R.id.rbBet20)
        val rbBet50 = dialogView.findViewById<RadioButton>(R.id.rbBet50)
        val rbBet100 = dialogView.findViewById<RadioButton>(R.id.rbBet100)
        val rbBet500 = dialogView.findViewById<RadioButton>(R.id.rbBet500)
        val rbBet2500 = dialogView.findViewById<RadioButton>(R.id.rbBet2500)
        val etColorSwitchLosses = dialogView.findViewById<TextInputEditText>(R.id.etColorSwitchLosses)
        val etTimingDelay = dialogView.findViewById<TextInputEditText>(R.id.etTimingDelay)
        val cbEnableLogging = dialogView.findViewById<MaterialCheckBox>(R.id.cbEnableLogging)
        val cbAutoCalibration = dialogView.findViewById<MaterialCheckBox>(R.id.cbAutoCalibration)
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        val strategies = arrayOf(
            "–ü—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–µ ‚Üí –¥—Ä—É–≥–æ–µ –æ–∫–Ω–æ",
            "–ü—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ ‚Üí –¥—Ä—É–≥–æ–µ –æ–∫–Ω–æ", 
            "–ß–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥—É—é –∏–≥—Ä—É"
        )
        val adapter = ArrayAdapter(this, android.R.layout.simple_dropdown_item_1line, strategies)
        spinnerStrategy.setAdapter(adapter)
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        val splitTypes = arrayOf(
            "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ (–ª–µ–≤–æ–µ/–ø—Ä–∞–≤–æ–µ)",
            "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ (–≤–µ—Ä—Ö–Ω–µ–µ/–Ω–∏–∂–Ω–µ–µ)"
        )
        val splitAdapter = ArrayAdapter(this, android.R.layout.simple_dropdown_item_1line, splitTypes)
        spinnerSplitType.setAdapter(splitAdapter)
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—É—â–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        spinnerStrategy.setText(when(currentSettings.strategy) {
            DualStrategy.WIN_SWITCH -> "–ü—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–µ ‚Üí –¥—Ä—É–≥–æ–µ –æ–∫–Ω–æ"
            DualStrategy.LOSS_DOUBLE -> "–ü—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ ‚Üí –¥—Ä—É–≥–æ–µ –æ–∫–Ω–æ"
            DualStrategy.COLOR_ALTERNATING -> "–ß–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥—É—é –∏–≥—Ä—É"
        }, false)
        
        spinnerSplitType.setText(when(currentSettings.splitScreenType) {
            SplitScreenType.HORIZONTAL -> "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ (–ª–µ–≤–æ–µ/–ø—Ä–∞–≤–æ–µ)"
            SplitScreenType.VERTICAL -> "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ (–≤–µ—Ä—Ö–Ω–µ–µ/–Ω–∏–∂–Ω–µ–µ)"
        }, false)
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞–≤–∫—É –≤ RadioGroup
        when(currentSettings.baseBet) {
            10 -> rbBet10.isChecked = true
            20 -> rbBet20.isChecked = true  
            50 -> rbBet50.isChecked = true
            100 -> rbBet100.isChecked = true
            500 -> rbBet500.isChecked = true
            2500 -> rbBet2500.isChecked = true
            else -> rbBet20.isChecked = true // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 20
        }
        
        etColorSwitchLosses.setText(currentSettings.maxConsecutiveLosses.toString())
        etTimingDelay.setText(currentSettings.delayBetweenActions.toString())
        cbEnableLogging.isChecked = currentSettings.enableTimingOptimization
        cbAutoCalibration.isChecked = currentSettings.smartSynchronization
        
        MaterialAlertDialogBuilder(this)
            .setTitle("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–≤–æ–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞")
            .setView(dialogView)
            .setPositiveButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å") { dialog, _ ->
                saveDualModeSettingsFromDialog(dialogView)
                dialog.dismiss()
            }
            .setNegativeButton("–û—Ç–º–µ–Ω–∞") { dialog, _ -> dialog.dismiss() }
            .setNeutralButton("–ü–æ–º–æ—â—å") { _, _ ->
                showDualModeHelpDialog()
            }
            .create().also { dialog ->
                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ–±–ª–∞—Å—Ç–µ–π
                btnOpenAreaConfig?.setOnClickListener {
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                    saveDualModeSettingsFromDialog(dialogView)
                    dialog.dismiss()
                    // –û—Ç–∫—Ä—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ–±–ª–∞—Å—Ç–µ–π –¥–ª—è –¥–≤–æ–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
                    val intent = Intent(this, com.example.diceautobet.ui.DualModeAreaConfigActivity::class.java)
                    startActivity(intent)
                }
                dialog.show()
            }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–≤–æ–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∏–∑ –¥–∏–∞–ª–æ–≥–∞
     */
    private fun saveDualModeSettingsFromDialog(dialogView: View) {
        Log.d("MainActivity", "–°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–≤–æ–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞")
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–∏–∞–ª–æ–≥–∞
            val spinnerStrategy = dialogView.findViewById<AutoCompleteTextView>(R.id.spinnerStrategy)
            val spinnerSplitType = dialogView.findViewById<AutoCompleteTextView>(R.id.spinnerSplitType)
            val rgBaseBet = dialogView.findViewById<RadioGroup>(R.id.rgBaseBet)
            val etColorSwitchLosses = dialogView.findViewById<TextInputEditText>(R.id.etColorSwitchLosses)
            val etTimingDelay = dialogView.findViewById<TextInputEditText>(R.id.etTimingDelay)
            val cbEnableLogging = dialogView.findViewById<MaterialCheckBox>(R.id.cbEnableLogging)
            val cbAutoCalibration = dialogView.findViewById<MaterialCheckBox>(R.id.cbAutoCalibration)
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            val strategy = when(spinnerStrategy.text.toString()) {
                "–ü—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–µ ‚Üí –¥—Ä—É–≥–æ–µ –æ–∫–Ω–æ" -> DualStrategy.WIN_SWITCH
                "–ü—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ ‚Üí –¥—Ä—É–≥–æ–µ –æ–∫–Ω–æ" -> DualStrategy.LOSS_DOUBLE
                "–ß–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥—É—é –∏–≥—Ä—É" -> DualStrategy.COLOR_ALTERNATING
                else -> DualStrategy.WIN_SWITCH
            }
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞
            val splitScreenType = when(spinnerSplitType.text.toString()) {
                "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ (–ª–µ–≤–æ–µ/–ø—Ä–∞–≤–æ–µ)" -> SplitScreenType.HORIZONTAL
                "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ (–≤–µ—Ä—Ö–Ω–µ–µ/–Ω–∏–∂–Ω–µ–µ)" -> SplitScreenType.VERTICAL
                else -> SplitScreenType.HORIZONTAL
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –±–∞–∑–æ–≤—É—é —Å—Ç–∞–≤–∫—É –∏–∑ RadioGroup
            val baseBet = when(rgBaseBet.checkedRadioButtonId) {
                R.id.rbBet10 -> 10
                R.id.rbBet20 -> 20
                R.id.rbBet50 -> 50
                R.id.rbBet100 -> 100
                R.id.rbBet500 -> 500
                R.id.rbBet2500 -> 2500
                else -> 20 // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            }
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –±–∞–∑–æ–≤–æ–π —Å—Ç–∞–≤–∫–æ–π
            val newSettings = DualModeSettings(
                enabled = binding.switchDualMode?.isChecked ?: false,
                strategy = strategy,
                splitScreenType = splitScreenType,
                baseBet = baseBet, // –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –∏–∑ RadioGroup
                maxBet = 30000, // –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ 30.000
                maxConsecutiveLosses = etColorSwitchLosses.text.toString().toIntOrNull() ?: 2,
                delayBetweenActions = etTimingDelay.text.toString().toLongOrNull() ?: 1000,
                enableTimingOptimization = cbEnableLogging.isChecked,
                smartSynchronization = cbAutoCalibration.isChecked
            )
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            prefsManager.saveDualModeSettings(newSettings)
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –¥–≤–æ–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
            val (isReady, readinessMessage) = prefsManager.isDualModeReadyForSplitType()
            
            if (isReady) {
                Toast.makeText(this, "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–≤–æ–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é", Toast.LENGTH_LONG).show()
            } else {
                Toast.makeText(this, "‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–ª–∞—Å—Ç–µ–π", Toast.LENGTH_LONG).show()
                Log.w("MainActivity", readinessMessage)
            }
            
            Log.d("MainActivity", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: $newSettings")
            Log.d("MainActivity", "–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: $readinessMessage")
            
        } catch (e: Exception) {
            Log.e("MainActivity", "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫", e)
            Toast.makeText(this, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${e.message}", Toast.LENGTH_LONG).show()
        }
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –¥–≤–æ–π–Ω–æ–º—É —Ä–µ–∂–∏–º—É
     */
    private fun showDualModeHelpDialog() {
        MaterialAlertDialogBuilder(this)
            .setTitle("‚ùì –°–ø—Ä–∞–≤–∫–∞ –ø–æ –¥–≤–æ–π–Ω–æ–º—É —Ä–µ–∂–∏–º—É")
            .setMessage("""
                üéØ –î–≤–æ–π–Ω–æ–π —Ä–µ–∂–∏–º –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –¥–≤—É–º—è –æ–∫–Ω–∞–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.
                
                üì± –°—Ç—Ä–∞—Ç–µ–≥–∏–∏:
                ‚Ä¢ –ü—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–µ ‚Üí –¥—Ä—É–≥–æ–µ –æ–∫–Ω–æ: –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥—Ä—É–≥–æ–µ –æ–∫–Ω–æ –ø—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–µ
                ‚Ä¢ –ü—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ ‚Üí –¥—Ä—É–≥–æ–µ –æ–∫–Ω–æ: –£–¥–≤–æ–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ –≤ –¥—Ä—É–≥–æ–º –æ–∫–Ω–µ –ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ  
                ‚Ä¢ –ß–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥—É—é –∏–≥—Ä—É: –°–º–µ–Ω–∞ —Ü–≤–µ—Ç–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π
                
                ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:
                ‚Ä¢ –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞: –ù–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏
                ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: –õ–∏–º–∏—Ç —Å—Ç–∞–≤–∫–∏
                ‚Ä¢ –°–º–µ–Ω–∞ —Ü–≤–µ—Ç–∞ –ø–æ—Å–ª–µ: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π –¥–æ —Å–º–µ–Ω—ã —Ü–≤–µ—Ç–∞
                ‚Ä¢ –ó–∞–¥–µ—Ä–∂–∫–∞: –í—Ä–µ–º—è –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏ (–º—Å)
                
                ‚ö†Ô∏è –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
                ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è –æ–±–æ–∏—Ö –æ–∫–æ–Ω
                ‚Ä¢ –ü–ª–∞–Ω—à–µ—Ç —Å —Ñ—É–Ω–∫—Ü–∏–µ–π —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞
                ‚Ä¢ –î–≤–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            """.trimIndent())
            .setPositiveButton("–ü–æ–Ω—è—Ç–Ω–æ") { dialog, _ -> dialog.dismiss() }
            .show()
    }

    // === –ú–ï–¢–û–î–´ –†–ê–ë–û–¢–´ –° DUALMODESERVICE ===

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç DualModeService
     */
    private fun initializeDualModeService() {
        Log.d("MainActivity", "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DualModeService")
        
        val intent = Intent(this, DualModeService::class.java)
    // –ù–µ –∑–∞–ø—É—Å–∫–∞–µ–º foreground c–µ—Ä–≤–∏—Å –∑–∞—Ä–∞–Ω–µ–µ.
    // –ü—Ä–æ—Å—Ç–æ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è; —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞—Å—Ç—Å—è –∏–∑ bind (BIND_AUTO_CREATE),
    // –∞ –ø–µ—Ä–µ–≤–æ–¥ –≤ foreground –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–º —Å—Ç–∞—Ä—Ç–µ —Ä–µ–∂–∏–º–∞.
    bindService(intent, dualModeServiceConnection, Context.BIND_AUTO_CREATE)
        
        Log.d("MainActivity", "DualModeService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç UI –¥–≤–æ–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
     */
    private fun updateDualModeUI(gameState: SimpleDualModeState) {
        Log.d("MainActivity", "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –¥–≤–æ–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞: $gameState")
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è
        binding.switchDualMode?.isChecked = gameState.isRunning
        
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –≤ layout
        // binding.tvDualModeStatus?.text = if (gameState.isRunning) "–ê–∫—Ç–∏–≤–µ–Ω" else "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        // binding.tvActiveWindow?.text = "–ê–∫—Ç–∏–≤–Ω–æ–µ: ${gameState.currentWindow}"
        // binding.tvCurrentColor?.text = "–¶–≤–µ—Ç: ${gameState.currentColor}"
        
        Toast.makeText(this, "–î–≤–æ–π–Ω–æ–π —Ä–µ–∂–∏–º: ${if (gameState.isRunning) "–∞–∫—Ç–∏–≤–µ–Ω" else "–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}", Toast.LENGTH_SHORT).show()
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –æ–∫–Ω–∞
     */
    private fun onWindowSwitched(windowType: WindowType) {
        Log.d("MainActivity", "–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –æ–∫–Ω–æ: $windowType")
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –æ–±–ª–∞—Å—Ç–µ–π
        dualWindowAreaManager?.setActiveWindow(windowType)
        
        Toast.makeText(this, "–ê–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ: ${windowType.name}", Toast.LENGTH_SHORT).show()
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–≤–æ–π–Ω–æ–π —Ä–µ–∂–∏–º
     */
    private fun startDualMode() {
        Log.d("MainActivity", "–ó–∞–ø—É—Å–∫ –¥–≤–æ–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞")
        
        if (!isDualModeServiceBound) {
            Log.w("MainActivity", "DualModeService –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            Toast.makeText(this, "–°–µ—Ä–≤–∏—Å –¥–≤–æ–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –Ω–µ –≥–æ—Ç–æ–≤", Toast.LENGTH_SHORT).show()
            return
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
        val configStatus = dualWindowAreaManager?.getConfigurationStatus()
        if (configStatus?.readyForDualMode != true) {
            Log.w("MainActivity", "–î–≤–æ–π–Ω–æ–π —Ä–µ–∂–∏–º –Ω–µ –≥–æ—Ç–æ–≤: $configStatus")
            showDualModeSetupDialog()
            return
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        dualModeService?.startDualMode()
        
        gameLogger.logUserAction("–ó–∞–ø—É—Å–∫ –¥–≤–æ–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞")
    }

    /**
     * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–≤–æ–π–Ω–æ–π —Ä–µ–∂–∏–º
     */
    private fun stopDualMode() {
        Log.d("MainActivity", "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–≤–æ–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞")
        
        dualModeService?.stopDualMode()
        
        gameLogger.logUserAction("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–≤–æ–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞")
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–≤–æ–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
     */
    private fun showDualModeSetupDialog() {
        val configStatus = dualWindowAreaManager?.getConfigurationStatus()
        
        val message = StringBuilder()
        message.append("–î–ª—è —Ä–∞–±–æ—Ç—ã –¥–≤–æ–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n\n")
        
        if (!configStatus?.splitScreenSupported!!) {
            message.append("‚ùå –†–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è\n")
        } else {
            message.append("‚úÖ –†–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è\n")
        }
        
        if (!configStatus.leftWindowConfigured) {
            message.append("‚ùå –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è –ª–µ–≤–æ–≥–æ –æ–∫–Ω–∞\n")
        } else {
            message.append("‚úÖ –õ–µ–≤–æ–µ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ (${configStatus.leftAreasCount} –æ–±–ª–∞—Å—Ç–µ–π)\n")
        }
        
        if (!configStatus.rightWindowConfigured) {
            message.append("‚ùå –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è –ø—Ä–∞–≤–æ–≥–æ –æ–∫–Ω–∞\n")
        } else {
            message.append("‚úÖ –ü—Ä–∞–≤–æ–µ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ (${configStatus.rightAreasCount} –æ–±–ª–∞—Å—Ç–µ–π)\n")
        }
        
        MaterialAlertDialogBuilder(this)
            .setTitle("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–≤–æ–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞")
            .setMessage(message.toString())
            .setPositiveButton("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–±–ª–∞—Å—Ç–∏") { _, _ ->
                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –æ–±–ª–∞—Å—Ç–µ–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–∫–Ω–∞
                openAreaConfigurationForDualMode()
            }
            .setNegativeButton("–û—Ç–º–µ–Ω–∞") { dialog, _ -> dialog.dismiss() }
            .show()
    }

    /**
     * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –æ–±–ª–∞—Å—Ç–µ–π –¥–ª—è –¥–≤–æ–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
     */
    private fun openAreaConfigurationForDualMode() {
        Log.d("MainActivity", "–û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–ª–∞—Å—Ç–µ–π –¥–ª—è –¥–≤–æ–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞")
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–≤–æ–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        val intent = Intent(this, com.example.diceautobet.ui.DualModeAreaConfigActivity::class.java)
        startActivity(intent)
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–≤–æ–π–Ω–æ–º —Ä–µ–∂–∏–º–µ
     */
    private fun showDualModeInfoDialog() {
        androidx.appcompat.app.AlertDialog.Builder(this)
            .setTitle("–î–≤–æ–π–Ω–æ–π —Ä–µ–∂–∏–º")
            .setMessage("""
                üéØ –†–µ–∂–∏–º –¥–ª—è –ø–ª–∞–Ω—à–µ—Ç–æ–≤ —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–º —ç–∫—Ä–∞–Ω–æ–º
                
                üì± –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
                ‚Ä¢ –ü–ª–∞–Ω—à–µ—Ç —Å —Ñ—É–Ω–∫—Ü–∏–µ–π —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞
                ‚Ä¢ –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (—á–µ—Ä–µ–∑ —Å—Ç–æ—Ä–æ–Ω–Ω—é—é –ø—Ä–æ–≥—Ä–∞–º–º—É)
                ‚Ä¢ –î–≤–∞ –æ–∫–Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
                
                üéÆ –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã:
                ‚Ä¢ –ü—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–µ ‚Üí –ø–µ—Ä–µ—Ö–æ–¥ –∫ –¥—Ä—É–≥–æ–º—É –æ–∫–Ω—É —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–æ–π
                ‚Ä¢ –ü—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ ‚Üí —É–¥–≤–æ–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ –≤ –¥—Ä—É–≥–æ–º –æ–∫–Ω–µ  
                ‚Ä¢ –ü–æ—Å–ª–µ 2 –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π –ø–æ–¥—Ä—è–¥ ‚Üí —Å–º–µ–Ω–∞ —Ü–≤–µ—Ç–∞ –∫—É–±–∏–∫–∞
                
                ‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ:
                –≠—Ç–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –Ω–µ–±–æ–ª—å—à–∏—Ö —Å—Ç–∞–≤–∫–∞—Ö.
            """.trimIndent())
            .setPositiveButton("–ü–æ–Ω—è—Ç–Ω–æ") { dialog, _ -> dialog.dismiss() }
            .show()
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–æ–π–Ω—ã–º —Ä–µ–∂–∏–º–æ–º
     */
    private fun startDualModeActivity() {
        Log.d("MainActivity", "–ó–∞–ø—É—Å–∫ DualModeControlActivity")
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∏ –ù–ï –Ω—É–∂–Ω—ã - –ø—Ä–æ—Å—Ç–æ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        // –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –°–¢–ê–†–¢ –≤ overlay
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–æ–π–Ω—ã–º —Ä–µ–∂–∏–º–æ–º
        val intent = Intent(this, com.example.diceautobet.ui.DualModeControlActivity::class.java)
        startActivity(intent)
    }
    
    /**
     * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ò–ò
     */
    private fun openAIConfiguration() {
        val dialogView = layoutInflater.inflate(R.layout.dialog_ai_settings, null)
        
        // –≠–ª–µ–º–µ–Ω—Ç—ã –¥–∏–∞–ª–æ–≥–∞
        val spinnerRecognitionMode = dialogView.findViewById<AutoCompleteTextView>(R.id.spinnerRecognitionMode)
        val spinnerOpenRouterModel = dialogView.findViewById<AutoCompleteTextView>(R.id.spinnerOpenRouterModel)
        val etOpenRouterApiKey = dialogView.findViewById<com.google.android.material.textfield.TextInputEditText>(R.id.etOpenRouterApiKey)
        val tvApiKeyStatus = dialogView.findViewById<TextView>(R.id.tvApiKeyStatus)
        val tvDescription = dialogView.findViewById<TextView>(R.id.tvDescription)
        val tvStatistics = dialogView.findViewById<TextView>(R.id.tvStatistics)
        val btnTestOpenRouter = dialogView.findViewById<com.google.android.material.button.MaterialButton>(R.id.btnTestOpenRouter)
        val btnSaveAISettings = dialogView.findViewById<com.google.android.material.button.MaterialButton>(R.id.btnSaveAISettings)
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        val currentMode = prefsManager.getRecognitionMode()
        val currentOpenRouterKey = prefsManager.getOpenRouterApiKey()
        val currentModel = prefsManager.getOpenRouterModel()
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ —Ä–µ–∂–∏–º–æ–≤
        val modes = arrayOf("OpenCV (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π)", "OpenRouter", "–ì–∏–±—Ä–∏–¥–Ω—ã–π (OpenCV + OpenRouter)")
        val adapter = ArrayAdapter(this, android.R.layout.simple_dropdown_item_1line, modes)
        spinnerRecognitionMode.setAdapter(adapter)
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π OpenRouter
        val models = arrayOf(
            "Claude 4.5",
            "ChatGPT 5",
            "Gemini 2.5 Flash-Lite"
        )
        val modelAdapter = ArrayAdapter(this, android.R.layout.simple_dropdown_item_1line, models)
        spinnerOpenRouterModel.setAdapter(modelAdapter)
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º
        when (currentMode) {
            PreferencesManager.RecognitionMode.OPENCV -> spinnerRecognitionMode.setText(modes[0], false)
            PreferencesManager.RecognitionMode.OPENROUTER -> spinnerRecognitionMode.setText(modes[1], false)
            PreferencesManager.RecognitionMode.HYBRID -> spinnerRecognitionMode.setText(modes[2], false)
            PreferencesManager.RecognitionMode.OPENAI,
            PreferencesManager.RecognitionMode.GEMINI -> {
                // –£–°–¢–ê–†–ï–í–®–ò–ï —Ä–µ–∂–∏–º—ã - –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ OpenRouter
                spinnerRecognitionMode.setText(modes[1], false)
            }
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å
        when (currentModel) {
            PreferencesManager.OpenRouterModel.CLAUDE_45 -> spinnerOpenRouterModel.setText(models[0], false)
            PreferencesManager.OpenRouterModel.CHATGPT_5 -> spinnerOpenRouterModel.setText(models[1], false)
            PreferencesManager.OpenRouterModel.GEMINI_25_FLASH_LITE -> spinnerOpenRouterModel.setText(models[2], false)
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π API –∫–ª—é—á
        etOpenRouterApiKey.setText(currentOpenRouterKey)
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        updateOpenRouterDialogStatus(tvApiKeyStatus, tvStatistics, currentOpenRouterKey, currentModel)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –∫–ª—é—á —É–∂–µ –µ—Å—Ç—å
        btnTestOpenRouter.isEnabled = currentOpenRouterKey.startsWith("sk-or-") && currentOpenRouterKey.length > 20
        Log.d("MainActivity", "üîë –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: API –∫–ª—é—á ${if (btnTestOpenRouter.isEnabled) "–≤–∞–ª–∏–¥–µ–Ω" else "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç/–Ω–µ–≤–∞–ª–∏–¥–µ–Ω"}")
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è OpenRouter API –∫–ª—é—á–∞
        etOpenRouterApiKey.addTextChangedListener(object : android.text.TextWatcher {
            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}
            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {}
            override fun afterTextChanged(s: android.text.Editable?) {
                val apiKey = s?.toString() ?: ""
                updateOpenRouterDialogStatus(tvApiKeyStatus, tvStatistics, apiKey, currentModel)
                btnTestOpenRouter.isEnabled = apiKey.startsWith("sk-or-") && apiKey.length > 20
                Log.d("MainActivity", "üîë API –∫–ª—é—á –∏–∑–º–µ–Ω—ë–Ω, –∫–Ω–æ–ø–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${if (btnTestOpenRouter.isEnabled) "–≤–∫–ª—é—á–µ–Ω–∞" else "–≤—ã–∫–ª—é—á–µ–Ω–∞"}")
            }
        })
        
        // –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥
        val dialog = androidx.appcompat.app.AlertDialog.Builder(this)
            .setView(dialogView)
            .setCancelable(true)
            .create()
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        btnTestOpenRouter.setOnClickListener {
            Log.d("MainActivity", "üß™ –ö–Ω–æ–ø–∫–∞ '–¢–µ—Å—Ç API' –Ω–∞–∂–∞—Ç–∞")
            
            val apiKey = etOpenRouterApiKey.text?.toString() ?: ""
            Log.d("MainActivity", "üîë API –∫–ª—é—á: ${apiKey.take(10)}... (–¥–ª–∏–Ω–∞: ${apiKey.length})")
            
            if (!apiKey.startsWith("sk-or-") || apiKey.length < 20) {
                Log.w("MainActivity", "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π API –∫–ª—é—á")
                android.widget.Toast.makeText(this, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π API –∫–ª—é—á OpenRouter", android.widget.Toast.LENGTH_SHORT).show()
                return@setOnClickListener
            }
            
            // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞
            btnTestOpenRouter.isEnabled = false
            btnTestOpenRouter.text = "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ..."
            Log.d("MainActivity", "‚è≥ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç API...")
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å
            val selectedModelText = spinnerOpenRouterModel.text.toString()
            Log.d("MainActivity", "ü§ñ –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: $selectedModelText")
            
            val selectedModel = when (selectedModelText) {
                models[0] -> com.example.diceautobet.recognition.OpenRouterDiceRecognizer.Model.CLAUDE_45
                models[1] -> com.example.diceautobet.recognition.OpenRouterDiceRecognizer.Model.CHATGPT_5
                else -> com.example.diceautobet.recognition.OpenRouterDiceRecognizer.Model.GEMINI_25_FLASH_LITE
            }
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –≤ –∫–æ—Ä—É—Ç–∏–Ω–µ
            lifecycleScope.launchWhenStarted {
                try {
                    Log.d("MainActivity", "üöÄ –°–æ–∑–¥–∞—ë–º OpenRouterDiceRecognizer...")
                    val recognizer = com.example.diceautobet.recognition.OpenRouterDiceRecognizer(apiKey)
                    
                    Log.d("MainActivity", "üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å...")
                    val (success, message) = recognizer.testApiConnection(selectedModel)
                    
                    Log.d("MainActivity", "üß™ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ API: success=$success, message=$message")
                    
                    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
                    btnTestOpenRouter.isEnabled = true
                    btnTestOpenRouter.text = "–¢–µ—Å—Ç API"
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    android.widget.Toast.makeText(this@MainActivity, message, android.widget.Toast.LENGTH_LONG).show()
                } catch (e: Exception) {
                    Log.e("MainActivity", "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API: ${e.message}", e)
                    btnTestOpenRouter.isEnabled = true
                    btnTestOpenRouter.text = "–¢–µ—Å—Ç API"
                    android.widget.Toast.makeText(this@MainActivity, "‚ùå –û—à–∏–±–∫–∞: ${e.message}", android.widget.Toast.LENGTH_LONG).show()
                }
            }
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        btnSaveAISettings.setOnClickListener {
            val openRouterKey = etOpenRouterApiKey.text?.toString() ?: ""
            
            val selectedMode = when (spinnerRecognitionMode.text.toString()) {
                modes[1] -> PreferencesManager.RecognitionMode.OPENROUTER
                modes[2] -> PreferencesManager.RecognitionMode.HYBRID
                else -> PreferencesManager.RecognitionMode.OPENCV
            }
            
            val selectedModel = when (spinnerOpenRouterModel.text.toString()) {
                models[0] -> PreferencesManager.OpenRouterModel.CLAUDE_45
                models[1] -> PreferencesManager.OpenRouterModel.CHATGPT_5
                else -> PreferencesManager.OpenRouterModel.GEMINI_25_FLASH_LITE
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            prefsManager.saveOpenRouterApiKey(openRouterKey)
            prefsManager.saveOpenRouterModel(selectedModel)
            prefsManager.saveRecognitionMode(selectedMode)
            prefsManager.saveAIProvider(PreferencesManager.AIProvider.OPENROUTER)
            
            android.widget.Toast.makeText(this, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã (OpenRouter: ${selectedModel.displayName})", android.widget.Toast.LENGTH_SHORT).show()
            Log.d("MainActivity", "AI –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: mode=$selectedMode, model=${selectedModel.displayName}")
            
            dialog.dismiss()
        }
        
        dialog.show()
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≤ –¥–∏–∞–ª–æ–≥–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ OpenRouter
     */
    private fun updateOpenRouterDialogStatus(
        statusView: TextView, 
        statsView: TextView, 
        apiKey: String, 
        model: PreferencesManager.OpenRouterModel
    ) {
        // –°—Ç–∞—Ç—É—Å API –∫–ª—é—á–∞
        when {
            apiKey.isEmpty() -> {
                statusView.text = "‚ùå API –∫–ª—é—á –Ω–µ –≤–≤–µ–¥–µ–Ω"
                statusView.setTextColor(getColor(android.R.color.holo_red_dark))
            }
            apiKey.startsWith("sk-or-") && apiKey.length > 20 -> {
                statusView.text = "‚úÖ OpenRouter –∫–ª—é—á –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π"
                statusView.setTextColor(getColor(android.R.color.holo_green_dark))
            }
            else -> {
                statusView.text = "‚ö†Ô∏è API –∫–ª—é—á –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π"
                statusView.setTextColor(getColor(android.R.color.holo_orange_dark))
            }
        }
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        val currentMode = prefsManager.getRecognitionMode()
        val modeName = when (currentMode) {
            PreferencesManager.RecognitionMode.OPENCV -> "OpenCV (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π)"
            PreferencesManager.RecognitionMode.OPENROUTER -> "OpenRouter"
            PreferencesManager.RecognitionMode.HYBRID -> "–ì–∏–±—Ä–∏–¥–Ω—ã–π"
            else -> "OpenCV (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
        }
        
        statsView.text = """
            –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: $modeName
            –ú–æ–¥–µ–ª—å: ${model.displayName}
            OpenRouter –Ω–∞—Å—Ç—Ä–æ–µ–Ω: ${if (apiKey.startsWith("sk-or-")) "–î–∞" else "–ù–µ—Ç"}
        """.trimIndent()
    }
    
    /**
     * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä—É
     */
    private fun testProxyConnection() {
        val connectionType = if (ProxyManager.isProxyEnabled()) "–ø—Ä–æ–∫—Å–∏" else "VPN/–ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        val progressDialog = MaterialAlertDialogBuilder(this)
            .setTitle("üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
            .setMessage("–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ $connectionType...")
            .setCancelable(false)
            .show()
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –≤ –∫–æ—Ä—É—Ç–∏–Ω–µ
        lifecycleScope.launch {
            try {
                val result = ProxyManager.testConnection()
                
                progressDialog.dismiss()
                
                when (result) {
                    is ProxyManager.ProxyTestResult.Success -> {
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        prefsManager.saveLastProxyTestResult(
                            success = true,
                            message = "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ (${result.duration}–º—Å)"
                        )
                        
                        // –ò–∑–≤–ª–µ–∫–∞–µ–º IP –∏–∑ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        val displayInfo = try {
                            when {
                                result.response.contains("\"ip\"") -> {
                                    val ip = result.response.substringAfter("\"ip\":\"").substringBefore("\"")
                                    "IP: $ip"
                                }
                                result.response.contains("origin") -> {
                                    val ip = result.response.substringAfter("\"origin\":\"").substringBefore("\"")
                                    "IP: $ip"
                                }
                                else -> "–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω"
                            }
                        } catch (e: Exception) {
                            "–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω"
                        }
                        
                        val title = if (ProxyManager.isProxyEnabled()) "‚úÖ –ü—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!" else "‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!"
                        MaterialAlertDialogBuilder(this@MainActivity)
                            .setTitle(title)
                            .setMessage("""
                                –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ $connectionType —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.
                                
                                ‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: ${result.duration} –º—Å
                                üåç –í–Ω–µ—à–Ω–∏–π –∞–¥—Ä–µ—Å: $displayInfo
                                ÔøΩ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: ${ProxyManager.getCurrentConnectionInfo()}
                                
                                –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∫ AI API —Ç–µ–ø–µ—Ä—å –±—É–¥—É—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä.
                                VPN –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω!
                            """.trimIndent())
                            .setPositiveButton("OK", null)
                            .show()
                    }
                    is ProxyManager.ProxyTestResult.Error -> {
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—à–∏–±–∫–∏
                        prefsManager.saveLastProxyTestResult(
                            success = false,
                            message = result.message
                        )
                        
                        MaterialAlertDialogBuilder(this@MainActivity)
                            .setTitle("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏")
                            .setMessage("""
                                –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä—É.
                                
                                üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:
                                ${result.message}
                                
                                üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
                                ‚Ä¢ –ü—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                                ‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                                ‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º
                                
                                –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
                            """.trimIndent())
                            .setPositiveButton("OK", null)
                            .show()
                    }
                }
            } catch (e: Exception) {
                progressDialog.dismiss()
                Log.e("MainActivity", "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏", e)
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏
                prefsManager.saveLastProxyTestResult(
                    success = false,
                    message = "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${e.message}"
                )
                
                MaterialAlertDialogBuilder(this@MainActivity)
                    .setTitle("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞")
                    .setMessage("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏:\n\n${e.message}")
                    .setPositiveButton("OK", null)
                    .show()
            }
        }
    }
    
    // === –ú–ï–¢–û–î–´ –û–î–ò–ù–û–ß–ù–û–ì–û –†–ï–ñ–ò–ú–ê ===
    
    /**
     * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
     */
    private fun openSingleModeSettings() {
        try {
            Log.d("MainActivity", "–ó–∞–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞")
            
            val intent = Intent(this, com.example.diceautobet.ui.SingleModeSettingsActivity::class.java)
            startActivity(intent)
            
            gameLogger.logUserAction("–û—Ç–∫—Ä—ã—Ç—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞")
            
        } catch (e: Exception) {
            Log.e("MainActivity", "–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞", e)
            Toast.makeText(this, "–û—à–∏–±–∫–∞: ${e.message}", Toast.LENGTH_SHORT).show()
        }
    }
    
    /**
     * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –æ–±–ª–∞—Å—Ç–µ–π –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
     */
    private fun openSingleModeAreaConfiguration() {
        try {
            Log.d("MainActivity", "–ó–∞–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–ª–∞—Å—Ç–µ–π –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞")
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–≤–µ—Ä—Ö –¥—Ä—É–≥–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
            if (!Settings.canDrawOverlays(this)) {
                Log.w("MainActivity", "–ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–≤–µ—Ä—Ö –¥—Ä—É–≥–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π")
                showOverlayPermissionDialog {
                    // –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
                    startSingleModeAreaConfiguration()
                }
                return
            }
            
            startSingleModeAreaConfiguration()
            
        } catch (e: Exception) {
            Log.e("MainActivity", "–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–ª–∞—Å—Ç–µ–π –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞", e)
            Toast.makeText(this, "–û—à–∏–±–∫–∞: ${e.message}", Toast.LENGTH_SHORT).show()
        }
    }
    
    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–ª–∞—Å—Ç–µ–π –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
     */
    private fun startSingleModeAreaConfiguration() {
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–ª–∞—Å—Ç–µ–π —Å –ø–µ—Ä–≤–æ–π –æ–±–ª–∞—Å—Ç–∏
        com.example.diceautobet.ui.SingleModeAreaConfigService.configureArea(
            this, 
            SingleModeAreaType.DICE_AREA
        )
        
        gameLogger.logUserAction("–ó–∞–ø—É—â–µ–Ω —Å–µ—Ä–≤–∏—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–ª–∞—Å—Ç–µ–π –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞")
        
        // –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å overlay
        moveTaskToBack(true)
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–≤–µ—Ä—Ö –¥—Ä—É–≥–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
     */
    private fun showOverlayPermissionDialog(onPermissionGranted: () -> Unit) {
        MaterialAlertDialogBuilder(this)
            .setTitle("–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ")
            .setMessage("–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–ª–∞—Å—Ç–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–≤–µ—Ä—Ö –¥—Ä—É–≥–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.")
            .setPositiveButton("–û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏") { _, _ ->
                val intent = Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION)
                startActivity(intent)
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—É–¥–µ—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ
            }
            .setNegativeButton("–û—Ç–º–µ–Ω–∞") { dialog, _ -> dialog.dismiss() }
            .show()
    }
    
    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–¥–∏–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º –∏–≥—Ä—ã
     */
    private fun startSingleMode() {
        try {
            Log.d("MainActivity", "–ó–∞–ø—É—Å–∫ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞")
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
            if (!hasOverlayPermission()) {
                Toast.makeText(this, "–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–≤–µ—Ä—Ö –¥—Ä—É–≥–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π", Toast.LENGTH_LONG).show()
                requestOverlayPermission()
                return
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            val prefs = getSharedPreferences("single_mode_prefs", MODE_PRIVATE)
            val singleModeEnabled = prefs.getBoolean("single_mode_enabled", false)
            
            if (!singleModeEnabled) {
                Toast.makeText(this, "–°–Ω–∞—á–∞–ª–∞ –≤–∫–ª—é—á–∏—Ç–µ –æ–¥–∏–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º", Toast.LENGTH_SHORT).show()
                return
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ª–∏ –æ–±–ª–∞—Å—Ç–∏
            if (!areSingleModeAreasConfigured()) {
                MaterialAlertDialogBuilder(this)
                    .setTitle("–û–±–ª–∞—Å—Ç–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
                    .setMessage("–î–ª—è —Ä–∞–±–æ—Ç—ã –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–±–ª–∞—Å—Ç–∏. –û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å–µ–π—á–∞—Å?")
                    .setPositiveButton("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å") { _, _ ->
                        openSingleModeAreaConfiguration()
                    }
                    .setNegativeButton("–û—Ç–º–µ–Ω–∞", null)
                    .show()
                return
            }
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º OverlayService –≤ —Ä–µ–∂–∏–º–µ –æ–¥–∏–Ω–æ—á–Ω–æ–π –∏–≥—Ä—ã
            val serviceIntent = Intent(this, OverlayService::class.java).apply {
                putExtra("MODE", "SINGLE_MODE")
                putExtra("AUTO_START", true)
            }
            
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                startForegroundService(serviceIntent)
            } else {
                startService(serviceIntent)
            }
            
            gameLogger.logUserAction("–ó–∞–ø—É—â–µ–Ω –æ–¥–∏–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º –∏–≥—Ä—ã")
            Toast.makeText(this, "–û–¥–∏–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º –∑–∞–ø—É—â–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–ª–∞–≤–∞—é—â–µ–µ –æ–∫–Ω–æ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.", Toast.LENGTH_LONG).show()
            
        } catch (e: Exception) {
            Log.e("MainActivity", "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞", e)
            Toast.makeText(this, "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: ${e.message}", Toast.LENGTH_SHORT).show()
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ª–∏ –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
     */
    private fun areSingleModeAreasConfigured(): Boolean {
        return prefsManager.areAllSingleModeAreasConfigured()
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
     */
    private fun updateSingleModeButtonsState() {
        val prefs = getSharedPreferences("single_mode_prefs", MODE_PRIVATE)
        val singleModeEnabled = prefs.getBoolean("single_mode_enabled", false)
        val hasOverlay = hasOverlayPermission()
        
        // –ö–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ–≥–¥–∞
        binding.btnConfigureSingleMode?.isEnabled = true
        binding.btnConfigureSingleAreas?.isEnabled = true
        
        // –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ –∏ –Ω–∞–ª–∏—á–∏–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
        binding.btnStartSingleMode?.isEnabled = singleModeEnabled && hasOverlay
        
        Log.d("MainActivity", "–ö–Ω–æ–ø–∫–∏ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: enabled=$singleModeEnabled, hasOverlay=$hasOverlay")
    }
}