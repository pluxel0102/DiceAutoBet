package com.example.diceautobet.ui

import android.content.Intent
import android.os.Bundle
import android.provider.Settings
import android.util.Log
import android.view.View
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.core.content.ContextCompat
import com.example.diceautobet.R
import com.example.diceautobet.databinding.ActivityDualModeAreaConfigBinding
import com.example.diceautobet.managers.DualWindowAreaManager
import com.example.diceautobet.models.WindowType
import com.example.diceautobet.models.SplitScreenType
import com.example.diceautobet.services.AreaConfigurationService
import com.example.diceautobet.utils.SplitScreenUtils
import com.example.diceautobet.utils.PreferencesManager
import com.google.android.material.dialog.MaterialAlertDialogBuilder

/**
 * –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–ª–∞—Å—Ç–µ–π –≤ –¥–≤–æ–π–Ω–æ–º —Ä–µ–∂–∏–º–µ
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è –ª–µ–≤–æ–≥–æ –∏ –ø—Ä–∞–≤–æ–≥–æ –æ–∫–Ω–∞
 */
class DualModeAreaConfigActivity : AppCompatActivity() {
    
    companion object {
        private const val TAG = "DualModeAreaConfig"
    }
    
    private lateinit var binding: ActivityDualModeAreaConfigBinding
    private lateinit var areaManager: DualWindowAreaManager
    private lateinit var prefsManager: PreferencesManager
    private var splitScreenType: SplitScreenType = SplitScreenType.HORIZONTAL
    private var firstWindowType: WindowType = WindowType.LEFT
    private var secondWindowType: WindowType = WindowType.RIGHT
    
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        
        binding = ActivityDualModeAreaConfigBinding.inflate(layoutInflater)
        setContentView(binding.root)
        
        areaManager = DualWindowAreaManager(this)
        prefsManager = PreferencesManager(this)
        
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–≤–æ–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        val dualModeSettings = prefsManager.getDualModeSettings()
        splitScreenType = dualModeSettings.splitScreenType
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã –æ–∫–æ–Ω –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        val windowTypes = SplitScreenUtils.getWindowTypes(splitScreenType)
        firstWindowType = windowTypes.first
        secondWindowType = windowTypes.second
        
        setupUI()
        updateStatusDisplay()
        
        Log.d(TAG, "DualModeAreaConfigActivity —Å–æ–∑–¥–∞–Ω–∞, —Ç–∏–ø —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è: $splitScreenType")
    }
    
    private fun setupUI() {
        setupToolbar()
        setupButtons()
        checkSplitScreenSupport()
    }
    
    private fun setupToolbar() {
        binding.toolbar.title = "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–ª–∞—Å—Ç–µ–π –¥–ª—è –¥–≤–æ–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"
        setSupportActionBar(binding.toolbar)
        supportActionBar?.setDisplayHomeAsUpEnabled(true)
    }
    
    private fun setupButtons() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        when (splitScreenType) {
            SplitScreenType.HORIZONTAL -> {
                binding.btnConfigureLeftWindow.text = "üîß –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ª–µ–≤–æ–µ –æ–∫–Ω–æ"
                binding.btnConfigureRightWindow.text = "üîß –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∞–≤–æ–µ –æ–∫–Ω–æ"
                binding.btnCopyLeftToRight.text = "üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å: –ª–µ–≤–æ–µ ‚Üí –ø—Ä–∞–≤–æ–µ"
                binding.btnCopyRightToLeft.text = "üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å: –ø—Ä–∞–≤–æ–µ ‚Üí –ª–µ–≤–æ–µ"
            }
            SplitScreenType.VERTICAL -> {
                binding.btnConfigureLeftWindow.text = "üîß –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–µ—Ä—Ö–Ω–µ–µ –æ–∫–Ω–æ"
                binding.btnConfigureRightWindow.text = "üîß –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∏–∂–Ω–µ–µ –æ–∫–Ω–æ"
                binding.btnCopyLeftToRight.text = "üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å: –≤–µ—Ä—Ö–Ω–µ–µ ‚Üí –Ω–∏–∂–Ω–µ–µ"
                binding.btnCopyRightToLeft.text = "üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å: –Ω–∏–∂–Ω–µ–µ ‚Üí –≤–µ—Ä—Ö–Ω–µ–µ"
            }
        }
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–µ–≤–æ–≥–æ –æ–∫–Ω–∞
        binding.btnConfigureLeftWindow.setOnClickListener {
            configureWindow(firstWindowType)
        }
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤–æ–≥–æ –æ–∫–Ω–∞
        binding.btnConfigureRightWindow.setOnClickListener {
            configureWindow(secondWindowType)
        }
        
        // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        binding.btnCopyLeftToRight.setOnClickListener {
            copyAreas(firstWindowType, secondWindowType)
        }
        
        binding.btnCopyRightToLeft.setOnClickListener {
            copyAreas(secondWindowType, firstWindowType)
        }
        
        // –ê–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∞
        binding.btnAutoConfig.setOnClickListener {
            autoConfigureAreas()
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        binding.btnTestConfiguration.setOnClickListener {
            testConfiguration()
        }
    }
    
    private fun checkSplitScreenSupport() {
        val isSupported = SplitScreenUtils.isSplitScreenSupported(this)
        
        if (!isSupported) {
            binding.textSplitScreenStatus.text = "‚ùå –†–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"
            binding.textSplitScreenStatus.setTextColor(ContextCompat.getColor(this, R.color.red))
            
            // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            binding.btnConfigureLeftWindow.isEnabled = false
            binding.btnConfigureRightWindow.isEnabled = false
            binding.btnAutoConfig.isEnabled = false
            
            showSplitScreenWarning()
        } else {
            binding.textSplitScreenStatus.text = "‚úÖ –†–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"
            binding.textSplitScreenStatus.setTextColor(ContextCompat.getColor(this, R.color.green))
        }
    }
    
    private fun showSplitScreenWarning() {
        MaterialAlertDialogBuilder(this)
            .setTitle("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ")
            .setMessage("""
                –í–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω –∏–ª–∏ –∏–º–µ–µ—Ç —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞.
                
                –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:
                ‚Ä¢ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞: 1000x600 –ø–∏–∫—Å–µ–ª–µ–π
                ‚Ä¢ Android 7.0 –∏–ª–∏ –≤—ã—à–µ
                ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Multi-Window
                
                –î–≤–æ–π–Ω–æ–π —Ä–µ–∂–∏–º –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
            """.trimIndent())
            .setPositiveButton("–ü–æ–Ω—è—Ç–Ω–æ") { dialog, _ -> dialog.dismiss() }
            .show()
    }
    
    private fun configureWindow(windowType: WindowType) {
        Log.d(TAG, "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–ª–∞—Å—Ç–µ–π –¥–ª—è –æ–∫–Ω–∞: $windowType")
        
        if (!Settings.canDrawOverlays(this)) {
            showOverlayPermissionDialog()
            return
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–≤–µ—Ä–ª–µ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–ª–∞—Å—Ç–µ–π –ë–ï–ó —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        DualModeAreaConfigService.configureWindow(this, windowType)
        
        // –ù–ï —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ - –æ–≤–µ—Ä–ª–µ–π –ø–æ—è–≤–∏—Ç—Å—è –ø–æ–≤–µ—Ä—Ö
        // moveTaskToBack(true) - —É–±—Ä–∞–Ω–æ
    }
    
    private fun showOverlayPermissionDialog() {
        MaterialAlertDialogBuilder(this)
            .setTitle("–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ")
            .setMessage("–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–ª–∞—Å—Ç–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–≤–µ—Ä—Ö –¥—Ä—É–≥–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.")
            .setPositiveButton("–û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏") { _, _ ->
                val intent = Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION)
                startActivity(intent)
            }
            .setNegativeButton("–û—Ç–º–µ–Ω–∞") { dialog, _ -> dialog.dismiss() }
            .show()
    }
    
    private fun copyAreas(fromWindow: WindowType, toWindow: WindowType) {
        Log.d(TAG, "–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–µ–π –∏–∑ $fromWindow –≤ $toWindow")
        
        try {
            areaManager.copyAreasToWindow(fromWindow, toWindow)
            
            Toast.makeText(
                this,
                "–û–±–ª–∞—Å—Ç–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ ${fromWindow.name} –≤ ${toWindow.name}",
                Toast.LENGTH_SHORT
            ).show()
            
            updateStatusDisplay()
            
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–ª–∞—Å—Ç–µ–π", e)
            Toast.makeText(this, "–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: ${e.message}", Toast.LENGTH_LONG).show()
        }
    }
    
    private fun autoConfigureAreas() {
        Log.d(TAG, "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–ª–∞—Å—Ç–µ–π")
        
        try {
            areaManager.autoConfigureAreas()
            
            Toast.makeText(this, "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞", Toast.LENGTH_SHORT).show()
            updateStatusDisplay()
            
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∏", e)
            Toast.makeText(this, "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∏: ${e.message}", Toast.LENGTH_LONG).show()
        }
    }
    
    private fun testConfiguration() {
        Log.d(TAG, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        
        val status = areaManager.getConfigurationStatus()
        val message = StringBuilder()
        
        message.append("üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n")
        
        // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
        if (status.splitScreenSupported) {
            message.append("‚úÖ –†–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω: –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è\n")
        } else {
            message.append("‚ùå –†–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω: –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è\n")
        }
        
        // –õ–µ–≤–æ–µ –æ–∫–Ω–æ
        if (status.leftWindowConfigured) {
            message.append("‚úÖ –õ–µ–≤–æ–µ –æ–∫–Ω–æ: –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ (${status.leftAreasCount} –æ–±–ª–∞—Å—Ç–µ–π)\n")
        } else {
            message.append("‚ùå –õ–µ–≤–æ–µ –æ–∫–Ω–æ: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ\n")
        }
        
        // –ü—Ä–∞–≤–æ–µ –æ–∫–Ω–æ
        if (status.rightWindowConfigured) {
            message.append("‚úÖ –ü—Ä–∞–≤–æ–µ –æ–∫–Ω–æ: –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ (${status.rightAreasCount} –æ–±–ª–∞—Å—Ç–µ–π)\n")
        } else {
            message.append("‚ùå –ü—Ä–∞–≤–æ–µ –æ–∫–Ω–æ: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ\n")
        }
        
        // –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        message.append("\n")
        if (status.readyForDualMode) {
            message.append("üéØ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: –ì–û–¢–û–í –ö –†–ê–ë–û–¢–ï")
        } else {
            message.append("‚ö†Ô∏è –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: –¢–†–ï–ë–£–ï–¢–°–Ø –ù–ê–°–¢–†–û–ô–ö–ê")
        }
        
        MaterialAlertDialogBuilder(this)
            .setTitle("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            .setMessage(message.toString())
            .setPositiveButton("OK") { dialog, _ -> dialog.dismiss() }
            .show()
    }
    
    private fun updateStatusDisplay() {
        val status = areaManager.getConfigurationStatus()
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ª–µ–≤–æ–≥–æ –æ–∫–Ω–∞
        if (status.leftWindowConfigured) {
            binding.textLeftWindowStatus.text = "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ (${status.leftAreasCount} –æ–±–ª–∞—Å—Ç–µ–π)"
            binding.textLeftWindowStatus.setTextColor(ContextCompat.getColor(this, R.color.green))
            binding.btnCopyLeftToRight.isEnabled = true
        } else {
            binding.textLeftWindowStatus.text = "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
            binding.textLeftWindowStatus.setTextColor(ContextCompat.getColor(this, R.color.red))
            binding.btnCopyLeftToRight.isEnabled = false
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∞–≤–æ–≥–æ –æ–∫–Ω–∞
        if (status.rightWindowConfigured) {
            binding.textRightWindowStatus.text = "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ (${status.rightAreasCount} –æ–±–ª–∞—Å—Ç–µ–π)"
            binding.textRightWindowStatus.setTextColor(ContextCompat.getColor(this, R.color.green))
            binding.btnCopyRightToLeft.isEnabled = true
        } else {
            binding.textRightWindowStatus.text = "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
            binding.textRightWindowStatus.setTextColor(ContextCompat.getColor(this, R.color.red))
            binding.btnCopyRightToLeft.isEnabled = false
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        if (status.readyForDualMode) {
            binding.textReadyStatus.text = "üéØ –ì–û–¢–û–í –ö –†–ê–ë–û–¢–ï"
            binding.textReadyStatus.setTextColor(ContextCompat.getColor(this, R.color.green))
        } else {
            binding.textReadyStatus.text = "‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –ù–ê–°–¢–†–û–ô–ö–ê"
            binding.textReadyStatus.setTextColor(ContextCompat.getColor(this, R.color.orange))
        }
    }
    
    override fun onResume() {
        super.onResume()
        updateStatusDisplay()
    }
    
    override fun onSupportNavigateUp(): Boolean {
        onBackPressed()
        return true
    }
}
