package com.example.diceautobet.ui

import android.animation.ValueAnimator
import android.content.ClipData
import android.content.ClipboardManager
import android.content.ComponentName
import android.content.Context
import android.content.Intent
import android.content.ServiceConnection
import android.graphics.Color
import android.net.Uri
import android.os.Bundle
import android.os.IBinder
import android.provider.Settings
import android.util.Log
import android.view.animation.DecelerateInterpolator
import android.widget.Toast
import androidx.appcompat.app.AlertDialog
import androidx.appcompat.app.AppCompatActivity
import androidx.core.content.ContextCompat
import androidx.lifecycle.lifecycleScope
import com.example.diceautobet.R
import com.example.diceautobet.models.*
import com.example.diceautobet.managers.DualWindowAreaManager
import com.example.diceautobet.services.DualModeService
import com.example.diceautobet.services.DualModeFloatingControlService
import com.example.diceautobet.timing.PerformanceStats
import com.example.diceautobet.sync.SyncStats
import com.example.diceautobet.databinding.ActivityDualModeControlBinding
import kotlinx.coroutines.*
import java.io.File

/**
 * –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–æ–π–Ω—ã–º —Ä–µ–∂–∏–º–æ–º
 * –†–∞–±–æ—Ç–∞–µ—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π SimpleDualModeController
 */
class DualModeControlActivity : AppCompatActivity() {
    
    companion object {
        private const val TAG = "DualModeControlActivity"
        private const val STATS_UPDATE_INTERVAL = 1000L // 1 —Å–µ–∫—É–Ω–¥–∞
    }
    
    private lateinit var binding: ActivityDualModeControlBinding
    private var dualModeService: DualModeService? = null
    private var dualWindowAreaManager: DualWindowAreaManager? = null
    private var bound = false
    
    // –ö–æ—Ä—É—Ç–∏–Ω—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    private val uiScope = CoroutineScope(Dispatchers.Main + SupervisorJob())
    private var statsUpdateJob: Job? = null
    
    // –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    private var currentGameState: SimpleDualModeState? = null
    
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–∏—Å—É
    private val connection = object : ServiceConnection {
        override fun onServiceConnected(className: ComponentName, service: IBinder) {
            Log.d(TAG, "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ DualModeService")
            val binder = service as DualModeService.LocalBinder
            dualModeService = binder.getService()
            bound = true
            
            Log.d(TAG, "–°–µ—Ä–≤–∏—Å –ø–æ–¥–∫–ª—é—á–µ–Ω, –≤—ã–∑—ã–≤–∞–µ–º setupServiceListeners")
            setupServiceListeners()
            
            Log.d(TAG, "–í—ã–∑—ã–≤–∞–µ–º loadInitialData")
            loadInitialData()
            
            Log.d(TAG, "–ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
            // –ù–µ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞ ‚ñ∂
            // startRealTimeUpdates()
        }
        
        override fun onServiceDisconnected(arg0: ComponentName) {
            Log.d(TAG, "–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç DualModeService")
            bound = false
            dualModeService = null
            dualWindowAreaManager = null
            stopRealTimeUpdates()
            enableUI(false)
        }
    }
    
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        
        Log.d(TAG, "=== DualModeControlActivity.onCreate() –≤—ã–∑–≤–∞–Ω ===")
        
        binding = ActivityDualModeControlBinding.inflate(layoutInflater)
        setContentView(binding.root)
        
        // –ù–ï –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DualWindowAreaManager –≤ onCreate() - —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
        Log.d(TAG, "DualWindowAreaManager –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏")
        
        Log.d(TAG, "–í—ã–∑—ã–≤–∞–µ–º setupUI()")
        setupUI()
        
        Log.d(TAG, "–í—ã–∑—ã–≤–∞–µ–º bindService()")
        bindService()
        
        Log.d(TAG, "DualModeControlActivity —Å–æ–∑–¥–∞–Ω–∞")
    }
    
    override fun onDestroy() {
        super.onDestroy()
        stopRealTimeUpdates()
        unbindService()
        uiScope.cancel()
    }
    
    override fun onResume() {
        super.onResume()
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ overlay –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ –≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        checkOverlayPermissionStatus()
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–≤–µ—Ä—Ö –¥—Ä—É–≥–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
     */
    private fun checkOverlayPermissionStatus() {
        if (Settings.canDrawOverlays(this)) {
            Log.d(TAG, "–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ overlay –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ")
            showStatusMessage("–†–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", true)
        } else {
            Log.w(TAG, "–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ overlay –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ")
            showStatusMessage("–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –ø–ª–∞–≤–∞—é—â–∏—Ö –æ–∫–æ–Ω", false)
        }
    }
    
    // === –ù–ê–°–¢–†–û–ô–ö–ê UI ===
    
    /**
     * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
     */
    private fun setupUI() {
        Log.d(TAG, "setupUI() –Ω–∞—á–∞–ª—Å—è")
        setupToolbar()
        setupControlButtons()
        setupStrategySelector()
        setupSettingsPanel()
        setupStatisticsPanel()
        setupPerformancePanel()
        
        Log.d(TAG, "–í—ã–∑—ã–≤–∞–µ–º enableUI(false) - –æ—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞")
        // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –≤—Å–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–∏—Å—É
        enableUI(false)
        Log.d(TAG, "setupUI() –∑–∞–≤–µ—Ä—à–µ–Ω")
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ç—É–ª–±–∞—Ä
     */
    private fun setupToolbar() {
        binding.toolbar.title = "–î–≤–æ–π–Ω–æ–π —Ä–µ–∂–∏–º"
        binding.toolbar.subtitle = "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–≥—Ä–∞ –Ω–∞ –¥–≤—É—Ö –æ–∫–Ω–∞—Ö"
        setSupportActionBar(binding.toolbar)
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
     */
    private fun setupControlButtons() {
        binding.btnStartDualMode.setOnClickListener {
            startDualMode()
        }
        
        binding.btnStopDualMode.setOnClickListener {
            stopDualMode()
        }
        
        binding.btnSwitchWindow.setOnClickListener {
            switchWindow()
        }
        
        binding.btnOptimizePerformance.setOnClickListener {
            optimizePerformance()
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–ª–∞—Å—Ç–µ–π –¥–ª—è –¥–≤–æ–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        binding.btnConfigureAreas?.setOnClickListener {
            openAreaConfiguration()
        }
        
        // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –∫–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ä—Ç –∞–∫—Ç–∏–≤–Ω–∞, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–µ—Ç
        updateControlButtons(false)
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–µ–ª–µ–∫—Ç–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
     */
    private fun setupStrategySelector() {
        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        // –£–±–∏—Ä–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–∑ UI
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        updateSettingsUI()
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
     */
    private fun setupSettingsPanel() {
        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        // –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        setupDebugImagesSwitch()

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        setupViewDebugImagesButton()
        
        // –°–∫—Ä—ã–≤–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        try {
            binding.sliderMaxLosses?.let { slider ->
                slider.isEnabled = false
                slider.alpha = 0.5f
            }
            binding.radioGroupStrategy?.let { group ->
                group.isEnabled = false
                group.alpha = 0.5f
            }
            binding.switchDualModeEnabled?.let { switch ->
                switch.isChecked = true
                switch.isEnabled = false
                switch.alpha = 0.5f
            }
        } catch (e: Exception) {
            Log.d(TAG, "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –º–∞–∫–µ—Ç–µ: ${e.message}")
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –æ—Ç–ª–∞–¥–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
     */
    private fun setupDebugImagesSwitch() {
        binding.switchDebugImages?.let { switch ->
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            val prefsManager = com.example.diceautobet.utils.PreferencesManager(this)
            switch.isChecked = prefsManager.isDebugImagesEnabled()

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            switch.setOnCheckedChangeListener { _, isChecked ->
                prefsManager.saveDebugImagesEnabled(isChecked)
                Log.d(TAG, "–û—Ç–ª–∞–¥–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ${if (isChecked) "–≤–∫–ª—é—á–µ–Ω–∞" else "–æ—Ç–∫–ª—é—á–µ–Ω–∞"}")

                if (isChecked) {
                    Toast.makeText(this, "üì∏ –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤ Android/data/com.example.diceautobet/files/", Toast.LENGTH_LONG).show()
                } else {
                    Toast.makeText(this, "üì∏ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–æ", Toast.LENGTH_SHORT).show()
                }
            }
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
     */
    private fun setupViewDebugImagesButton() {
        binding.btnViewDebugImages?.setOnClickListener {
            try {
                val externalFilesDir = getExternalFilesDir(null)
                if (externalFilesDir != null) {
                    val geminiDir = File(externalFilesDir, "Gemini_Crops")
                    val debugDir = File(externalFilesDir, "DiceAutoBet_Debug_" + java.text.SimpleDateFormat("yyyyMMdd", java.util.Locale.getDefault()).format(java.util.Date()))

                    val dirs = mutableListOf<File>()
                    if (geminiDir.exists() && geminiDir.listFiles()?.isNotEmpty() == true) {
                        dirs.add(geminiDir)
                    }
                    if (debugDir.exists() && debugDir.listFiles()?.isNotEmpty() == true) {
                        dirs.add(debugDir)
                    }

                    when {
                        dirs.isEmpty() -> {
                            Toast.makeText(this, "üìÅ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í–∫–ª—é—á–∏—Ç–µ –æ—Ç–ª–∞–¥–∫—É –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∞–Ω–∞–ª–∏–∑.", Toast.LENGTH_LONG).show()
                        }
                        dirs.size == 1 -> {
                            openDirectory(dirs[0])
                        }
                        else -> {
                            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏
                            showDirectorySelectionDialog(dirs)
                        }
                    }
                } else {
                    Toast.makeText(this, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ö—Ä–∞–Ω–∏–ª–∏—â—É", Toast.LENGTH_SHORT).show()
                }
            } catch (e: Exception) {
                Log.e(TAG, "–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–ø–∫–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏", e)
                Toast.makeText(this, "‚ùå –û—à–∏–±–∫–∞: ${e.message}", Toast.LENGTH_SHORT).show()
            }
        }
    }

    /**
     * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
     */
    private fun openDirectory(directory: File) {
        try {
            val intent = Intent(Intent.ACTION_VIEW).apply {
                setDataAndType(Uri.fromFile(directory), "resource/folder")
                addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
            }

            // –ï—Å–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É,
            // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ
            if (intent.resolveActivity(packageManager) == null) {
                val path = directory.absolutePath
                val clipboard = getSystemService(Context.CLIPBOARD_SERVICE) as ClipboardManager
                val clip = ClipData.newPlainText("–ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º", path)
                clipboard.setPrimaryClip(clip)

                Toast.makeText(
                    this,
                    "üìã –ü—É—Ç—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä:\n$path\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –¥–∞–Ω–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.",
                    Toast.LENGTH_LONG
                ).show()
            } else {
                startActivity(intent)
                Toast.makeText(this, "üìÇ –û—Ç–∫—Ä—ã—Ç–∞ –ø–∞–ø–∫–∞: ${directory.name}", Toast.LENGTH_SHORT).show()
            }
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏", e)
            val path = directory.absolutePath
            Toast.makeText(this, "üìã –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º: $path", Toast.LENGTH_LONG).show()
        }
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏
     */
    private fun showDirectorySelectionDialog(directories: List<File>) {
        val items = directories.map { it.name }.toTypedArray()
        AlertDialog.Builder(this)
            .setTitle("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏")
            .setItems(items) { _, which ->
                openDirectory(directories[which])
            }
            .setNegativeButton("–û—Ç–º–µ–Ω–∞", null)
            .show()
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    private fun setupStatisticsPanel() {
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ updateStatistics()
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    private fun setupPerformancePanel() {
        // –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ updatePerformanceStats()
    }
    
    // === –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ï–†–í–ò–°–û–ú ===
    
    /**
     * –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —Å–µ—Ä–≤–∏—Å—É
     */
    private fun bindService() {
        Log.d(TAG, "bindService() –Ω–∞—á–∞–ª—Å—è - –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ DualModeService")
        val intent = Intent(this, DualModeService::class.java)
        val result = bindService(intent, connection, Context.BIND_AUTO_CREATE)
        Log.d(TAG, "bindService() –∑–∞–≤–µ—Ä—à–µ–Ω, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: $result")
    }
    
    /**
     * –û—Ç–∫–ª—é—á–∞–µ—Ç—Å—è –æ—Ç —Å–µ—Ä–≤–∏—Å–∞
     */
    private fun unbindService() {
        if (bound) {
            Log.d(TAG, "–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç DualModeService")
            unbindService(connection)
            bound = false
        }
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–µ—Ä–≤–∏—Å–∞
     */
    private fun setupServiceListeners() {
        // –í —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–º–µ—Å—Ç–æ —Å–æ–±—ã—Ç–∏–π
        dualModeService?.let { service ->
            Log.d(TAG, "–°–µ—Ä–≤–∏—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–º")
            // service.setOnGameStateChangedListener { gameState ->
            //     currentGameState = gameState
            //     updateGameStateUI(gameState)
            // }
            
            // service.setOnWindowSwitchedListener { windowType ->
            //     updateActiveWindowUI(windowType)
            // }
            
            // service.setOnBetPlacedListener { windowType, betChoice, amount ->
            //     updateBetPlacedUI(windowType, betChoice, amount)
            // }
            
            // service.setOnResultDetectedListener { windowType, result ->
            //     updateResultDetectedUI(windowType, result)
            // }
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
     */
    private fun loadInitialData() {
        dualModeService?.let { service ->
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥
            val currentState = service.getCurrentState()
            Log.d(TAG, "–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞: $currentState")
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –æ–±–ª–∞—Å—Ç–µ–π
            dualWindowAreaManager = DualWindowAreaManager(this)
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            updateSimplifiedGameStateUI(currentState)
            
            enableUI(true)
            
            Log.d(TAG, "–ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, UI –≤–∫–ª—é—á–µ–Ω")
        } ?: run {
            Log.e(TAG, "DualModeService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ loadInitialData")
        }
    }
    
    // === –î–ï–ô–°–¢–í–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===
    
    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–≤–æ–π–Ω–æ–π —Ä–µ–∂–∏–º
     */
    private fun startDualMode() {
        Log.d(TAG, "–ó–∞–ø—É—Å–∫ –¥–≤–æ–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ - –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–≤–µ—Ä—Ö –¥—Ä—É–≥–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
        if (!android.provider.Settings.canDrawOverlays(this)) {
            Log.w(TAG, "–ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–≤–µ—Ä—Ö –¥—Ä—É–≥–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π")
            showStatusMessage("–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –ø–ª–∞–≤–∞—é—â–∏—Ö –æ–∫–æ–Ω", false)
            requestOverlayPermission()
            return
        }
        
        if (dualModeService == null) {
            Log.e(TAG, "DualModeService –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω!")
            showStatusMessage("–°–µ—Ä–≤–∏—Å –Ω–µ –≥–æ—Ç–æ–≤", false)
            return
        }
        
        // –¢–û–õ–¨–ö–û –°–ï–ô–ß–ê–° –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DualWindowAreaManager
        if (dualWindowAreaManager == null) {
            Log.d(TAG, "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DualWindowAreaManager –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏")
            dualWindowAreaManager = DualWindowAreaManager(this)
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ AreaManager
        val areaManager = dualWindowAreaManager
        if (areaManager != null) {
            val configStatus = areaManager.getConfigurationStatus()
            Log.d(TAG, "–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: splitScreen=${configStatus.splitScreenSupported}, " +
                    "${configStatus.firstWindowType}=${configStatus.leftWindowConfigured} (${configStatus.leftAreasCount} –æ–±–ª–∞—Å—Ç–µ–π), " +
                    "${configStatus.secondWindowType}=${configStatus.rightWindowConfigured} (${configStatus.rightAreasCount} –æ–±–ª–∞—Å—Ç–µ–π)")
            
            if (!configStatus.readyForDualMode) {
                Log.w(TAG, "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞")
                showStatusMessage("–ù–µ –≤—Å–µ –æ–±–ª–∞—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã", false)
                return
            }
        } else {
            Log.e(TAG, "DualWindowAreaManager –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å!")
            showStatusMessage("–ú–µ–Ω–µ–¥–∂–µ—Ä –æ–±–ª–∞—Å—Ç–µ–π –Ω–µ –≥–æ—Ç–æ–≤", false)
            return
        }
    // –í–ê–ñ–ù–û: –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∂–∏–º –∑–¥–µ—Å—å. –¢–æ–ª—å–∫–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞–≤–∞—é—â–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å,
    // –∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ä—Ç –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –ø–æ –Ω–∞–∂–∞—Ç–∏—é ‚ñ∂ –≤ overlay.
    Log.d(TAG, "–ù–µ –∑–∞–ø—É—Å–∫–∞–µ–º dualModeService –∑–¥–µ—Å—å ‚Äî —Ç–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–ª–∞–≤–∞—é—â–µ–µ –æ–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞–≤–∞—é—â–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å
    val floatingServiceIntent = Intent(this, DualModeFloatingControlService::class.java)
    startService(floatingServiceIntent)

        // –°—Ç—Ä–∞—Ö–æ–≤–∫–∞: –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–π OverlayService, –µ—Å–ª–∏ –æ–Ω –µ—â–µ —Ä–∞–±–æ—Ç–∞–ª
        try {
            stopService(Intent(this, com.example.diceautobet.services.OverlayService::class.java))
        } catch (_: Exception) { }
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏
        animateButton(binding.btnStartDualMode, Color.GREEN)
        
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ: —Ä–µ–∂–∏–º –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω, –æ–∂–∏–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏—è ‚ñ∂ –≤ overlay
    updateControlButtons(false)
    showStatusMessage("–ü–ª–∞–≤–∞—é—â–µ–µ –æ–∫–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ. –ó–∞–ø—É—Å–∫ –ø–æ –∫–Ω–æ–ø–∫–µ ‚ñ∂", true)
        
        // –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø–µ—Ä–µ–π—Ç–∏ –∫ –Ω—É–∂–Ω–æ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
        moveTaskToBack(true)
        
    Toast.makeText(this, "–ü–ª–∞–≤–∞—é—â–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –Ω—É–∂–Ω–æ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é", Toast.LENGTH_LONG).show()
    }
    
    /**
     * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–≤–æ–π–Ω–æ–π —Ä–µ–∂–∏–º
     */
    private fun stopDualMode() {
        Log.d(TAG, "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–≤–æ–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞")
        
        dualModeService?.stopDualMode()
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏
        animateButton(binding.btnStopDualMode, Color.RED)
        
        updateControlButtons(false)
        showStatusMessage("–î–≤–æ–π–Ω–æ–π —Ä–µ–∂–∏–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", false)
    }
    
    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ
     */
    private fun switchWindow() {
        Log.d(TAG, "–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ–∫–Ω–∞ (–≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)")
        
        // dualModeService?.switchActiveWindow()
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏
        animateButton(binding.btnSwitchWindow, Color.BLUE)
    }
    
    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
     */
    private fun optimizePerformance() {
        Log.d(TAG, "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)")
        
        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º—É–ª—è—Ç–æ—Ä–µ
        val simulatorInfo = dualModeService?.getSimulatorInfo() ?: "–°–∏–º—É–ª—è—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏
        try {
            animateButton(binding.btnOptimizePerformance, Color.CYAN)
        } catch (e: Exception) {
            Log.d(TAG, "–ö–Ω–æ–ø–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${e.message}")
        }
        
        showStatusMessage("–°–∏–º—É–ª—è—Ç–æ—Ä: ${simulatorInfo.lines().firstOrNull() ?: "–ê–∫—Ç–∏–≤–µ–Ω"}", true)
    }
    
    /**
     * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –æ–±–ª–∞—Å—Ç–µ–π –¥–ª—è –¥–≤–æ–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
     */
    private fun openAreaConfiguration() {
        Log.d(TAG, "–û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–ª–∞—Å—Ç–µ–π")
        
        val intent = Intent(this, DualModeAreaConfigActivity::class.java)
        startActivity(intent)
    }
    
    // === –û–ë–ù–û–í–õ–ï–ù–ò–ï –ù–ê–°–¢–†–û–ï–ö (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è) ===
    
    private fun updateStrategy(strategy: DualStrategy) {
        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        Log.d(TAG, "–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è: –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
    }
    
    private fun updateMaxLosses(maxLosses: Int) {
        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        Log.d(TAG, "–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è: –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
    }
    
    private fun updateDualModeEnabled(enabled: Boolean) {
        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –≤—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω–∞
        Log.d(TAG, "–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è: –¥–≤–æ–π–Ω–æ–π —Ä–µ–∂–∏–º –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω")
    }
    
    // === –û–ë–ù–û–í–õ–ï–ù–ò–ï UI ===
    
    /**
     * –í–∫–ª—é—á–∞–µ—Ç/–æ—Ç–∫–ª—é—á–∞–µ—Ç UI
     */
    private fun enableUI(enabled: Boolean) {
        Log.d(TAG, "enableUI($enabled) –≤—ã–∑–≤–∞–Ω")
        binding.btnStartDualMode.isEnabled = enabled
        binding.btnStopDualMode.isEnabled = enabled
        binding.btnSwitchWindow.isEnabled = enabled
        binding.btnOptimizePerformance.isEnabled = enabled
        binding.radioGroupStrategy.isEnabled = enabled
        binding.sliderMaxLosses.isEnabled = enabled
        binding.switchDualModeEnabled.isEnabled = enabled
        Log.d(TAG, "enableUI($enabled) –∑–∞–≤–µ—Ä—à–µ–Ω, btnStartDualMode.isEnabled = ${binding.btnStartDualMode.isEnabled}")
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
     */
    private fun updateControlButtons(isRunning: Boolean) {
        binding.btnStartDualMode.isEnabled = !isRunning
        binding.btnStopDualMode.isEnabled = isRunning
        binding.btnSwitchWindow.isEnabled = isRunning
        binding.btnOptimizePerformance.isEnabled = true
        
        // –¶–≤–µ—Ç–∞ –∫–Ω–æ–ø–æ–∫
        if (isRunning) {
            binding.btnStartDualMode.setBackgroundColor(Color.GRAY)
            binding.btnStopDualMode.setBackgroundColor(ContextCompat.getColor(this, R.color.red))
        } else {
            binding.btnStartDualMode.setBackgroundColor(ContextCompat.getColor(this, R.color.green))
            binding.btnStopDualMode.setBackgroundColor(Color.GRAY)
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç UI —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     */
    private fun updateGameStateUI(gameState: SimpleDualModeState) {
        lifecycleScope.launch {
            // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            binding.textCurrentMode.text = if (gameState.isRunning) "–ê–ö–¢–ò–í–ï–ù" else "–û–°–¢–ê–ù–û–í–õ–ï–ù"
            binding.textCurrentStrategy.text = "–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è"
            binding.textActiveWindow.text = gameState.currentWindow.name
            
            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            binding.textTotalBets.text = gameState.totalBets.toString()
            binding.textTotalProfit.text = "${gameState.totalProfit}"
            binding.textConsecutiveLosses.text = gameState.consecutiveLosses.toString()
            binding.textWaitingForResult.text = "–ù–ï–¢" // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –æ–∂–∏–¥–∞–Ω–∏–µ
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –µ—Å—Ç—å –≤ layout)
            try {
                // –ó–∞–º–µ–Ω—è–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                // binding.textCurrentColor?.text = if (gameState.currentColor == BetChoice.RED) "–ö—Ä–∞—Å–Ω—ã–π" else "–û—Ä–∞–Ω–∂–µ–≤—ã–π"
                // binding.textCurrentBet?.text = "${gameState.currentBet}"
                // binding.textLastResult?.text = when (gameState.lastResult) {
                //     GameResultType.WIN -> "–í—ã–∏–≥—Ä—ã—à"
                //     GameResultType.LOSS -> "–ü—Ä–æ–∏–≥—Ä—ã—à" 
                //     GameResultType.DRAW -> "–ù–∏—á—å—è"
                //     GameResultType.UNKNOWN -> "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                // }
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–º–µ—Å—Ç–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                Log.d(TAG, "–¶–≤–µ—Ç: ${if (gameState.currentColor == BetChoice.RED) "–ö—Ä–∞—Å–Ω—ã–π" else "–û—Ä–∞–Ω–∂–µ–≤—ã–π"}")
                Log.d(TAG, "–°—Ç–∞–≤–∫–∞: ${gameState.currentBet}")
                Log.d(TAG, "–†–µ–∑—É–ª—å—Ç–∞—Ç: ${when (gameState.lastResult) {
                    GameResultType.WIN -> "–í—ã–∏–≥—Ä—ã—à"
                    GameResultType.LOSS -> "–ü—Ä–æ–∏–≥—Ä—ã—à" 
                    GameResultType.DRAW -> "–ü—Ä–æ–∏–≥—Ä—ã—à (–Ω–∏—á—å—è)"
                    GameResultType.UNKNOWN -> "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                }}")
            } catch (e: Exception) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ layout
                Log.d(TAG, "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã UI –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: ${e.message}")
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
            updateControlButtons(gameState.isRunning)
            
            // –¶–≤–µ—Ç —Å—Ç–∞—Ç—É—Å–∞
            val statusColor = if (gameState.isRunning) Color.GREEN else Color.RED
            binding.textCurrentMode.setTextColor(statusColor)
            
            // –¶–≤–µ—Ç –ø—Ä–∏–±—ã–ª–∏
            val profitColor = if (gameState.totalProfit >= 0) Color.GREEN else Color.RED
            binding.textTotalProfit.setTextColor(profitColor)
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç UI –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     */
    private fun updateSimplifiedGameStateUI(state: SimpleDualModeState) {
        try {
            // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            binding.textCurrentMode.text = if (state.isRunning) "–ó–∞–ø—É—â–µ–Ω" else "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            binding.textTotalBets.text = "–°—Ç–∞–≤–æ–∫: ${state.totalBets}"
            binding.textTotalProfit.text = "–ü—Ä–∏–±—ã–ª—å: ${state.totalProfit}"
            
            // –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ (–∑–∞–º–µ–Ω—è–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ)
            // binding.textCurrentBet.text = "–°—Ç–∞–≤–∫–∞: ${state.currentBet}"
            // binding.textCurrentColor.text = "–¶–≤–µ—Ç: ${if (state.currentColor == BetChoice.RED) "–ö—Ä–∞—Å–Ω—ã–π" else "–û—Ä–∞–Ω–∂–µ–≤—ã–π"}"
            // binding.textLastResult.text = "–†–µ–∑—É–ª—å—Ç–∞—Ç: ${when (state.lastResult) {
            //     GameResultType.WIN -> "–í—ã–∏–≥—Ä—ã—à"
            //     GameResultType.LOSS -> "–ü—Ä–æ–∏–≥—Ä—ã—à"
            //     GameResultType.DRAW -> "–ù–∏—á—å—è"
            //     else -> "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            // }}"
            
            // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞–≤–∫–µ
            Log.d(TAG, "–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –°—Ç–∞–≤–∫–∞=${state.currentBet}, –¶–≤–µ—Ç=${if (state.currentColor == BetChoice.RED) "–ö—Ä–∞—Å–Ω—ã–π" else "–û—Ä–∞–Ω–∂–µ–≤—ã–π"}, –†–µ–∑—É–ª—å—Ç–∞—Ç=${when (state.lastResult) {
                GameResultType.WIN -> "–í—ã–∏–≥—Ä—ã—à"
                GameResultType.LOSS -> "–ü—Ä–æ–∏–≥—Ä—ã—à"
                GameResultType.DRAW -> "–ü—Ä–æ–∏–≥—Ä—ã—à (–Ω–∏—á—å—è)"
                else -> "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            }}")
            
            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π
            binding.textConsecutiveLosses?.text = "–ü—Ä–æ–∏–≥—Ä—ã—à–∏ –ø–æ–¥—Ä—è–¥: ${state.consecutiveLosses}"
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
            updateControlButtons(state.isRunning)
            // –ó–∞–ø—É—Å–∫–∞–µ–º/–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤ –∑–∞–ø—É—â–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if (state.isRunning && statsUpdateJob == null) startRealTimeUpdates()
            if (!state.isRunning && statsUpdateJob != null) stopRealTimeUpdates()
            
            // –¶–≤–µ—Ç —Å—Ç–∞—Ç—É—Å–∞
            val statusColor = if (state.isRunning) Color.GREEN else Color.RED
            binding.textCurrentMode.setTextColor(statusColor)
            
            // –¶–≤–µ—Ç –ø—Ä–∏–±—ã–ª–∏
            val profitColor = if (state.totalProfit >= 0) Color.GREEN else Color.RED
            binding.textTotalProfit.setTextColor(profitColor)
            
            Log.d(TAG, "UI –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: $state")
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ UI: ${e.message}")
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç UI –Ω–∞—Å—Ç—Ä–æ–µ–∫ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
     */
    private fun updateSettingsUI() {
        lifecycleScope.launch {
            // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            // –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã –≤ SimpleDualModeController
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–ª–æ–≥–∏—Ä—É–µ–º –≤–º–µ—Å—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)
            try {
                // binding.textStrategyInfo?.text = """
                //     üìã –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è:
                //     ‚Ä¢ –°—Ç–∞—Ä—Ç: –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ (10) –Ω–∞ –∫—Ä–∞—Å–Ω—ã–π –≤ –ª–µ–≤–æ–º –æ–∫–Ω–µ
                //     ‚Ä¢ –í—ã–∏–≥—Ä—ã—à: –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –Ω–∞ —Ç–æ—Ç –∂–µ —Ü–≤–µ—Ç –≤ –ø—Ä–∞–≤–æ–º –æ–∫–Ω–µ
                //     ‚Ä¢ –ü—Ä–æ–∏–≥—Ä—ã—à: —Å—Ç–∞–≤–∫–∞ √ó2 –Ω–∞ —Ç–æ—Ç –∂–µ —Ü–≤–µ—Ç –≤ –¥—Ä—É–≥–æ–º –æ–∫–Ω–µ
                //     ‚Ä¢ 2 –ø—Ä–æ–∏–≥—Ä—ã—à–∞ –ø–æ–¥—Ä—è–¥: —Å–º–µ–Ω–∞ —Ü–≤–µ—Ç–∞ + —Å—Ç–∞–≤–∫–∞ √ó2
                // """.trimIndent()
                
                Log.d(TAG, """
                    üìã –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è:
                    ‚Ä¢ –°—Ç–∞—Ä—Ç: –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ (10) –Ω–∞ –∫—Ä–∞—Å–Ω—ã–π –≤ –ª–µ–≤–æ–º –æ–∫–Ω–µ
                    ‚Ä¢ –í—ã–∏–≥—Ä—ã—à: –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –Ω–∞ —Ç–æ—Ç –∂–µ —Ü–≤–µ—Ç –≤ –ø—Ä–∞–≤–æ–º –æ–∫–Ω–µ
                    ‚Ä¢ –ü—Ä–æ–∏–≥—Ä—ã—à: —Å—Ç–∞–≤–∫–∞ √ó2 –Ω–∞ —Ç–æ—Ç –∂–µ —Ü–≤–µ—Ç –≤ –¥—Ä—É–≥–æ–º –æ–∫–Ω–µ
                    ‚Ä¢ 2 –ø—Ä–æ–∏–≥—Ä—ã—à–∞ –ø–æ–¥—Ä—è–¥: —Å–º–µ–Ω–∞ —Ü–≤–µ—Ç–∞ + —Å—Ç–∞–≤–∫–∞ √ó2
                """.trimIndent())
            } catch (e: Exception) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ layout
                Log.d(TAG, "–≠–ª–µ–º–µ–Ω—Ç textStrategyInfo –Ω–µ –Ω–∞–π–¥–µ–Ω: ${e.message}")
            }
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç UI –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
     */
    private fun updateActiveWindowUI(windowType: WindowType) {
        lifecycleScope.launch {
            binding.textActiveWindow.text = windowType.name
            
            // –ê–Ω–∏–º–∞—Ü–∏—è —Å–º–µ–Ω—ã –æ–∫–Ω–∞
            animateWindowSwitch(windowType)
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç UI –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ —Å—Ç–∞–≤–∫–∏
     */
    private fun updateBetPlacedUI(windowType: WindowType, betChoice: BetChoice, amount: Int) {
        lifecycleScope.launch {
            val message = "–°—Ç–∞–≤–∫–∞ $amount –Ω–∞ ${betChoice.name} –≤ –æ–∫–Ω–µ ${windowType.name}"
            showStatusMessage(message, true)
            
            // –ê–Ω–∏–º–∞—Ü–∏—è —Å—Ç–∞–≤–∫–∏
            animateBetPlaced(amount)
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç UI –ø—Ä–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
     */
    private fun updateResultDetectedUI(windowType: WindowType, result: RoundResult) {
        lifecycleScope.launch {
            val isWin = result.winner != null && !result.isDraw
            val resultText = if (isWin) "–í–´–ò–ì–†–´–®" else "–ü–†–û–ò–ì–†–´–®"
            val message = "$resultText –≤ –æ–∫–Ω–µ ${windowType.name}: ${result.redDots} - ${result.orangeDots}"
            showStatusMessage(message, isWin)
            
            // –ê–Ω–∏–º–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            animateResult(isWin)
        }
    }
    
    // === –û–ë–ù–û–í–õ–ï–ù–ò–Ø –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò ===
    
    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
     */
    private fun startRealTimeUpdates() {
        statsUpdateJob = uiScope.launch {
            while (isActive) {
                updateRealTimeStats()
                delay(STATS_UPDATE_INTERVAL)
            }
        }
    }
    
    /**
     * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
     */
    private fun stopRealTimeUpdates() {
        statsUpdateJob?.cancel()
        statsUpdateJob = null
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
     */
    private fun updateRealTimeStats() {
        try {
            dualModeService?.let { service ->
                // –î–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞ –Ω–µ —à—É–º–∏–º –ª–æ–≥–∞–º–∏ –∏ –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å
                if (!service.isRunning()) return
                // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
                val statsText = service.getStatisticsText()
                Log.d(TAG, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: $statsText")
                
                // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–∞—Ä—Ç—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                val stats = mapOf(
                    "statisticsText" to statsText,
                    "isRunning" to service.isRunning(),
                    "timestamp" to System.currentTimeMillis()
                )
                updatePerformanceStats(stats)
            }
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${e.message}")
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    private fun updatePerformanceStats(stats: Map<String, Any>) {
        lifecycleScope.launch {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            val timingStats = stats["timing"] as? PerformanceStats
            val syncStats = stats["synchronization"] as? SyncStats
            val optimizedTimings = stats["optimized_timings"] as? Map<String, Long>
            val readyForFastSwitch = stats["ready_for_fast_switch"] as? Boolean ?: false
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            timingStats?.let { timing ->
                binding.textTotalOperations.text = timing.totalOperations.toString()
                binding.textSlowOperations.text = timing.slowOperations.toString()
                binding.textAverageReactionTime.text = "${timing.averageReactionTime}–º—Å"
                binding.textSuccessRate.text = "${(timing.successRate * 100).toInt()}%"
                binding.textPerformanceMode.text = timing.currentMode
                
                // –¶–≤–µ—Ç —Ä–µ–∂–∏–º–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                val modeColor = when (timing.currentMode) {
                    "HIGH_PERFORMANCE" -> Color.GREEN
                    "REDUCED_LOAD" -> Color.RED
                    else -> Color.YELLOW
                }
                binding.textPerformanceMode.setTextColor(modeColor)
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            syncStats?.let { sync ->
                binding.textLeftQueueSize.text = sync.leftQueueSize.toString()
                binding.textRightQueueSize.text = sync.rightQueueSize.toString()
                binding.textBothWindowsBusy.text = if (sync.bothWindowsBusy) "–î–ê" else "–ù–ï–¢"
                binding.textReadyForFastSwitch.text = if (readyForFastSwitch) "–î–ê" else "–ù–ï–¢"
                
                // –¶–≤–µ—Ç–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∫–æ–Ω
                binding.textLeftQueueSize.setTextColor(if (sync.isLeftBusy) Color.RED else Color.GREEN)
                binding.textRightQueueSize.setTextColor(if (sync.isRightBusy) Color.RED else Color.GREEN)
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–∞–π–º–∏–Ω–≥–∏
            optimizedTimings?.let { timings ->
                binding.textDetectionInterval.text = "${timings["detectionInterval"]}–º—Å"
                binding.textReactionDelay.text = "${timings["reactionDelay"]}–º—Å"
                binding.textClickDelay.text = "${timings["clickDelay"]}–º—Å"
            }
        }
    }
    
    // === –ê–ù–ò–ú–ê–¶–ò–ò ===
    
    /**
     * –ê–Ω–∏–º–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫—É
     */
    private fun animateButton(button: android.widget.Button, color: Int) {
        val originalColor = button.currentTextColor
        
        ValueAnimator.ofArgb(originalColor, color, originalColor).apply {
            duration = 300
            interpolator = DecelerateInterpolator()
            addUpdateListener { animator ->
                button.setTextColor(animator.animatedValue as Int)
            }
            start()
        }
    }
    
    /**
     * –ê–Ω–∏–º–∏—Ä—É–µ—Ç —Å–º–µ–Ω—É –æ–∫–Ω–∞
     */
    private fun animateWindowSwitch(windowType: WindowType) {
        val windowView = if (windowType == WindowType.LEFT) {
            binding.viewLeftWindow
        } else {
            binding.viewRightWindow
        }
        
        // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        ValueAnimator.ofFloat(0.3f, 1.0f, 0.8f).apply {
            duration = 500
            addUpdateListener { animator ->
                windowView.alpha = animator.animatedValue as Float
            }
            start()
        }
    }
    
    /**
     * –ê–Ω–∏–º–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏
     */
    private fun animateBetPlaced(amount: Int) {
        // –ê–Ω–∏–º–∞—Ü–∏—è —Å—É–º–º—ã —Å—Ç–∞–≤–∫–∏
        binding.textTotalBets.animate()
            .scaleX(1.2f)
            .scaleY(1.2f)
            .setDuration(200)
            .withEndAction {
                binding.textTotalBets.animate()
                    .scaleX(1.0f)
                    .scaleY(1.0f)
                    .setDuration(200)
                    .start()
            }
            .start()
    }
    
    /**
     * –ê–Ω–∏–º–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
     */
    private fun animateResult(isWin: Boolean) {
        val color = if (isWin) Color.GREEN else Color.RED
        val profitView = binding.textTotalProfit
        
        // –ú–∏–≥–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        ValueAnimator.ofArgb(profitView.currentTextColor, color, profitView.currentTextColor).apply {
            duration = 600
            addUpdateListener { animator ->
                profitView.setTextColor(animator.animatedValue as Int)
            }
            start()
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    private fun showStatusMessage(message: String, isSuccess: Boolean) {
        lifecycleScope.launch {
            binding.textStatusMessage.text = message
            val color = if (isSuccess) Color.GREEN else Color.RED
            binding.textStatusMessage.setTextColor(color)
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            delay(3000)
            binding.textStatusMessage.text = ""
        }
    }
    
    /**
     * –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–≤–µ—Ä—Ö –¥—Ä—É–≥–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
     */
    private fun requestOverlayPermission() {
        Log.d(TAG, "–ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–≤–µ—Ä—Ö –¥—Ä—É–≥–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π")
        
        try {
            val intent = Intent(
                Settings.ACTION_MANAGE_OVERLAY_PERMISSION,
                Uri.parse("package:$packageName")
            )
            startActivity(intent)
            
            Toast.makeText(
                this,
                "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ '–ü–æ–≤–µ—Ä—Ö –¥—Ä—É–≥–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π' –∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                Toast.LENGTH_LONG
            ).show()
            
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ overlay: ${e.message}")
            Toast.makeText(
                this,
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π",
                Toast.LENGTH_SHORT
            ).show()
        }
    }
}
