package com.example.diceautobet

import android.app.Activity
import android.content.Context
import android.content.Intent
import android.media.projection.MediaProjectionManager
import android.os.Build
import android.os.Bundle
import android.util.Log
import com.example.diceautobet.services.AreaConfigurationService
import com.example.diceautobet.utils.PreferencesManager
import android.widget.Toast
import android.os.Handler
import android.os.Looper
import com.example.diceautobet.managers.MediaProjectionPermissionManager
import com.example.diceautobet.logging.DiagnosticLogger

class MediaProjectionRequestActivity : Activity() {

    companion object {
        private const val REQUEST_MEDIA_PROJECTION = 1001
        private const val MAX_RETRY_COUNT = 3
        const val EXTRA_TARGET_SERVICE = "target_service"
        const val SERVICE_AREA_CONFIG = "area_config"
        const val SERVICE_DUAL_MODE = "dual_mode"
    }

    private lateinit var prefsManager: PreferencesManager
    private lateinit var projectionManager: MediaProjectionManager
    private lateinit var diagnosticLogger: DiagnosticLogger
    private var retryCount = 0
    private val handler = Handler(Looper.getMainLooper())

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        Log.d("MediaProjectionRequest", "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∞")
        Log.d("MediaProjectionRequest", "ü§ñ Android –≤–µ—Ä—Å–∏—è: ${Build.VERSION.RELEASE} (API ${Build.VERSION.SDK_INT})")
        
        prefsManager = PreferencesManager(this)
        projectionManager = getSystemService(Context.MEDIA_PROJECTION_SERVICE) as MediaProjectionManager
        diagnosticLogger = DiagnosticLogger(this)
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∑–∞–ø—Ä–æ—Å–∞
        diagnosticLogger.appendToFile("[MEDIA_PROJECTION_REQUEST] –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ Android ${Build.VERSION.RELEASE}\n")
        
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
        handler.postDelayed({
            requestMediaProjectionPermission()
        }, 100)
    }

    private fun requestMediaProjectionPermission() {
        try {
            Log.d("MediaProjectionRequest", "–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∑–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞")
            val captureIntent = projectionManager.createScreenCaptureIntent()
            Log.d("MediaProjectionRequest", "Intent —Å–æ–∑–¥–∞–Ω: $captureIntent")
            startActivityForResult(captureIntent, REQUEST_MEDIA_PROJECTION)
            Log.d("MediaProjectionRequest", "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω–∞")
        } catch (e: Exception) {
            Log.e("MediaProjectionRequest", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è", e)
            if (retryCount < MAX_RETRY_COUNT) {
                retryCount++
                handler.postDelayed({
                    requestMediaProjectionPermission()
                }, 500)
            } else {
                Toast.makeText(this, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∑–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞", Toast.LENGTH_LONG).show()
                finish()
            }
        }
    }

    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)
        Log.d("MediaProjectionRequest", "onActivityResult: requestCode=$requestCode, resultCode=$resultCode, data=$data")
        Log.d("MediaProjectionRequest", "üîç –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: RESULT_OK=${Activity.RESULT_OK}, RESULT_CANCELED=${Activity.RESULT_CANCELED}")
        
        if (requestCode == REQUEST_MEDIA_PROJECTION) {
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —É—Å–ø–µ—Ö–∞/–Ω–µ—É–¥–∞—á–∏)
            diagnosticLogger.appendToFile("[MEDIA_PROJECTION_RESULT] resultCode=$resultCode, success=${resultCode == Activity.RESULT_OK}\n")
            
            if (resultCode == Activity.RESULT_OK && data != null) {
                Log.d("MediaProjectionRequest", "‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –£–°–ü–ï–®–ù–û (resultCode=${Activity.RESULT_OK})")
                
                // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
                diagnosticLogger.logMediaProjectionGranted(resultCode, data)
                
                Log.d("MediaProjectionRequest", "üìä –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è:")
                Log.d("MediaProjectionRequest", "   - resultCode: $resultCode")
                Log.d("MediaProjectionRequest", "   - data –Ω–µ null: ${data != null}")
                Log.d("MediaProjectionRequest", "   - data.extras: ${data.extras?.keySet()?.joinToString()}")
                
                // –ö–†–ò–¢–ò–ß–ù–û: –î–ª—è –≤—Å–µ—Ö Android –≤–µ—Ä—Å–∏–π –∑–∞–ø—É—Å–∫–∞–µ–º foreground service –°–†–ê–ó–£
                Log.d("MediaProjectionRequest", "üöÄ Android ${Build.VERSION.SDK_INT} - –∑–∞–ø—É—Å–∫–∞–µ–º foreground service –°–†–ê–ó–£")
                startForegroundServiceImmediately(resultCode, data)
                
                // –ù–ï —Å–æ–∑–¥–∞–µ–º MediaProjection –∑–¥–µ—Å—å - —ç—Ç–æ —Å–¥–µ–ª–∞–µ—Ç foreground service!
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
                try {
                    Log.d("MediaProjectionRequest", "ÔøΩ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è (–ë–ï–ó —Å–æ–∑–¥–∞–Ω–∏—è MediaProjection)...")
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ TokenStore –∏ PreferencesManager –Ω–∞–ø—Ä—è–º—É—é
                    com.example.diceautobet.utils.MediaProjectionTokenStore.set(data)
                    prefsManager.saveMediaProjectionPermission(resultCode, data)
                    Log.d("MediaProjectionRequest", "‚úÖ –î–∞–Ω–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
                } catch (e: Exception) {
                    Log.e("MediaProjectionRequest", "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è", e)
                }
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
                try {
                    Log.d("MediaProjectionRequest", "üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ MediaProjectionPermissionManager...")
                    MediaProjectionPermissionManager.getInstance(this).savePermission(resultCode, data)
                    Log.d("MediaProjectionRequest", "‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —á–µ—Ä–µ–∑ MediaProjectionPermissionManager")
                } catch (e: Exception) {
                    Log.e("MediaProjectionRequest", "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä, fallback –Ω–∞ –ø—Ä—è–º–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ", e)
                    // Fallback: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø—Ä–æ—Ü–µ—Å—Å–Ω–æ–º —Å—Ç–æ—Ä–µ –∏ preferences
                    Log.d("MediaProjectionRequest", "üîÑ Fallback: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–ø—Ä—è–º—É—é...")
                    com.example.diceautobet.utils.MediaProjectionTokenStore.set(data)
                    prefsManager.saveMediaProjectionPermission(resultCode, data)
                    Log.d("MediaProjectionRequest", "‚úÖ Fallback —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                }
                
                try {
                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—Å—Ç–∏—Ç—å
                    val targetService = intent.getStringExtra(EXTRA_TARGET_SERVICE) ?: SERVICE_AREA_CONFIG
                    
                    when (targetService) {
                        SERVICE_DUAL_MODE -> {
                            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º broadcast –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è UI
                            Log.d("MediaProjectionRequest", "–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –¥–≤–æ–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –ø–æ–ª—É—á–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º broadcast")
                            val broadcastIntent = Intent("com.example.diceautobet.PERMISSION_GRANTED")
                            broadcastIntent.putExtra("service_type", "dual_mode")
                            broadcastIntent.setPackage(packageName)
                            sendBroadcast(broadcastIntent)
                            
                            Toast.makeText(this, "‚úÖ –°–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω! –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å –∏–≥—Ä—É", Toast.LENGTH_LONG).show()
                        }
                        SERVICE_AREA_CONFIG -> {
                            // –ó–∞–ø—É—Å–∫–∞–µ–º AreaConfigurationService (—Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ–±–ª–∞—Å—Ç–µ–π)
                            Log.d("MediaProjectionRequest", "–ó–∞–ø—É—Å–∫–∞–µ–º AreaConfigurationService —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è–º–∏: resultCode=$resultCode, data=$data")
                            AreaConfigurationService.start(this, resultCode, data)
                            Toast.makeText(this, "–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ! –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –æ–±–ª–∞—Å—Ç–µ–π", Toast.LENGTH_SHORT).show()
                        }
                    }
                } catch (e: Exception) {
                    Log.e("MediaProjectionRequest", "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–∏—Å–∞", e)
                    Toast.makeText(this, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: ${e.message}", Toast.LENGTH_LONG).show()
                }
            } else {
                // –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
                Log.w("MediaProjectionRequest", "‚ùå –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ù–ï –ø–æ–ª—É—á–µ–Ω–æ: resultCode=$resultCode")
                Log.w("MediaProjectionRequest", "üîç –î–µ—Ç–∞–ª–∏:")
                Log.w("MediaProjectionRequest", "   - RESULT_OK = ${Activity.RESULT_OK}")
                Log.w("MediaProjectionRequest", "   - RESULT_CANCELED = ${Activity.RESULT_CANCELED}")
                Log.w("MediaProjectionRequest", "   - data != null: ${data != null}")
                
                // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
                diagnosticLogger.appendToFile("[MEDIA_PROJECTION_DENIED] resultCode=$resultCode, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ\n")
                
                // –í–ê–ñ–ù–û: –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∏–∫–∞–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏!
                Log.d("MediaProjectionRequest", "üßπ –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π...")
                prefsManager.clearMediaProjectionPermission()
                com.example.diceautobet.utils.MediaProjectionTokenStore.clear()
                Log.d("MediaProjectionRequest", "‚úÖ –î–∞–Ω–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –æ—á–∏—â–µ–Ω—ã")
                
                val message = when (resultCode) {
                    Activity.RESULT_CANCELED -> "–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∑–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
                    else -> "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∑–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞ (–∫–æ–¥: $resultCode)"
                }
                Toast.makeText(this, message, Toast.LENGTH_LONG).show()
            }
            
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            handler.postDelayed({
                finish()
            }, 500)
        }
    }

    /**
     * –ö–†–ò–¢–ò–ß–ù–û –¥–ª—è Android 15+: –¢–µ—Å—Ç–∏—Ä—É–µ–º MediaProjection –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
     */
    private fun testMediaProjectionImmediately(resultCode: Int, data: Intent): Boolean {
        return try {
            Log.d("MediaProjectionRequest", "üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ MediaProjection –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ...")
            val testProjection = projectionManager.getMediaProjection(resultCode, data)
            val isValid = testProjection != null
            
            if (isValid) {
                Log.d("MediaProjectionRequest", "‚úÖ MediaProjection —Ç–µ—Å—Ç –£–°–ü–ï–®–ï–ù")
                testProjection?.stop() // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π MediaProjection
            } else {
                Log.e("MediaProjectionRequest", "‚ùå MediaProjection —Ç–µ—Å—Ç –ü–†–û–í–ê–õ–ï–ù - –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å")
            }
            
            isValid
        } catch (e: Exception) {
            Log.e("MediaProjectionRequest", "‚ùå MediaProjection —Ç–µ—Å—Ç –ü–†–û–í–ê–õ–ï–ù —Å –æ—à–∏–±–∫–æ–π", e)
            false
        }
    }

    /**
     * –ö–†–ò–¢–ò–ß–ù–û: –ó–∞–ø—É—Å–∫ foreground service –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –¥–ª—è –≤—Å–µ—Ö Android –≤–µ—Ä—Å–∏–π
     */
    private fun startForegroundServiceImmediately(resultCode: Int, data: Intent) {
        try {
            val targetService = intent.getStringExtra(EXTRA_TARGET_SERVICE) ?: SERVICE_AREA_CONFIG
            
            // –í–°–ï–ì–î–ê –∑–∞–ø—É—Å–∫–∞–µ–º DualModeService –∫–∞–∫ foreground –¥–ª—è MediaProjection
            val serviceIntent = Intent(this, com.example.diceautobet.services.DualModeService::class.java).apply {
                putExtra("resultCode", resultCode)
                putExtra("data", data)
                putExtra("immediate_start", true)
                putExtra("target_service", targetService) // –ü–µ—Ä–µ–¥–∞—ë–º —Ç–∏–ø —Å–µ—Ä–≤–∏—Å–∞
                action = com.example.diceautobet.services.DualModeService.ACTION_START_FOREGROUND
            }
            
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                startForegroundService(serviceIntent)
            } else {
                startService(serviceIntent)
            }
            
            Log.d("MediaProjectionRequest", "‚úÖ DualModeService –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ foreground service –¥–ª—è $targetService")
        } catch (e: Exception) {
            Log.e("MediaProjectionRequest", "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ foreground service", e)
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        handler.removeCallbacksAndMessages(null)
    }
} 