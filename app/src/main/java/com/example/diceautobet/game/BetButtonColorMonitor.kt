package com.example.diceautobet.game

import android.graphics.Bitmap
import android.graphics.Color
import android.graphics.Rect
import android.util.Log
import com.example.diceautobet.managers.DualWindowAreaManager
import com.example.diceautobet.models.AreaType
import com.example.diceautobet.models.GameResult
import com.example.diceautobet.models.WindowType
import kotlinx.coroutines.delay

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –ø–∏–∫—Å–µ–ª–µ–π –≤ –∫–Ω–æ–ø–∫–∞—Ö —Å—Ç–∞–≤–æ–∫.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–æ–º–µ–Ω—Ç–∞, –∫–æ–≥–¥–∞ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ—Å–ª–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä—ã.
 */
class BetButtonColorMonitor(
    private val areaManager: DualWindowAreaManager,
    private val screenCaptureManager: ScreenCaptureManager
) {
    
    companion object {
        private const val TAG = "BetButtonColorMonitor"
        
        // –ü–æ—Ä–æ–≥–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞
        private const val COLOR_CHANGE_THRESHOLD = 30 // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –≤ —è—Ä–∫–æ—Å—Ç–∏ –¥–ª—è —Å—á–∏—Ç–∞–µ–º–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        private const val STABILITY_CHECKS = 3 // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        private const val CHECK_INTERVAL_MS = 150L // –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
        private const val MAX_WAIT_TIME_MS = 15000L // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (15 —Å–µ–∫)
    }
    
    // –ö—ç—à –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    private val initialColorsCache = mutableMapOf<String, PixelColorData>()
    
    /**
     * –û—á–∏—â–∞–µ—Ç –∫—ç—à –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ (–≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞)
     */
    fun clearInitialColorsCache() {
        initialColorsCache.clear()
        Log.d(TAG, "üßπ –ö—ç—à –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ –æ—á–∏—â–µ–Ω")
    }
    
    /**
     * –î–∞–Ω–Ω—ã–µ –æ —Ü–≤–µ—Ç–µ –ø–∏–∫—Å–µ–ª—è –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ç–æ—á–∫–µ
     */
    data class PixelColorData(
        val x: Int,
        val y: Int,
        val color: Int,
        val brightness: Float,
        val timestamp: Long = System.currentTimeMillis()
    ) {
        fun calculateColorDifference(other: PixelColorData): Float {
            return kotlin.math.abs(this.brightness - other.brightness)
        }
    }
    
    /**
     * –†–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞
     */
    data class ColorChangeResult(
        val hasChanged: Boolean,
        val initialColor: PixelColorData?,
        val finalColor: PixelColorData?,
        val changeTime: Long,
        val totalWaitTime: Long
    )
    
    /**
     * –û–∂–∏–¥–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –ø–∏–∫—Å–µ–ª—è –≤ –∫–Ω–æ–ø–∫–µ RED –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞
     */
    suspend fun waitForRedButtonColorChange(window: WindowType): ColorChangeResult {
        return waitForButtonColorChange(window, AreaType.RED_BUTTON, "–∫—Ä–∞—Å–Ω–æ–π –∫–Ω–æ–ø–∫–∏")
    }
    
    /**
     * –û–∂–∏–¥–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –ø–∏–∫—Å–µ–ª—è –≤ –∫–Ω–æ–ø–∫–µ ORANGE –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞
     */
    suspend fun waitForOrangeButtonColorChange(window: WindowType): ColorChangeResult {
        return waitForButtonColorChange(window, AreaType.ORANGE_BUTTON, "–æ—Ä–∞–Ω–∂–µ–≤–æ–π –∫–Ω–æ–ø–∫–∏")
    }
    
    /**
     * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –∫–Ω–æ–ø–∫–∏
     */
    private suspend fun waitForButtonColorChange(
        window: WindowType, 
        buttonType: AreaType,
        buttonName: String
    ): ColorChangeResult {
        Log.d(TAG, "üé® –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ $buttonName –≤ –æ–∫–Ω–µ $window")
        
        val startTime = System.currentTimeMillis()
        
        // –ü–æ–ª—É—á–∞–µ–º –æ–±–ª–∞—Å—Ç—å –∫–Ω–æ–ø–∫–∏
        val buttonArea = areaManager.  getAreaForWindow(window, buttonType)
        if (buttonArea == null) {
            Log.e(TAG, "‚ùå –û–±–ª–∞—Å—Ç—å $buttonName –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –æ–∫–Ω–∞ $window")
            return ColorChangeResult(false, null, null, 0L, 0L)
        }
        
        Log.d(TAG, "‚úÖ –û–±–ª–∞—Å—Ç—å $buttonName –Ω–∞–π–¥–µ–Ω–∞: ${buttonArea.rect}")
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É –∫–Ω–æ–ø–∫–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        val monitorX = buttonArea.rect.centerX()
        val monitorY = buttonArea.rect.centerY()
        
        Log.d(TAG, "üìç –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –ø–∏–∫—Å–µ–ª—å –≤ —Ç–æ—á–∫–µ ($monitorX, $monitorY)")
        
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç
        val initialColor = capturePixelColor(monitorX, monitorY, buttonName)
        if (initialColor == null) {
            Log.e(TAG, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç –ø–∏–∫—Å–µ–ª—è")
            return ColorChangeResult(false, null, null, 0L, System.currentTimeMillis() - startTime)
        }
        
        Log.d(TAG, "üé® –ù–∞—á–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç: —è—Ä–∫–æ—Å—Ç—å=${initialColor.brightness}, —Ü–≤–µ—Ç=#${Integer.toHexString(initialColor.color)}")
        
        var attempts = 0
        var consecutiveFailures = 0
        val maxAttempts = (MAX_WAIT_TIME_MS / CHECK_INTERVAL_MS).toInt()
        val maxConsecutiveFailures = 10 // –ú–∞–∫—Å–∏–º—É–º 10 –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥—Ä—è–¥
        var stableChangeCount = 0
        var lastSignificantColor: PixelColorData? = null
        
        while (attempts < maxAttempts && consecutiveFailures < maxConsecutiveFailures) {
            delay(CHECK_INTERVAL_MS)
            
            val currentColor = capturePixelColor(monitorX, monitorY, buttonName)
            if (currentColor == null) {
                consecutiveFailures++
                Log.w(TAG, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ü–≤–µ—Ç –ø–∏–∫—Å–µ–ª—è, –ø–æ–ø—ã—Ç–∫–∞ ${attempts + 1}, –Ω–µ—É–¥–∞—á –ø–æ–¥—Ä—è–¥: $consecutiveFailures")
                attempts++
                continue
            }
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞—Ö–≤–∞—Ç–µ
            consecutiveFailures = 0
            
            // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–æ—Å—Ç—å —Ü–≤–µ—Ç–æ–≤
            val colorDifference = initialColor.calculateColorDifference(currentColor)
            
            if (colorDifference >= COLOR_CHANGE_THRESHOLD) {
                // –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞
                if (lastSignificantColor == null || 
                    kotlin.math.abs(lastSignificantColor.brightness - currentColor.brightness) < 5f) {
                    // –¶–≤–µ—Ç —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–ª—Å—è –Ω–∞ –Ω–æ–≤–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏
                    stableChangeCount++
                    lastSignificantColor = currentColor
                    
                    Log.d(TAG, "üé® –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: —è—Ä–∫–æ—Å—Ç—å ${initialColor.brightness} ‚Üí ${currentColor.brightness} (—Ä–∞–∑–Ω–æ—Å—Ç—å: $colorDifference), —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: $stableChangeCount/$STABILITY_CHECKS")
                    
                    if (stableChangeCount >= STABILITY_CHECKS) {
                        val totalTime = System.currentTimeMillis() - startTime
                        Log.d(TAG, "‚úÖ –°—Ç–∞–±–∏–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ $buttonName –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –∑–∞ ${totalTime}–º—Å")
                        return ColorChangeResult(
                            hasChanged = true,
                            initialColor = initialColor,
                            finalColor = currentColor,
                            changeTime = currentColor.timestamp - initialColor.timestamp,
                            totalWaitTime = totalTime
                        )
                    }
                } else {
                    // –¶–≤–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å—Å—è, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                    stableChangeCount = 1
                    lastSignificantColor = currentColor
                    Log.d(TAG, "üé® –¶–≤–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å—Å—è: ${currentColor.brightness}")
                }
            } else {
                // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                if (stableChangeCount > 0) {
                    Log.d(TAG, "üé® –¶–≤–µ—Ç –≤–µ—Ä–Ω—É–ª—Å—è –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É: ${currentColor.brightness} (—Ä–∞–∑–Ω–æ—Å—Ç—å: $colorDifference)")
                }
                stableChangeCount = 0
                lastSignificantColor = null
            }
            
            attempts++
            
            // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
            if (attempts % (2000 / CHECK_INTERVAL_MS).toInt() == 0) {
                val elapsed = System.currentTimeMillis() - startTime
                Log.d(TAG, "‚è≥ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ $buttonName: ${elapsed}–º—Å, —Ç–µ–∫—É—â–∞—è —è—Ä–∫–æ—Å—Ç—å: ${currentColor.brightness}")
            }
        }
        
        val totalTime = System.currentTimeMillis() - startTime
        
        if (consecutiveFailures >= maxConsecutiveFailures) {
            Log.e(TAG, "‚ùå –ü—Ä–µ—Ä—ã–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ $buttonName –∏–∑-–∑–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—à–∏–±–æ–∫ –∑–∞—Ö–≤–∞—Ç–∞ —ç–∫—Ä–∞–Ω–∞ ($consecutiveFailures)")
        } else {
            Log.w(TAG, "‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ $buttonName –∏—Å—Ç–µ–∫–ª–æ (${totalTime}–º—Å)")
        }
        
        return ColorChangeResult(
            hasChanged = false,
            initialColor = initialColor,
            finalColor = lastSignificantColor,
            changeTime = 0L,
            totalWaitTime = totalTime
        )
    }
    
    /**
     * –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —Ü–≤–µ—Ç –ø–∏–∫—Å–µ–ª—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–æ—á–∫–µ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
     */
    private suspend fun capturePixelColor(x: Int, y: Int, contextName: String): PixelColorData? {
        val maxRetries = 3
        var retryCount = 0
        
        while (retryCount < maxRetries) {
            try {
                val screenshot = screenCaptureManager.captureScreen()
                
                when (screenshot) {
                    is GameResult.Success -> {
                        val bitmap = screenshot.data
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        if (x < 0 || x >= bitmap.width || y < 0 || y >= bitmap.height) {
                            Log.e(TAG, "‚ùå –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã ($x, $y) –≤–Ω–µ –ø—Ä–µ–¥–µ–ª–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${bitmap.width}x${bitmap.height}")
                            return null
                        }
                        
                        val pixelColor = bitmap.getPixel(x, y)
                        val brightness = calculateBrightness(pixelColor)
                        
                        return PixelColorData(x, y, pixelColor, brightness)
                    }
                    is GameResult.Error -> {
                        Log.w(TAG, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ —ç–∫—Ä–∞–Ω–∞ –¥–ª—è $contextName (–ø–æ–ø—ã—Ç–∫–∞ ${retryCount + 1}/$maxRetries): ${screenshot.message}")
                        retryCount++
                        if (retryCount < maxRetries) {
                            delay(100) // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
                        }
                    }
                    is GameResult.Loading -> {
                        Log.d(TAG, "‚è≥ –ó–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–ª—è $contextName (–ø–æ–ø—ã—Ç–∫–∞ ${retryCount + 1}/$maxRetries)")
                        retryCount++
                        if (retryCount < maxRetries) {
                            delay(200) // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
                        }
                    }
                }
            } catch (e: Exception) {
                Log.w(TAG, "‚ö†Ô∏è –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞—Ö–≤–∞—Ç–µ —Ü–≤–µ—Ç–∞ –ø–∏–∫—Å–µ–ª—è –¥–ª—è $contextName (–ø–æ–ø—ã—Ç–∫–∞ ${retryCount + 1}/$maxRetries)", e)
                retryCount++
                if (retryCount < maxRetries) {
                    delay(100)
                }
            }
        }
        
        Log.e(TAG, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ö–≤–∞—Ç–∏—Ç—å —Ü–≤–µ—Ç –ø–∏–∫—Å–µ–ª—è –¥–ª—è $contextName –ø–æ—Å–ª–µ $maxRetries –ø–æ–ø—ã—Ç–æ–∫")
        return null
    }
    
    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç —è—Ä–∫–æ—Å—Ç—å —Ü–≤–µ—Ç–∞ –ø–æ —Ñ–æ—Ä–º—É–ª–µ luminance
     */
    private fun calculateBrightness(color: Int): Float {
        val red = Color.red(color)
        val green = Color.green(color)
        val blue = Color.blue(color)
        
        // –§–æ—Ä–º—É–ª–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π —è—Ä–∫–æ—Å—Ç–∏ (luminance)
        return (0.299f * red + 0.587f * green + 0.114f * blue)
    }
    
    /**
     * –û–∂–∏–¥–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –ª—é–±–æ–π –∏–∑ –∫–Ω–æ–ø–æ–∫ —Å—Ç–∞–≤–æ–∫ (–∫—Ä–∞—Å–Ω–æ–π –∏–ª–∏ –æ—Ä–∞–Ω–∂–µ–≤–æ–π)
     * –ü–æ–ª–µ–∑–Ω–æ –∫–æ–≥–¥–∞ –Ω–µ –∑–Ω–∞–µ–º, –∫–∞–∫–∞—è –∫–Ω–æ–ø–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—Å—è –ø–µ—Ä–≤–æ–π
     */
    suspend fun waitForAnyButtonColorChange(window: WindowType): ColorChangeResult {
        Log.d(TAG, "üé® –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –ª—é–±–æ–π –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞–≤–∫–∏ –≤ –æ–∫–Ω–µ $window")
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–±–µ–∏—Ö –∫–Ω–æ–ø–æ–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        val startTime = System.currentTimeMillis()
        
        // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –±—É–¥–µ–º –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –æ–±–µ –∫–Ω–æ–ø–∫–∏
        var attempts = 0
        val maxAttempts = (MAX_WAIT_TIME_MS / (CHECK_INTERVAL_MS * 2)).toInt() // –î–µ–ª–∏–º –Ω–∞ 2, —Ç.–∫. –ø—Ä–æ–≤–µ—Ä—è–µ–º 2 –∫–Ω–æ–ø–∫–∏ –∑–∞ —Ü–∏–∫–ª
        
        while (attempts < maxAttempts) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∞—Å–Ω—É—é –∫–Ω–æ–ø–∫—É
            val redResult = quickCheckButtonColorChange(window, AreaType.RED_BUTTON, "–∫—Ä–∞—Å–Ω–æ–π –∫–Ω–æ–ø–∫–∏")
            if (redResult.hasChanged) {
                Log.d(TAG, "‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤ –∫—Ä–∞—Å–Ω–æ–π –∫–Ω–æ–ø–∫–µ")
                return redResult
            }
            
            delay(CHECK_INTERVAL_MS)
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ä–∞–Ω–∂–µ–≤—É—é –∫–Ω–æ–ø–∫—É
            val orangeResult = quickCheckButtonColorChange(window, AreaType.ORANGE_BUTTON, "–æ—Ä–∞–Ω–∂–µ–≤–æ–π –∫–Ω–æ–ø–∫–∏")
            if (orangeResult.hasChanged) {
                Log.d(TAG, "‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤ –æ—Ä–∞–Ω–∂–µ–≤–æ–π –∫–Ω–æ–ø–∫–µ")
                return orangeResult
            }
            
            delay(CHECK_INTERVAL_MS)
            attempts++
        }
        
        val totalTime = System.currentTimeMillis() - startTime
        Log.w(TAG, "‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –ª—é–±–æ–π –∫–Ω–æ–ø–∫–∏ –∏—Å—Ç–µ–∫–ª–æ (${totalTime}–º—Å)")
        
        return ColorChangeResult(false, null, null, 0L, totalTime)
    }
    
    /**
     * –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –∫–Ω–æ–ø–∫–∏ (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ü–∏–∫–ª–∞—Ö)
     */
    private suspend fun quickCheckButtonColorChange(
        window: WindowType,
        buttonType: AreaType,
        buttonName: String
    ): ColorChangeResult {
        // –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        // –ú–æ–∂–Ω–æ –∫—ç—à–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
        
        val buttonArea = areaManager.getAreaForWindow(window, buttonType) ?: return ColorChangeResult(false, null, null, 0L, 0L)
        
        val monitorX = buttonArea.rect.centerX()
        val monitorY = buttonArea.rect.centerY()
        
        val currentColor = capturePixelColor(monitorX, monitorY, buttonName) ?: return ColorChangeResult(false, null, null, 0L, 0L)
        
        // –î–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º –Ω–∞—á–∞–ª—å–Ω—ã–º —Ü–≤–µ—Ç–æ–º
        return ColorChangeResult(false, null, currentColor, 0L, 0L)
    }
}
