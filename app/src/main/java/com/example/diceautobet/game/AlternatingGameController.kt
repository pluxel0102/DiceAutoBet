package com.example.diceautobet.game

import android.content.Context
import android.graphics.Bitmap
import android.util.Log
import com.example.diceautobet.models.*
import com.example.diceautobet.utils.PreferencesManager
import kotlinx.coroutines.*

/**
 * –ù–û–í–´–ô –ö–û–ù–¢–†–û–õ–õ–ï–† –ò–ì–†–´ –° –ê–õ–¨–¢–ï–†–ù–ò–†–£–Æ–©–ï–ô –°–¢–†–ê–¢–ï–ì–ò–ï–ô
 * 
 * –õ–æ–≥–∏–∫–∞:
 * 1. –ê–∫—Ç–∏–≤–Ω—ã–π —Ö–æ–¥: –¥–µ–ª–∞–µ–º —Å—Ç–∞–≤–∫—É ‚Üí –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
 * 2. –ü–∞—Å—Å–∏–≤–Ω—ã–π —Ö–æ–¥: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º (–Ω–µ –¥–µ–ª–∞–µ–º —Å—Ç–∞–≤–∫—É)
 * 3. –ß–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ: –∞–∫—Ç–∏–≤–Ω—ã–π ‚Üí –ø–∞—Å—Å–∏–≤–Ω—ã–π ‚Üí –∞–∫—Ç–∏–≤–Ω—ã–π ‚Üí –ø–∞—Å—Å–∏–≤–Ω—ã–π...
 * 4. –†–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏: –≤—ã–∏–≥—Ä–∞–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π ‚Üí –±–∞–∑–æ–≤–∞—è, –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ ‚Üí —É–¥–≤–æ–µ–Ω–Ω–∞—è
 * 5. –í–ê–ñ–ù–û: –ü–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫—É–±–∏–∫–æ–≤ –ø–æ—Å–ª–µ –°–¢–ê–†–¢ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é
 */
class AlternatingGameController(
    private val context: Context,
    private val prefsManager: PreferencesManager,
    private val clickManager: ClickManager,
    private val screenCapture: suspend () -> Bitmap?,
    private val resultAnalyzer: ResultAnalyzer? = null  // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
) {
    
    companion object {
        private const val TAG = "AlternatingGameController"
    }
    
    private val gameScope = CoroutineScope(Dispatchers.Main + SupervisorJob())
    private var gameJob: Job? = null
    private var isRunning = false
    
    // Observers –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    private val observers = mutableListOf<GameStateObserver>()
    
    fun addObserver(observer: GameStateObserver) {
        observers.add(observer)
    }
    
    fun removeObserver(observer: GameStateObserver) {
        observers.remove(observer)
    }
    
    private fun notifyObservers(gameState: GameState) {
        observers.forEach { it.onGameStateChanged(gameState) }
    }
    
    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä—É —Å –Ω–æ–≤–æ–π –∞–ª—å—Ç–µ—Ä–Ω–∏—Ä—É—é—â–µ–π –ª–æ–≥–∏–∫–æ–π
     */
    fun startGame(initialState: GameState = GameState()): GameState {
        if (isRunning) {
            Log.d(TAG, "–ò–≥—Ä–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
            return initialState
        }
        
        Log.d(TAG, "üöÄ –ó–ê–ü–£–°–ö –ò–ì–†–´ –° –ê–õ–¨–¢–ï–†–ù–ò–†–£–Æ–©–ï–ô –°–¢–†–ê–¢–ï–ì–ò–ï–ô")
        isRunning = true
        
        var currentGameState = initialState.copy(
            isRunning = true,
            startTime = System.currentTimeMillis(),
            isPaused = false,
            firstResultIgnored = false,
            currentTurnNumber = 0
        )
        
        gameJob = gameScope.launch {
            try {
                currentGameState = runAlternatingGameLoop(currentGameState)
            } catch (e: Exception) {
                Log.e(TAG, "–û—à–∏–±–∫–∞ –≤ –∏–≥—Ä–æ–≤–æ–º —Ü–∏–∫–ª–µ", e)
                stopGame()
            }
        }
        
        notifyObservers(currentGameState)
        return currentGameState
    }
    
    /**
     * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–≥—Ä—É
     */
    fun stopGame(): GameState {
        if (!isRunning) {
            return GameState()
        }
        
        Log.d(TAG, "üõë –û–°–¢–ê–ù–û–í–ö–ê –ò–ì–†–´")
        isRunning = false
        gameJob?.cancel()
        gameJob = null
        
        val finalState = GameState(
            isRunning = false,
            isPaused = false,
            endTime = System.currentTimeMillis()
        )
        
        notifyObservers(finalState)
        return finalState
    }
    
    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª —Å –∞–ª—å—Ç–µ—Ä–Ω–∏—Ä—É—é—â–µ–π –ª–æ–≥–∏–∫–æ–π
     */
    private suspend fun runAlternatingGameLoop(initialState: GameState): GameState {
        var gameState = initialState
        
        Log.d(TAG, "=== –ù–ê–ß–ê–õ–û –ê–õ–¨–¢–ï–†–ù–ò–†–£–Æ–©–ï–ì–û –ò–ì–†–û–í–û–ì–û –¶–ò–ö–õ–ê ===")
        
        while (isRunning && !gameState.isPaused && !gameState.shouldStop()) {
            try {
                Log.d(TAG, "\n" + "=".repeat(50))
                Log.d(TAG, "üéØ ${gameState.getStatusDescription()}")
                Log.d(TAG, "üí∞ –ë–∞–ª–∞–Ω—Å: ${gameState.balance}, –ü—Ä–∏–±—ã–ª—å: ${gameState.totalProfit}")
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if (gameState.shouldIgnoreFirstResult()) {
                    Log.d(TAG, "üî• –ò–ì–ù–û–†–ò–†–£–ï–ú –ü–ï–†–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–û–°–õ–ï –°–¢–ê–†–¢–ê")
                    gameState = ignoreFirstResult(gameState)
                    continue
                }
                
                val currentTurnType = gameState.getCurrentTurnType()
                
                when (currentTurnType) {
                    TurnType.ACTIVE -> {
                        Log.d(TAG, "üéØ –ê–ö–¢–ò–í–ù–´–ô –•–û–î - –¥–µ–ª–∞–µ–º —Å—Ç–∞–≤–∫—É")
                        gameState = performActiveTurn(gameState)
                    }
                    TurnType.PASSIVE -> {
                        Log.d(TAG, "üëÅÔ∏è –ü–ê–°–°–ò–í–ù–´–ô –•–û–î - —Ç–æ–ª—å–∫–æ –Ω–∞–±–ª—é–¥–∞–µ–º")
                        gameState = performPassiveTurn(gameState)
                    }
                }
                
                notifyObservers(gameState)
                
                // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ö–æ–¥–∞–º–∏
                delay(1000)
                
            } catch (e: Exception) {
                Log.e(TAG, "–û—à–∏–±–∫–∞ –≤ –∏–≥—Ä–æ–≤–æ–º —Ü–∏–∫–ª–µ", e)
                delay(5000)
            }
        }
        
        Log.d(TAG, "=== –ó–ê–í–ï–†–®–ï–ù–ò–ï –ò–ì–†–û–í–û–ì–û –¶–ò–ö–õ–ê ===")
        return stopGame()
    }
    
    /**
     * –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
     */
    private suspend fun ignoreFirstResult(gameState: GameState): GameState {
        Log.d(TAG, "–û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è...")
        
        // –ñ–¥–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        delay(3000) // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–¥–∏–Ω —Ä–∞—É–Ω–¥
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ–≥–æ)
        val screenshot = screenCapture()
        val result = if (screenshot != null) {
            analyzeGameResult(screenshot)
        } else {
            GameResultType.UNKNOWN
        }
        
        Log.d(TAG, "–ü–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω: $result")
        
        return gameState.markFirstResultIgnored()
    }
    
    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π —Ö–æ–¥ - –¥–µ–ª–∞–µ—Ç —Å—Ç–∞–≤–∫—É
     */
    private suspend fun performActiveTurn(gameState: GameState): GameState {
        Log.d(TAG, "--- –í—ã–ø–æ–ª–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ö–æ–¥ ---")
        
        try {
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏
            val betAmount = gameState.calculateBetAmount()
            Log.d(TAG, "üí∞ –†–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ö–æ–¥–∞: $betAmount")
            
            // –†–∞–∑–º–µ—â–∞–µ–º —Å—Ç–∞–≤–∫—É
            val betResult = placeBet(betAmount, gameState.betChoice)
            if (betResult is GameResult.Error) {
                Log.e(TAG, "–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏: ${betResult.message}")
                return gameState
            }
            
            Log.d(TAG, "‚úÖ –°—Ç–∞–≤–∫–∞ $betAmount —Ä–∞–∑–º–µ—â–µ–Ω–∞, –∂–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")
            
            // –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            val result = waitForGameResult()
            Log.d(TAG, "üé≤ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ö–æ–¥–∞: $result")
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            var newGameState = gameState.updateBalanceAfterActiveTurn(betAmount, result)
            newGameState = newGameState.advanceToNextTurn(result)
            
            Log.d(TAG, "–ê–∫—Ç–∏–≤–Ω—ã–π —Ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${newGameState.balance}")
            return newGameState
            
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —Ö–æ–¥–µ", e)
            return gameState
        }
    }
    
    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–∞—Å—Å–∏–≤–Ω—ã–π —Ö–æ–¥ - —Ç–æ–ª—å–∫–æ –Ω–∞–±–ª—é–¥–∞–µ—Ç
     */
    private suspend fun performPassiveTurn(gameState: GameState): GameState {
        Log.d(TAG, "--- –í—ã–ø–æ–ª–Ω—è–µ–º –ø–∞—Å—Å–∏–≤–Ω—ã–π —Ö–æ–¥ ---")
        Log.d(TAG, "–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞–≤–∫—É, —Ç–æ–ª—å–∫–æ –Ω–∞–±–ª—é–¥–∞–µ–º –∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º...")
        
        try {
            // –ü—Ä–æ—Å—Ç–æ –∂–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–∑ —Å—Ç–∞–≤–∫–∏
            val result = waitForAnyResult()
            Log.d(TAG, "üé≤ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ —Ö–æ–¥–∞ (–¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è): $result")
            
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ö–æ–¥—É –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
            val newGameState = gameState.advanceToNextTurn(result)
            
            Log.d(TAG, "–ü–∞—Å—Å–∏–≤–Ω—ã–π —Ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω. –°–ª–µ–¥—É—é—â–∏–π –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–º.")
            return newGameState
            
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –≤ –ø–∞—Å—Å–∏–≤–Ω–æ–º —Ö–æ–¥–µ", e)
            return gameState
        }
    }
    
    /**
     * –†–∞–∑–º–µ—â–∞–µ—Ç —Å—Ç–∞–≤–∫—É —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—É–º–º—ã
     */
    private suspend fun placeBet(amount: Int, betChoice: BetChoice): GameResult<Unit> {
        Log.d(TAG, "–†–∞–∑–º–µ—â–∞–µ–º —Å—Ç–∞–≤–∫—É: $amount –Ω–∞ $betChoice")
        
        try {
            // 1. –í—ã–±–∏—Ä–∞–µ–º —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏
            val betAmountResult = selectBetAmount(amount)
            if (betAmountResult is GameResult.Error) {
                return betAmountResult
            }
            
            delay(500) // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∫–ª–∏–∫–∞–º–∏
            
            // 2. –í—ã–±–∏—Ä–∞–µ–º —Ü–≤–µ—Ç —Å—Ç–∞–≤–∫–∏
            val betColorResult = selectBetColor(betChoice)
            if (betColorResult is GameResult.Error) {
                return betColorResult
            }
            
            delay(500) // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
            
            // 3. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Å—Ç–∞–≤–∫—É
            val confirmResult = confirmBet()
            if (confirmResult is GameResult.Error) {
                return confirmResult
            }
            
            Log.d(TAG, "‚úÖ –°—Ç–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–∞")
            return GameResult.Success(Unit)
            
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏", e)
            return GameResult.Error("–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏: ${e.message}", e)
        }
    }
    
    /**
     * –í—ã–±–∏—Ä–∞–µ—Ç —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏
     */
    private suspend fun selectBetAmount(targetAmount: Int): GameResult<Unit> {
        val availableBets = listOf(10, 50, 100, 500, 2500)
        val closestBet = availableBets.filter { it <= targetAmount }.maxOrNull() 
            ?: availableBets.first()
        
        val areaType = when (closestBet) {
            10 -> AreaType.BET_10
            50 -> AreaType.BET_50
            100 -> AreaType.BET_100
            500 -> AreaType.BET_500
            2500 -> AreaType.BET_2500
            else -> return GameResult.Error("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: $closestBet")
        }
        
        val area = prefsManager.loadAreaUniversal(areaType)
            ?: return GameResult.Error("–û–±–ª–∞—Å—Ç—å –¥–ª—è —Å—Ç–∞–≤–∫–∏ $closestBet –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
        
        return clickManager.clickArea(area)
    }
    
    /**
     * –í—ã–±–∏—Ä–∞–µ—Ç —Ü–≤–µ—Ç —Å—Ç–∞–≤–∫–∏
     */
    private suspend fun selectBetColor(betChoice: BetChoice): GameResult<Unit> {
        val areaType = when (betChoice) {
            BetChoice.RED -> AreaType.RED_BUTTON
            BetChoice.ORANGE -> AreaType.ORANGE_BUTTON
        }
        
        val area = prefsManager.loadAreaUniversal(areaType)
            ?: return GameResult.Error("–û–±–ª–∞—Å—Ç—å –¥–ª—è —Ü–≤–µ—Ç–∞ $betChoice –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
        
        return clickManager.clickArea(area)
    }
    
    /**
     * –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å—Ç–∞–≤–∫—É
     */
    private suspend fun confirmBet(): GameResult<Unit> {
        val area = prefsManager.loadAreaUniversal(AreaType.CONFIRM_BET)
            ?: return GameResult.Error("–û–±–ª–∞—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
        
        return clickManager.clickArea(area)
    }
    
    /**
     * –ñ–¥–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã –ø–æ—Å–ª–µ —Å—Ç–∞–≤–∫–∏
     */
    private suspend fun waitForGameResult(): GameResultType {
        Log.d(TAG, "–û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ—Å–ª–µ —Å—Ç–∞–≤–∫–∏...")
        
        // –ñ–¥–µ–º, –ø–æ–∫–∞ –∏–≥—Ä–∞ –Ω–∞—á–Ω–µ—Ç—Å—è –∏ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è
        delay(4000) // 4 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∏–≥—Ä—ã
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        val screenshot = screenCapture()
        if (screenshot != null) {
            return analyzeGameResult(screenshot)
        }
        
        Log.w(TAG, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return GameResultType.UNKNOWN
    }
    
    /**
     * –ñ–¥–µ—Ç –ª—é–±–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–¥–ª—è –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ —Ö–æ–¥–∞)
     */
    private suspend fun waitForAnyResult(): GameResultType {
        Log.d(TAG, "–û–∂–∏–¥–∞–Ω–∏–µ –ª—é–±–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–ø–∞—Å—Å–∏–≤–Ω—ã–π —Ö–æ–¥)...")
        
        // –ü—Ä–æ—Å—Ç–æ –∂–¥–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞—É–Ω–¥–∞
        delay(3000) // 3 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ —Ä–∞—É–Ω–¥
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        val screenshot = screenCapture()
        if (screenshot != null) {
            return analyzeGameResult(screenshot)
        }
        
        return GameResultType.UNKNOWN
    }
    
    /**
     * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã –ø–æ —Å–∫—Ä–∏–Ω—à–æ—Ç—É
     */
    private fun analyzeGameResult(screenshot: Bitmap): GameResultType {
        // TODO: –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ OpenCV
        // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        val random = (0..2).random()
        return when (random) {
            0 -> {
                Log.d(TAG, "üéâ –°–∏–º—É–ª—è—Ü–∏—è: –í–´–ò–ì–†–´–®")
                GameResultType.WIN
            }
            1 -> {
                Log.d(TAG, "üí∏ –°–∏–º—É–ª—è—Ü–∏—è: –ü–†–û–ò–ì–†–´–®")
                GameResultType.LOSS
            }
            else -> {
                Log.d(TAG, "ü§ù –°–∏–º—É–ª—è—Ü–∏—è: –ù–ò–ß–¨–Ø")
                GameResultType.DRAW
            }
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–ª—å—Ç–µ—Ä–Ω–∏—Ä—É—é—â–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
     */
    fun getStatistics(gameState: GameState): String {
        val activeTurns = (gameState.currentTurnNumber + 1) / 2
        val passiveTurns = gameState.currentTurnNumber / 2
        
        return buildString {
            appendLine("=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–õ–¨–¢–ï–†–ù–ò–†–£–Æ–©–ï–ô –°–¢–†–ê–¢–ï–ì–ò–ò ===")
            appendLine("–í—Å–µ–≥–æ —Ö–æ–¥–æ–≤: ${gameState.currentTurnNumber}")
            appendLine("–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ö–æ–¥–æ–≤: $activeTurns")
            appendLine("–ü–∞—Å—Å–∏–≤–Ω—ã—Ö —Ö–æ–¥–æ–≤: $passiveTurns")
            appendLine("–¢–µ–∫—É—â–∏–π —Ö–æ–¥: ${gameState.getCurrentTurnType()}")
            appendLine("–ü–æ—Å–ª–µ–¥–Ω–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${gameState.lastActiveResult}")
            appendLine("–ë–∞–ª–∞–Ω—Å: ${gameState.balance}")
            appendLine("–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${gameState.totalProfit}")
            appendLine("–í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫: ${gameState.totalBetsPlaced}")
            appendLine("–°—Ç–∞—Ç—É—Å: ${gameState.getStatusDescription()}")
        }
    }
}
