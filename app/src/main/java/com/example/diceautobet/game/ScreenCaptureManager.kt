
package com.example.diceautobet.game

import android.content.Context
import android.graphics.Bitmap
import android.graphics.PixelFormat
import android.hardware.display.DisplayManager
import android.hardware.display.VirtualDisplay
import android.media.Image
import android.media.ImageReader
import android.media.projection.MediaProjection
import android.media.projection.MediaProjectionManager
import android.os.Handler
import android.os.Looper
import android.util.DisplayMetrics
import android.util.Log
import com.example.diceautobet.models.GameResult
import com.example.diceautobet.managers.MediaProjectionPermissionManager
import kotlinx.coroutines.*
import kotlinx.coroutines.sync.Mutex
import kotlinx.coroutines.sync.withLock
import java.nio.ByteBuffer

class ScreenCaptureManager(
    private val context: Context
) {
    
    companion object {
        private const val TAG = "ScreenCaptureManager"
    private const val MAX_IMAGE_TRIES = 8            // ~8 * 8ms ~= 64ms –æ–∂–∏–¥–∞–Ω–∏–µ –∫–∞–¥—Ä–∞ (–±—ã—Å—Ç—Ä–µ–µ)
    private const val POLL_DELAY_MS = 8L             // –æ–∂–∏–¥–∞–Ω–∏–µ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ (–±—ã—Å—Ç—Ä–µ–µ)
    }
    
    private val permissionManager = MediaProjectionPermissionManager.getInstance(context)
    private val projectionManager = context.getSystemService(Context.MEDIA_PROJECTION_SERVICE) as MediaProjectionManager
    
    private var mediaProjection: MediaProjection? = null
    private var virtualDisplay: VirtualDisplay? = null
    private var imageReader: ImageReader? = null
    private var isCapturing = false
    private var consecutiveAcquireFailures = 0
    private val captureMutex = Mutex()
    
    private val displayMetrics = context.resources.displayMetrics
    private val screenDensity = displayMetrics.densityDpi
    
    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
     */
    fun startCapture(): GameResult<Unit> {
        return try {
            Log.d(TAG, "üöÄ –ó–∞–ø—É—Å–∫ –∑–∞—Ö–≤–∞—Ç–∞ —ç–∫—Ä–∞–Ω–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è")
            
            // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
            mediaProjection = permissionManager.getMediaProjection()
            
            if (mediaProjection == null) {
                Log.e(TAG, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å MediaProjection - –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è")
                return GameResult.Error("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∑–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞. –ü–æ–ª—É—á–∏—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.")
            }
            
            Log.d(TAG, "‚úÖ MediaProjection –ø–æ–ª—É—á–µ–Ω –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è")
            
            setupImageReader()
            setupVirtualDisplay()
            
            isCapturing = true
            Log.d(TAG, "‚úÖ –ó–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞ –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            GameResult.Success(Unit)
            
        } catch (e: SecurityException) {
            Log.e(TAG, "‚ùå SecurityException –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∑–∞—Ö–≤–∞—Ç–∞ —ç–∫—Ä–∞–Ω–∞", e)
            // –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ Invalid media projection, –æ—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
            if (e.message?.contains("Invalid media projection") == true) {
                Log.w(TAG, "üßπ MediaProjection –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –æ—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è")
                permissionManager.clearPermission()
                isCapturing = false
                return GameResult.Error("–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∑–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞ —É—Å—Ç–∞—Ä–µ–ª–æ. –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–æ–≤–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ.")
            }
            GameResult.Error("–û—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –∑–∞—Ö–≤–∞—Ç–µ —ç–∫—Ä–∞–Ω–∞: ${e.message}", e)
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ —ç–∫—Ä–∞–Ω–∞", e)
            GameResult.Error("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞: ${e.message}", e)
        }
    }
    
    private fun setupImageReader() {
        imageReader = ImageReader.newInstance(
            displayMetrics.widthPixels,
            displayMetrics.heightPixels,
            PixelFormat.RGBA_8888,
            3 // –Ω–µ–º–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–∏–º –±—É—Ñ–µ—Ä –∫–∞–¥—Ä–æ–≤
        )
        
        Log.d(TAG, "ImageReader –Ω–∞—Å—Ç—Ä–æ–µ–Ω: ${displayMetrics.widthPixels}x${displayMetrics.heightPixels}")
    }
    
    private fun setupVirtualDisplay() {
        try {
            virtualDisplay = mediaProjection?.createVirtualDisplay(
                "ScreenCapture",
                displayMetrics.widthPixels,
                displayMetrics.heightPixels,
                screenDensity,
                DisplayManager.VIRTUAL_DISPLAY_FLAG_AUTO_MIRROR,
                imageReader?.surface,
                null,
                null
            )
            
            Log.d(TAG, "VirtualDisplay –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        } catch (e: SecurityException) {
            Log.e(TAG, "‚ùå SecurityException –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ VirtualDisplay", e)
            if (e.message?.contains("Invalid media projection") == true) {
                Log.w(TAG, "üßπ MediaProjection –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ VirtualDisplay, –æ—á–∏—â–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è")
                permissionManager.clearPermission()
                isCapturing = false
            }
            throw e // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–∞–ª—å—à–µ
        }
    }
    
    suspend fun captureScreen(): GameResult<Bitmap> {
        if (!isCapturing || imageReader == null) {
            return GameResult.Error("–ó–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        }

        return withContext(Dispatchers.IO) {
            try {
                return@withContext captureMutex.withLock {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å MediaProjection –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
                    if (mediaProjection == null) {
                        Log.w(TAG, "‚ö†Ô∏è MediaProjection —Ä–∞–≤–µ–Ω null, –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
                        
                        // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
                        mediaProjection = permissionManager.getMediaProjection()
                        if (mediaProjection == null) {
                            Log.e(TAG, "‚ùå MediaProjection –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                            return@withLock GameResult.Error("MediaProjection –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                        }
                        Log.d(TAG, "‚úÖ MediaProjection —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                    }                    // –î–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –±—ã—Å—Ç—Ä—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –¥–æ–∂–¥–∞—Ç—å—Å—è –∫–∞–¥—Ä–∞
                    var image: Image? = null
                    var tries = 0
                    while (tries < MAX_IMAGE_TRIES && image == null) {
                        image = imageReader?.acquireLatestImage()
                        if (image == null) {
                            delay(POLL_DELAY_MS)
                        }
                        tries++
                    }
                    if (image == null) {
                        consecutiveAcquireFailures++
                        // –ï—Å–ª–∏ –º–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á –ø–æ–¥—Ä—è–¥ ‚Äî –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º virtual display + reader
                        if (consecutiveAcquireFailures >= 20) { // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥ —Å 12 –¥–æ 20
                            Log.w(TAG, "acquireLatestImage() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç null. –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º VirtualDisplay/ImageReader...")
                            try {
                                // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–µ—Å—É—Ä—Å—ã
                                virtualDisplay?.release()
                                imageReader?.close()
                                
                                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—Ç–∞–ª –ª–∏ MediaProjection –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º
                                if (mediaProjection == null) {
                                    Log.e(TAG, "‚ùå MediaProjection —Å—Ç–∞–ª –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º")
                                    
                                    // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
                                    mediaProjection = permissionManager.getMediaProjection()
                                    if (mediaProjection == null) {
                                        Log.e(TAG, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å MediaProjection")
                                        return@withLock GameResult.Error("MediaProjection –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω - —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–æ–≤–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ")
                                    }
                                    Log.d(TAG, "‚úÖ MediaProjection –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è")
                                }
                                
                                // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º ImageReader –∏ VirtualDisplay
                                setupImageReader()
                                setupVirtualDisplay()
                                
                                // –ï—â—ë –æ–¥–Ω–∞ –±—ã—Å—Ç—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ—Å–ª–µ —Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                                var retryImage: Image? = null
                                var retryTries = 0
                                while (retryTries < MAX_IMAGE_TRIES && retryImage == null) {
                                    retryImage = imageReader?.acquireLatestImage()
                                    if (retryImage == null) delay(POLL_DELAY_MS)
                                    retryTries++
                                }
                                if (retryImage != null) {
                                    image = retryImage
                                    consecutiveAcquireFailures = 0 // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
                                }
                            } catch (re: Exception) {
                                Log.e(TAG, "–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ VirtualDisplay/ImageReader", re)
                                // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ SecurityException, –∑–Ω–∞—á–∏—Ç MediaProjection –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
                                if (re is SecurityException && re.message?.contains("Invalid media projection") == true) {
                                    Log.e(TAG, "‚ùå MediaProjection —Å—Ç–∞–ª –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º - —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ")
                                    // –ù–ï –û–ß–ò–©–ê–ï–ú —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è! –ü–æ–∑–≤–æ–ª—è–µ–º –≤—ã—à–µ—Å—Ç–æ—è—â–µ–º—É –∫–æ–¥—É –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
                                    isCapturing = false
                                    return@withLock GameResult.Error("MediaProjection –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω - —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–æ–≤–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ")
                                }
                            }
                        }
                        if (image == null) {
                            return@withLock GameResult.Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                        }
                    } else {
                        consecutiveAcquireFailures = 0
                    }
                
                    val imgW = image.width
                    val imgH = image.height
                    val planes = image.planes
                    val buffer = planes[0].buffer
                    val pixelStride = planes[0].pixelStride
                    val rowStride = planes[0].rowStride
                    val rowPadding = rowStride - pixelStride * imgW
                
                    val bitmap = Bitmap.createBitmap(
                        imgW + rowPadding / pixelStride,
                        imgH,
                        Bitmap.Config.ARGB_8888
                    )
                    
                    bitmap.copyPixelsFromBuffer(buffer)
                    image.close()
                    
                    // –û–±—Ä–µ–∑–∞–µ–º bitmap –µ—Å–ª–∏ –µ—Å—Ç—å padding
                    val finalBitmap = if (rowPadding == 0) bitmap else {
                        val cropped = Bitmap.createBitmap(
                            bitmap,
                            0,
                            0,
                            imgW,
                            imgH
                        )
                        bitmap.recycle()
                        cropped
                    }
                    
                    Log.d(TAG, "–°–∫—Ä–∏–Ω—à–æ—Ç —Å–¥–µ–ª–∞–Ω: ${finalBitmap.width}x${finalBitmap.height}")
                    GameResult.Success(finalBitmap)
                }
                
            } catch (e: Exception) {
                Log.e(TAG, "–û—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ —ç–∫—Ä–∞–Ω–∞", e)
                GameResult.Error("–û—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞: ${e.message}", e)
            }
        }
    }
    
    fun stopCapture() {
        Log.d(TAG, "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ —ç–∫—Ä–∞–Ω–∞")
        
        try {
            isCapturing = false
            virtualDisplay?.release()
            imageReader?.close()
            mediaProjection?.stop()
            
            virtualDisplay = null
            imageReader = null
            mediaProjection = null
            
            Log.d(TAG, "–ó–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞—Ö–≤–∞—Ç–∞", e)
        }
    }
    
    fun isCapturing(): Boolean = isCapturing && mediaProjection != null
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å MediaProjection –∏ –ø—ã—Ç–∞–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –µ–≥–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
     */
    fun validateMediaProjection(): Boolean {
        if (mediaProjection == null) {
            Log.w(TAG, "MediaProjection —Ä–∞–≤–µ–Ω null")
            return false
        }
        return true
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç MediaProjection –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
     */
    fun updateMediaProjection(resultCode: Int, data: android.content.Intent): GameResult<Unit> {
        return try {
            Log.d(TAG, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ MediaProjection")
            
            // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–µ—Å—É—Ä—Å—ã
            virtualDisplay?.release()
            imageReader?.close()
            mediaProjection?.stop()
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π MediaProjection
            mediaProjection = projectionManager.getMediaProjection(resultCode, data)
            
            if (mediaProjection == null) {
                isCapturing = false
                return GameResult.Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å MediaProjection")
            }
            
            // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            setupImageReader()
            setupVirtualDisplay()
            
            isCapturing = true
            consecutiveAcquireFailures = 0
            
            Log.d(TAG, "MediaProjection —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
            GameResult.Success(Unit)
            
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è MediaProjection", e)
            isCapturing = false
            GameResult.Error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è MediaProjection: ${e.message}", e)
        }
    }
    
    fun destroy() {
        Log.d(TAG, "–£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ ScreenCaptureManager")
        stopCapture()
    }
}
