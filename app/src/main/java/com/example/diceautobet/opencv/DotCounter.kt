package com.example.diceautobet.opencv

import android.graphics.Bitmap
import org.opencv.android.OpenCVLoader
import org.opencv.android.Utils
import org.opencv.core.*
import org.opencv.imgproc.Imgproc
import kotlin.math.roundToInt
import android.util.Log

object DotCounter {

    init { require(OpenCVLoader.initDebug()) }

    data class Result(val leftDots: Int, val rightDots: Int, val confidence: Float = 0.0f)

    fun count(srcBmp: Bitmap): Result {
        Log.d("DotCounter", "üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${srcBmp.width}x${srcBmp.height}")
        Log.d("DotCounter", "üñºÔ∏è Bitmap –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: ${srcBmp.config}")

        // –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SimpleDualModeController
        val timestamp = System.currentTimeMillis()

        /* 1‚É£ Bitmap ‚Üí HSV ------------------------------------------------ */
        val hsv = Mat()
        Utils.bitmapToMat(srcBmp, hsv)
        Imgproc.cvtColor(hsv, hsv, Imgproc.COLOR_BGR2HSV)

        Log.d("DotCounter", "‚úÖ HSV –º–∞—Ç—Ä–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞: ${hsv.width()}x${hsv.height()}")

        /* 2‚É£ –£–ª—É—á—à–µ–Ω–Ω–∞—è –±–µ–ª–∞—è –º–∞—Å–∫–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø–æ—Ä–æ–≥–∞–º–∏ ------------ */
        val white = Mat()

        // –û—Å–Ω–æ–≤–Ω–∞—è –º–∞—Å–∫–∞ –¥–ª—è –±–µ–ª—ã—Ö —Ç–æ—á–µ–∫ (–±–æ–ª–µ–µ —à–∏—Ä–æ–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω)
        Core.inRange(
            hsv,
            Scalar(0.0,   0.0, 120.0),  // –ü–æ–Ω–∏–∑–∏–ª —è—Ä–∫–æ—Å—Ç—å —Å 150 –¥–æ 120
            Scalar(180.0, 100.0, 255.0), // –£–≤–µ–ª–∏—á–∏–ª –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å —Å 80 –¥–æ 100
            white
        )

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –º–∞—Å–∫–∞ –¥–ª—è —è—Ä–∫–∏—Ö —Ç–æ—á–µ–∫
        val bright = Mat()
        Core.inRange(
            hsv,
            Scalar(0.0,   0.0, 180.0),  // –ü–æ–Ω–∏–∑–∏–ª —è—Ä–∫–æ—Å—Ç—å —Å 200 –¥–æ 180
            Scalar(180.0, 70.0, 255.0), // –£–≤–µ–ª–∏—á–∏–ª –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å —Å 50 –¥–æ 70
            bright
        )

        // –ï—â–µ –æ–¥–Ω–∞ –º–∞—Å–∫–∞ –¥–ª—è —Å–µ—Ä—ã—Ö/—Å–≤–µ—Ç–ª—ã—Ö —Ç–æ—á–µ–∫
        val gray = Mat()
        Core.inRange(
            hsv,
            Scalar(0.0,   0.0, 100.0),  // –ï—â–µ –±–æ–ª–µ–µ –Ω–∏–∑–∫–∞—è —è—Ä–∫–æ—Å—Ç—å
            Scalar(180.0, 120.0, 255.0), // –í—ã—Å–æ–∫–∞—è –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å
            gray
        )

        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –º–∞—Å–∫–∏
        Core.bitwise_or(white, bright, white)
        Core.bitwise_or(white, gray, white)

        Log.d("DotCounter", "üé® –°–æ–∑–¥–∞–ª–∏ HSV –º–∞—Å–∫—É, –ø—Ä–∏–º–µ–Ω—è–µ–º –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏...")

        // –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞
        Imgproc.medianBlur(white, white, 3)
        val kernel = Imgproc.getStructuringElement(
            Imgproc.MORPH_ELLIPSE, Size(3.0, 3.0)
        )
        Imgproc.dilate(white, white, kernel)

        // –£–±–∏—Ä–∞–µ–º —à—É–º
        val noiseKernel = Imgproc.getStructuringElement(
            Imgproc.MORPH_ELLIPSE, Size(2.0, 2.0)
        )
        Imgproc.erode(white, white, noiseKernel)

        /* 3‚É£ –£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∫–æ–Ω—Ç—É—Ä–æ–≤ ----------------------------- */
        val cnts = mutableListOf<MatOfPoint>()
        Imgproc.findContours(
            white, cnts, Mat(),
            Imgproc.RETR_EXTERNAL, Imgproc.CHAIN_APPROX_SIMPLE
        )

        Log.d("DotCounter", "üìä –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç—É—Ä–æ–≤: ${cnts.size}")

        val validDots = mutableListOf<DotInfo>()
        cnts.forEachIndexed { index, c ->
            val area = Imgproc.contourArea(c)
            if (area < 8) { // –ü–æ–Ω–∏–∑–∏–ª –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –ø–ª–æ—â–∞–¥—å —Å 15 –¥–æ 8
                Log.v("DotCounter", "‚ùå –ö–æ–Ω—Ç—É—Ä $index —Å–ª–∏—à–∫–æ–º –º–∞–ª: area=$area")
                return@forEachIndexed
            }

            // –ù–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π
            if (area > 200) { // –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ –æ–±–ª–∞—Å—Ç–∏ –≤—Ä—è–¥ –ª–∏ —Ç–æ—á–∫–∏
                Log.v("DotCounter", "‚ùå –ö–æ–Ω—Ç—É—Ä $index —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: area=$area")
                return@forEachIndexed
            }

            val peri = Imgproc.arcLength(MatOfPoint2f(*c.toArray()), true)
            val circ = 4 * Math.PI * area / (peri * peri + 1e-5)

            // –ë–æ–ª–µ–µ –º—è–≥–∫–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –∫—Ä—É–≥–ª–æ—Å—Ç–∏
            if (circ < 0.25) { // –ü–æ–Ω–∏–∑–∏–ª —Å 0.35 –¥–æ 0.25
                Log.v("DotCounter", "‚ùå –ö–æ–Ω—Ç—É—Ä $index –Ω–µ –∫—Ä—É–≥–ª—ã–π: circularity=${String.format("%.3f", circ)}")
                return@forEachIndexed
            }

            val m = Imgproc.moments(c)
            if (m.m00 == 0.0) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å
                Log.v("DotCounter", "‚ùå –ö–æ–Ω—Ç—É—Ä $index: –Ω—É–ª–µ–≤–∞—è –ø–ª–æ—â–∞–¥—å –º–æ–º–µ–Ω—Ç–∞")
                return@forEachIndexed
            }

            val centerX = (m.m10 / m.m00).toFloat()
            val centerY = (m.m01 / m.m00).toFloat()

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ—á–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if (centerX < 0 || centerX >= srcBmp.width || centerY < 0 || centerY >= srcBmp.height) {
                Log.v("DotCounter", "‚ùå –¢–æ—á–∫–∞ $index –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ($centerX, $centerY)")
                return@forEachIndexed
            }

            val confidence = calculateDotConfidence(area, circ, peri)
            validDots.add(DotInfo(centerX, centerY, area, confidence))

            Log.d("DotCounter", "‚úÖ –í–∞–ª–∏–¥–Ω–∞—è —Ç–æ—á–∫–∞ $index: (${centerX.toInt()}, ${centerY.toInt()}), area=${area.toInt()}, circ=${String.format("%.3f", circ)}, confidence=${String.format("%.2f", confidence)}")
        }

        if (validDots.isEmpty()) {
            Log.w("DotCounter", "‚ö†Ô∏è –í–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ—á–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! –í–æ–∑–º–æ–∂–Ω–æ, –∫—É–±–∏–∫–∏ –Ω–µ –≤–∏–¥–Ω—ã –∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–µ")
            hsv.release(); white.release(); bright.release(); gray.release()
            return Result(0, 0, 0.0f)
        }

        Log.d("DotCounter", "‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ—á–µ–∫ –Ω–∞–π–¥–µ–Ω–æ: ${validDots.size}")

        /* 4‚É£ –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ç–æ—á–µ–∫ –ø–æ –∫—É–±–∏–∫–∞–º -------------------- */
        val (left, right, confidence) = classifyDots(validDots, srcBmp.width)

        Log.d("DotCounter", "üé≤ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: left=$left, right=$right, confidence=${String.format("%.3f", confidence)}")

        // –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SimpleDualModeController

        hsv.release(); white.release(); bright.release(); gray.release()
        return Result(left, right, confidence)
    }

    private data class DotInfo(
        val x: Float,
        val y: Float,
        val area: Double,
        val confidence: Float
    )

    private fun calculateDotConfidence(area: Double, circularity: Double, perimeter: Double): Float {
        // –í—ã—á–∏—Å–ª—è–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ç–æ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ç–æ—á–∫–∞ –Ω–∞ –∫—É–±–∏–∫–µ
        val areaScore = when {
            area < 10 -> 0.4f  // –ü–æ–≤—ã—Å–∏–ª —Å 0.3f –¥–æ 0.4f
            area < 30 -> 0.8f  // –ü–æ–Ω–∏–∑–∏–ª –ø–æ—Ä–æ–≥ —Å 20 –¥–æ 10, —Å 50 –¥–æ 30
            area < 80 -> 0.9f  // –ü–æ–Ω–∏–∑–∏–ª —Å 100 –¥–æ 80
            area < 150 -> 0.7f // –ù–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö —Ç–æ—á–µ–∫
            else -> 0.4f // –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ –æ–±–ª–∞—Å—Ç–∏ –≤—Å—ë –µ—â—ë –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã
        }

        val circularityScore = when {
            circularity < 0.3 -> 0.3f  // –ü–æ–≤—ã—Å–∏–ª —Å 0.2f –¥–æ 0.3f
            circularity < 0.5 -> 0.7f  // –ü–æ–Ω–∏–∑–∏–ª –ø–æ—Ä–æ–≥ —Å 0.4 –¥–æ 0.3, —Å 0.6 –¥–æ 0.5
            circularity < 0.7 -> 0.9f  // –ü–æ–Ω–∏–∑–∏–ª —Å 0.8 –¥–æ 0.7
            else -> 1.0f
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å –∑–∞ —Ä–∞–∑–º–µ—Ä –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
        val sizeBonus = if (area in 10.0..80.0) 0.1f else 0.0f

        return ((areaScore + circularityScore) / 2.0f + sizeBonus).coerceAtMost(1.0f)
    }

    private fun classifyDots(dots: List<DotInfo>, imageWidth: Int): Triple<Int, Int, Float> {
        when (dots.size) {
            0 -> return Triple(0, 0, 0.0f)
            1 -> {
                val dot = dots[0]
                val isLeft = dot.x < imageWidth / 2f
                Log.d("DotCounter", "üéØ –û–¥–Ω–∞ —Ç–æ—á–∫–∞: x=${dot.x.toInt()}, imageWidth=$imageWidth, isLeft=$isLeft")

                val leftCount = if (isLeft) 1 else 0
                val rightCount = if (isLeft) 0 else 1

                // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è —Å–ª—É—á–∞—è –æ–¥–Ω–æ–π —Ç–æ—á–∫–∏ (–≤—Å–µ–≥–¥–∞ –≤–∞–ª–∏–¥–Ω–∞—è, –Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–º)
                val validatedLeft = leftCount.coerceIn(0, 6)
                val validatedRight = rightCount.coerceIn(0, 6)

                return Triple(validatedLeft, validatedRight, dot.confidence)
            }
            2 -> {
                // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è 2 —Ç–æ—á–µ–∫ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ö —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ
                Log.d("DotCounter", "üéØ –î–≤–µ —Ç–æ—á–∫–∏: –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∞–Ω–∏–º–∞—Ü–∏—è –ª–∏ —ç—Ç–æ...")
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–Ω–∏–º–∞—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏: —Ç–æ—á–∫–∏ –≤ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é
                val yDiff = kotlin.math.abs(dots[0].y - dots[1].y)
                val avgY = (dots[0].y + dots[1].y) / 2
                val imageHeight = avgY * 4 // –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                val verticalVariation = yDiff / imageHeight
                
                if (verticalVariation < 0.15f) { // –¢–æ—á–∫–∏ —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –ø–æ Y (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è)
                    Log.w("DotCounter", "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏: —Ç–æ—á–∫–∏ –≤ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é (yDiff=$yDiff)")
                    return Triple(0, 0, 0.1f) // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                }
                
                Log.d("DotCounter", "‚úÖ –ù–µ –∞–Ω–∏–º–∞—Ü–∏—è: —Ç–æ—á–∫–∏ —Ä–∞–∑–±—Ä–æ—Å–∞–Ω—ã –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ (yDiff=$yDiff)")
                
                val centerX = imageWidth / 2f
                var leftCount = 0
                var rightCount = 0
                var totalConfidence = 0.0f

                dots.forEach { dot ->
                    if (dot.x < centerX) {
                        leftCount++
                    } else {
                        rightCount++
                    }
                    totalConfidence += dot.confidence
                }

                val avgConfidence = totalConfidence / dots.size

                // –î–ª—è –¥–≤—É—Ö —Ç–æ—á–µ–∫ –¥–∞–µ–º –≤—ã—Å–æ–∫–∏–π separationScore, –µ—Å–ª–∏ –æ–Ω–∏ –ø–æ —Ä–∞–∑–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –æ—Ç —Ü–µ–Ω—Ç—Ä–∞
                val separationScore = if (leftCount > 0 && rightCount > 0) 0.9f else 0.6f
                val finalConfidence = avgConfidence * separationScore

                Log.d("DotCounter", "üéØ –ü—Ä–æ—Å—Ç–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ: left=$leftCount, right=$rightCount, conf=${String.format("%.3f", finalConfidence)}")
                
                val validatedLeft = leftCount.coerceIn(0, 6)
                val validatedRight = rightCount.coerceIn(0, 6)

                return Triple(validatedLeft, validatedRight, finalConfidence)
            }
            else -> {
                Log.d("DotCounter", "üî¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${dots.size} —Ç–æ—á–µ–∫...")

                // –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç–æ—á–µ–∫, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã - —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                val filteredDots = if (dots.size > 12) { // –ë–æ–ª—å—à–µ —á–µ–º –º–∞–∫—Å–∏–º—É–º –¥–ª—è –¥–≤—É—Ö –∫—É–±–∏–∫–æ–≤ (6+6)
                    Log.w("DotCounter", "‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç–æ—á–µ–∫ (${dots.size}), —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏...")
                    dots.sortedByDescending { it.confidence }.take(12) // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ 12 –ª—É—á—à–∏—Ö
                } else {
                    dots
                }

                // –ò—Å–ø–æ–ª—å–∑—É–µ–º k-means –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
                val samples = Mat(filteredDots.size, 1, CvType.CV_32F)
                filteredDots.forEachIndexed { i, dot ->
                    samples.put(i, 0, floatArrayOf(dot.x))
                }

                val labels = Mat()
                val centers = Mat()
                val term = TermCriteria(
                    TermCriteria.EPS + TermCriteria.MAX_ITER, 10, 1.0
                )

                try {
                    // üéØ –°–¢–ê–ë–ò–õ–ò–ó–ê–¶–ò–Ø K-MEANS: –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –∏ –±–µ—Ä–µ–º —Å–∞–º—ã–π —á–∞—Å—Ç—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    val results = mutableListOf<Pair<Int, Int>>()
                    
                    repeat(5) { // –î–µ–ª–∞–µ–º 5 –ø–æ–ø—ã—Ç–æ–∫ K-means
                        val tempLabels = Mat()
                        val tempCenters = Mat()
                        
                        Core.kmeans(
                            samples, 2, tempLabels, term, 3,
                            Core.KMEANS_PP_CENTERS, tempCenters
                        )
                        
                        val tempLeftLbl = if (tempCenters.get(0,0)[0] < tempCenters.get(1,0)[0]) 0 else 1
                        var tempLeft = 0
                        var tempRight = 0
                        
                        for (i in 0 until tempLabels.rows()) {
                            val label = tempLabels.get(i,0)[0].roundToInt()
                            if (label == tempLeftLbl) {
                                tempLeft++
                            } else {
                                tempRight++
                            }
                        }
                        
                        results.add(Pair(tempLeft, tempRight))
                        tempLabels.release()
                        tempCenters.release()
                    }
                    
                    // –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π —á–∞—Å—Ç—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    val mostCommon = results.groupBy { it }.maxByOrNull { it.value.size }?.key
                        ?: results.first()
                    
                    // üéØ –†–ê–ù–ù–Ø–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø: –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–µ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    val preValidatedLeft = mostCommon.first.coerceIn(0, 6)
                    val preValidatedRight = mostCommon.second.coerceIn(0, 6)
                    val correctedCommon = Pair(preValidatedLeft, preValidatedRight)
                    
                    if (mostCommon != correctedCommon) {
                        Log.w("DotCounter", "üîß –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–ê–Ø –ö–û–†–†–ï–ö–¶–ò–Ø K-means: ${mostCommon.first}:${mostCommon.second} ‚Üí ${correctedCommon.first}:${correctedCommon.second}")
                    }
                    
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º—ã–π —á–∞—Å—Ç—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
                    Core.kmeans(
                        samples, 2, labels, term, 3,
                        Core.KMEANS_PP_CENTERS, centers
                    )

                    val leftLbl = if (centers.get(0,0)[0] < centers.get(1,0)[0]) 0 else 1
                    var left = correctedCommon.first  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    var right = correctedCommon.second // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    var totalConfidence = 0.0f

                    // –ù–ï –ü–ï–†–ï–°–ß–ò–¢–´–í–ê–ï–ú! –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    for (i in 0 until labels.rows()) {
                        val dot = filteredDots[i]
                        totalConfidence += dot.confidence
                    }

                    val avgConfidence = totalConfidence / filteredDots.size

                    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ—á–∫–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã
                    val leftDots = filteredDots.filterIndexed { i, _ -> labels.get(i,0)[0].roundToInt() == leftLbl }
                    val rightDots = filteredDots.filterIndexed { i, _ -> labels.get(i,0)[0].roundToInt() != leftLbl }

                    val separationScore = calculateSeparationScore(leftDots, rightDots, imageWidth)
                    val finalConfidence = avgConfidence * separationScore

                    // –ü–û–î–†–û–ë–ù–û–ï –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    Log.d("DotCounter", "üîÑ K-means –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: left=$left, right=$right")
                    Log.d("DotCounter", "üìè –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤: leftAvgX=${leftDots.map { it.x }.average().toInt()}, rightAvgX=${rightDots.map { it.x }.average().toInt()}")
                    Log.d("DotCounter", "üéØ –ò—Ç–æ–≥–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: avgConf=${String.format("%.3f", avgConfidence)} * sepScore=${String.format("%.3f", separationScore)} = ${String.format("%.3f", finalConfidence)}")

                    // –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û –¢–û–ß–ö–ê–ú:
                    leftDots.forEachIndexed { idx, dot ->
                        Log.v("DotCounter", "üî¥ –õ–µ–≤–∞—è —Ç–æ—á–∫–∞ $idx: x=${dot.x.toInt()}, y=${dot.y.toInt()}, area=${dot.area.toInt()}, conf=${String.format("%.2f", dot.confidence)}")
                    }
                    rightDots.forEachIndexed { idx, dot ->
                        Log.v("DotCounter", "üü† –ü—Ä–∞–≤–∞—è —Ç–æ—á–∫–∞ $idx: x=${dot.x.toInt()}, y=${dot.y.toInt()}, area=${dot.area.toInt()}, conf=${String.format("%.2f", dot.confidence)}")
                    }

                    // –ö–†–ò–¢–ò–ß–ù–û: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ - –∫—É–±–∏–∫ –Ω–µ –º–æ–∂–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –±–æ–ª—å—à–µ 6 —Ç–æ—á–µ–∫
                    val validatedLeft = left.coerceIn(0, 6)
                    val validatedRight = right.coerceIn(0, 6)

                    if (left != validatedLeft || right != validatedRight) {
                        Log.w("DotCounter", "‚ö†Ô∏è –í–ê–õ–ò–î–ê–¶–ò–Ø: –ò—Å—Ö–æ–¥–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã ($left, $right) –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã –¥–æ ($validatedLeft, $validatedRight)")
                        // –£–º–µ–Ω—å—à–µ–Ω–æ —Å–Ω–∏–∂–µ–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (—Å 0.3f –¥–æ 0.7f)
                        val penalizedConfidence = finalConfidence * 0.7f
                        samples.release(); labels.release(); centers.release()
                        return Triple(validatedLeft, validatedRight, penalizedConfidence)
                    }

                    samples.release(); labels.release(); centers.release()
                    return Triple(validatedLeft, validatedRight, finalConfidence)

                } catch (e: Exception) {
                    // Log.e("DotCounter", "–û—à–∏–±–∫–∞ k-means –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏", e)
                    samples.release(); labels.release(); centers.release()
                    return Triple(0, 0, 0.0f)
                }
            }
        }
    }

    private fun calculateSeparationScore(leftDots: List<DotInfo>, rightDots: List<DotInfo>, imageWidth: Int): Float {
        if (leftDots.isEmpty() || rightDots.isEmpty()) return 0.5f

        val leftAvgX = leftDots.map { it.x }.average()
        val rightAvgX = rightDots.map { it.x }.average()

        val separation = kotlin.math.abs(rightAvgX - leftAvgX) / imageWidth
        val totalDots = leftDots.size + rightDots.size

        // –î–ª—è –º–∞–ª–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ—á–µ–∫ (2-4) –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –º—è–≥–∫–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏
        return if (totalDots <= 4) {
            when {
                separation < 0.05 -> 0.6f // –û—á–µ–Ω—å –±–ª–∏–∑–∫–æ, –Ω–æ –¥–ª—è –º–∞–ª–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ—á–µ–∫ –ø—Ä–∏–µ–º–ª–µ–º–æ
                separation < 0.15 -> 0.8f // –ë–ª–∏–∑–∫–æ
                else -> 1.0f // –•–æ—Ä–æ—à–æ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã
            }
        } else {
            // –î–ª—è –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ—á–µ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–≥–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏
            when {
                separation < 0.1 -> 0.3f // –°–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ
                separation < 0.2 -> 0.6f
                separation < 0.3 -> 0.8f
                else -> 1.0f // –•–æ—Ä–æ—à–æ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã
            }
        }
    }

    /**
     * –°–æ–∑–¥–∞—ë—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
     */
    private fun createVisualizationBitmap(
        originalBitmap: Bitmap,
        dots: List<DotInfo>,
        leftCount: Int,
        rightCount: Int
    ): Bitmap {
        val visualBitmap = originalBitmap.copy(Bitmap.Config.ARGB_8888, true)
        val canvas = android.graphics.Canvas(visualBitmap)

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è
        val leftPaint = android.graphics.Paint().apply {
            color = android.graphics.Color.RED
            style = android.graphics.Paint.Style.STROKE
            strokeWidth = 3f
        }
        val rightPaint = android.graphics.Paint().apply {
            color = android.graphics.Color.BLUE
            style = android.graphics.Paint.Style.STROKE
            strokeWidth = 3f
        }
        val textPaint = android.graphics.Paint().apply {
            color = android.graphics.Color.WHITE
            textSize = 20f
            isAntiAlias = true
            setShadowLayer(2f, 1f, 1f, android.graphics.Color.BLACK)
        }
        val boundsPaint = android.graphics.Paint().apply {
            color = android.graphics.Color.YELLOW
            style = android.graphics.Paint.Style.STROKE
            strokeWidth = 2f
        }

        val imageWidth = originalBitmap.width
        val imageHeight = originalBitmap.height
        val midPoint = imageWidth / 2f

        // –†–∏—Å—É–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        canvas.drawRect(0f, 0f, imageWidth.toFloat(), imageHeight.toFloat(), boundsPaint)

        // –†–∏—Å—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω—É—é –ª–∏–Ω–∏—é
        canvas.drawLine(midPoint, 0f, midPoint, imageHeight.toFloat(), boundsPaint)

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—Ä–∞—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        canvas.drawText("${imageWidth}x${imageHeight}", 10f, 30f, textPaint)
        canvas.drawText("Mid: ${midPoint.toInt()}", 10f, 60f, textPaint)

        // –†–∏—Å—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏
        dots.forEachIndexed { index, dot ->
            val isLeft = dot.x < midPoint
            val paint = if (isLeft) leftPaint else rightPaint
            val radius = 15f

            // –†–∏—Å—É–µ–º –æ–∫—Ä—É–∂–Ω–æ—Å—Ç—å –≤–æ–∫—Ä—É–≥ —Ç–æ—á–∫–∏
            canvas.drawCircle(dot.x, dot.y, radius, paint)

            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ—á–∫—É —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –∏ –æ–±–ª–∞—Å—Ç—å—é
            val label = "${index+1}:(${dot.x.toInt()},${dot.y.toInt()})"
            canvas.drawText(label, dot.x + 20f, dot.y - 5f, textPaint)
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        canvas.drawText("L:$leftCount R:$rightCount", 10f, 90f, textPaint)
        canvas.drawText("Total: ${dots.size} points", 10f, 115f, textPaint)

        return visualBitmap
    }
}
